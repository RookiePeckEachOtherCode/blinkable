// Code generated by hertz generator.

package api

import (
	homepage "blinkable/server/kitex_gen/Homepage"
	"blinkable/server/kitex_gen/user"
	api "blinkable/server/service/api/biz/model/api"
	"blinkable/server/service/api/biz/model/base"
	"blinkable/server/service/api/config"
	"context"
	"net/http"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// UserLogin .
// @router /blinkable/user/login [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error("api user_login bindAndValidate failed", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.UserLoginResponse)
	res, err := config.GlobalUserClient.UserLogin(ctx, &user.UserLoginRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		hlog.Errorf("user_service rpc call failed: %s", err)
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp = &api.UserLoginResponse{
		StatusCode: res.BaseResp.StatusCode,
		StatusMsg:  res.BaseResp.StatusMsg,
		Succed:     res.BaseResp.Succed,
		UserID:     res.UserId,
		Token:      res.Token,
	}

	c.JSON(consts.StatusOK, resp)
}

// UserRegister .
// @router /blinkable/user/register [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error("api user_register bindAndValidate failed", err)
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(api.UserRegisterResponse)
	res, err := config.GlobalUserClient.UserRegister(ctx, &user.UserRegisterRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		hlog.Errorf("user_service rpc call failed: %s", err)
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}
	resp = &api.UserRegisterResponse{
		StatusCode: res.BaseResp.StatusCode,
		StatusMsg:  res.BaseResp.StatusMsg,
		Succed:     res.BaseResp.Succed,
		UserID:     res.UserId,
		Token:      res.Token,
	}

	c.JSON(consts.StatusOK, resp)
}

// GetUserInfo .
// @router /blinkable/user/info [GET]
func GetUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetUserInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	res, err := config.GlobalUserClient.GetUserInfo(ctx, &user.GetUserInfoRequest{
		UserId: req.UserID,
		Token:  req.Token,
	})
	if err != nil {
		hlog.Errorf("get_user_info rpc call failed", err)
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	guestbooks := make([]*base.Guestbook, len(res.UserInfo.Guestbooks))

	for i := 0; i < len(guestbooks); i++ {
		guestbooks[i].ID = res.UserInfo.Guestbooks[i].Id
		guestbooks[i].UserID = res.UserInfo.Guestbooks[i].UserId
		guestbooks[i].Context = res.UserInfo.Guestbooks[i].Context
		guestbooks[i].FromUserID = res.UserInfo.Guestbooks[i].FromUserId
		guestbooks[i].CreateTime = res.UserInfo.Guestbooks[i].CreateTime
	}

	resp := new(api.GetUserInfoResponse)
	resp.User = &base.User{
		ID:            res.UserInfo.Id,
		Name:          res.UserInfo.Name,
		Avatar:        res.UserInfo.Avatar,
		ArticlesNum:   res.UserInfo.ArticlesNum,
		Level:         res.UserInfo.Level,
		Signature:     res.UserInfo.Signature,
		Experience:    res.UserInfo.Experience,
		BackgroundImg: res.UserInfo.BackgroundImg,
		LikeNum:       res.UserInfo.LikeNum,
		GithubURL:     res.UserInfo.GithubUrl,
		Guestbooks:    guestbooks,
	}

	resp.StatusCode = res.BaseResp.StatusCode
	resp.StatusMsg = res.BaseResp.StatusMsg
	resp.Succed = res.BaseResp.Succed
	c.JSON(consts.StatusOK, resp)
}

// UpdateUserInfo .
// @router /blinkable/user/update [POST]
func UpdateUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UpdateUserInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.UpdateUserInfoResponse)
	res, err := config.GlobalUserClient.UpdateUserInfo(ctx, &user.UpdateUserInfoRequest{
		UserId:    req.UserID,
		Username:  req.Username,
		Token:     req.Token,
		Signature: req.Signature,
		Title:     req.Title,
		GithubUrl: req.GithubURL,
	})
	if err != nil {
		hlog.Errorf("update userinfo failed: %s", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp.Succed = res.BaseResp.Succed
	resp.StatusMsg = res.BaseResp.StatusMsg
	resp.StatusCode = res.BaseResp.StatusCode

	c.JSON(consts.StatusOK, resp)
}

// UpdateUserPassword .
// @router /blinkable/user/update/password [POST]
func UpdateUserPassword(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UpdateUserPasswordRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.UpdateUserPasswordResponse)
	res, err := config.GlobalUserClient.UpdateUserPassword(ctx, &user.UpdateUserPasswordRequest{
		UserId:       req.UserID,
		Token:        req.Token,
		Newpassword_: req.NewPasswd,
		Oldpassword:  req.OldPasswd,
	})
	if err != nil {
		hlog.Errorf("update user password failed: %s", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp.StatusCode = res.BaseResp.StatusCode
	resp.StatusMsg = res.BaseResp.StatusMsg
	resp.Succed = res.BaseResp.Succed

	c.JSON(consts.StatusOK, resp)
}

// GetHomePage .
// @router /blinkable/homepage/get [GET]
func GetHomePage(ctx context.Context, c *app.RequestContext) {
	var err error
	resp := new(api.GetHomepageResponse)
	res, err := config.GlobalHomepageClient.GetMainview(ctx, &homepage.GetHomepageRequest{})
	if err != nil {
		hlog.Errorf("gethomepage failed: %s", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp.Users = make([]*base.User, len(res.Users))

	for i := 0; i < len(res.Users); i++ {
		resp.Users[i] = &base.User{
			ID:            res.Users[i].Id,
			Name:          res.Users[i].Name,
			Avatar:        res.Users[i].Avatar,
			ArticlesNum:   res.Users[i].ArticlesNum,
			Level:         res.Users[i].Level,
			Signature:     res.Users[i].Signature,
			Experience:    res.Users[i].Experience,
			BackgroundImg: res.Users[i].BackgroundImg,
			LikeNum:       res.Users[i].LikeNum,
			GithubURL:     res.Users[i].GithubUrl,
			Guestbooks:    make([]*base.Guestbook, len(res.Users[i].Guestbooks)),
		}

		for j := 0; j < len(res.Users[i].Guestbooks); j++ {
			resp.Users[i].Guestbooks[j] = &base.Guestbook{
				ID:         res.Users[i].Guestbooks[j].Id,
				UserID:     res.Users[i].Guestbooks[j].UserId,
				Context:    res.Users[i].Guestbooks[j].Context,
				FromUserID: res.Users[i].Guestbooks[j].FromUserId,
				CreateTime: res.Users[i].Guestbooks[j].CreateTime,
			}
		}
	}

	resp.StatusCode = http.StatusOK
	resp.Succed = true
	resp.StatusMsg = "ok"
	c.JSON(consts.StatusOK, resp)
}

// AddGuestbook .
// @router /blinkable/homepage/guestbook [POST]
func AddGuestbook(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.AddGuestbookRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.AddGuestbookResponse)
	res, err := config.GlobalHomepageClient.AddGuestbook(ctx, &homepage.AddGuestbookRequest{
		UserId:     req.UserID,
		FromUserId: req.FromUserID,
		Context:    req.Context,
	})
	if err != nil {
		hlog.Errorf("addguestbook failed: %s", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp.Succed = res.Succed
	resp.StatusMsg = res.StatusMsg
	resp.StatusCode = res.StatusCode

	c.JSON(consts.StatusOK, resp)
}

// LikeAction .
// @router blinkable/homepage/like [POST]
func LikeAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.LikeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(api.LikeResponse)
	res, err := config.GlobalHomepageClient.LikeAction(ctx, &homepage.LikeRequest{
		UserId:     req.UserID,
		FromUserId: req.FromUserID,
	})
	if err != nil {
		hlog.Errorf("like failed: %s", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp.Succed = res.Succed
	resp.StatusMsg = res.StatusMsg
	resp.StatusCode = res.StatusCode
	c.JSON(consts.StatusOK, resp)
}

// GetArticleSum .
// @router blinkable/article/sum [GET]
func GetArticleSum(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetArticlesumRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.GetArticlesumResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetArtcleList .
// @router blinkable/article/list [GET]
func GetArtcleList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetArticlelistRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.GetArticlelistResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetArticle .
// @router blinkable/article/get [GET]
func GetArticle(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetArticleRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.GetArticleResponse)

	c.JSON(consts.StatusOK, resp)
}

// PublishArticle .
// @router blinkable/article/publish [POST]
func PublishArticle(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.PublishArticleRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.PublishArticleResponse)

	c.JSON(consts.StatusOK, resp)
}

// AddComment .
// @router blinkable/article/comment [POST]
func AddComment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.AddGuestbookRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.AddCommentResponse)

	c.JSON(consts.StatusOK, resp)
}

// DeleteArticle .
// @router blinkable/article/delet [POST]
func DeleteArticle(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.DeleteArticleRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.DeleteArticleResponse)

	c.JSON(consts.StatusOK, resp)
}
