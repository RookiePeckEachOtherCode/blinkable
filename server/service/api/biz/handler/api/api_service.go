// Code generated by hertz generator.

package api

import (
	homepage "blinkable/server/kitex_gen/Homepage"
	"blinkable/server/kitex_gen/user"
	api "blinkable/server/service/api/biz/model/api"
	"blinkable/server/service/api/biz/model/base"
	"blinkable/server/service/api/config"
	"context"
	"errors"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"net/http"
)

// UserLogin .
// @router /blinkable/user/login [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error("api user_login bindAndValidate failed", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.UserLoginResponse)
	res, err := config.GlobalUserClient.UserLogin(ctx, &user.UserLoginRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		hlog.Errorf("user_service rpc call failed: %s", err)
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp = &api.UserLoginResponse{
		StatusCode: res.BaseResp.StatusCode,
		StatusMsg:  res.BaseResp.StatusMsg,
		Succed:     res.BaseResp.Succed,
		UserID:     res.UserId,
		Token:      res.Token,
	}

	c.JSON(consts.StatusOK, resp)
}

// UserRegister .
// @router /blinkable/user/register [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error("api user_register bindAndValidate failed", err)
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(api.UserRegisterResponse)
	res, err := config.GlobalUserClient.UserRegister(ctx, &user.UserRegisterRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		hlog.Errorf("user_service rpc call failed: %s", err)
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}
	resp = &api.UserRegisterResponse{
		StatusCode: res.BaseResp.StatusCode,
		StatusMsg:  res.BaseResp.StatusMsg,
		Succed:     res.BaseResp.Succed,
		UserID:     res.UserId,
		Token:      res.Token,
	}

	c.JSON(consts.StatusOK, resp)
}

// GetUserInfo .
// @router /blinkable/user/info [GET]
func GetUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetUserInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	if req.Tp == 0 {
		res, err := config.GlobalUserClient.GetUserInfo(ctx, &user.GetUserInfoRequest{
			Tp:     req.Tp,
			UserId: req.UserID,
			Token:  req.Token,
		})
		if err != nil {
			hlog.Errorf("get_user_info rpc call failed", err)
			c.String(consts.StatusInternalServerError, err.Error())
			return
		}
		resp := new(api.GetUserInfoResponse)
		resp.User = &base.User{
			ID:            res.UserInfo.Id,
			Name:          req.UserName,
			Avatar:        res.UserInfo.Avatar,
			ArticlesNum:   res.UserInfo.ArticlesNum,
			Level:         res.UserInfo.Level,
			Signature:     res.UserInfo.Signature,
			Experience:    res.UserInfo.Experience,
			BackgroundImg: res.UserInfo.BackgroundImg,
		}
		resp.StatusCode = res.BaseResp.StatusCode
		resp.StatusMsg = res.BaseResp.StatusMsg
		resp.Succed = res.BaseResp.Succed
		c.JSON(consts.StatusOK, resp)
	} else if req.Tp == 1 {
		res, err := config.GlobalUserClient.GetUserInfo(ctx, &user.GetUserInfoRequest{
			Tp:       req.Tp,
			UserName: req.UserName,
			Token:    req.Token,
		})
		if err != nil {
			hlog.Errorf("get_user_info rpc call failed", err)
			c.String(consts.StatusInternalServerError, err.Error())
			return
		}
		resp := new(api.GetUserInfoResponse)
		resp.User = &base.User{
			ID:            res.UserInfo.Id,
			Name:          req.UserName,
			Avatar:        res.UserInfo.Avatar,
			ArticlesNum:   res.UserInfo.ArticlesNum,
			Level:         res.UserInfo.Level,
			Signature:     res.UserInfo.Signature,
			Experience:    res.UserInfo.Experience,
			BackgroundImg: res.UserInfo.BackgroundImg,
		}
		resp.StatusCode = res.BaseResp.StatusCode
		resp.StatusMsg = res.BaseResp.StatusMsg
		resp.Succed = res.BaseResp.Succed
		c.JSON(consts.StatusOK, resp)
	} else {
		err := errors.New("undefined type")
		hlog.Errorf("get user info failed: %s", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
}

// UpdateUserInfo .
// @router /blinkable/user/update [POST]
func UpdateUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UpdateUserInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.UpdateUserInfoResponse)
	res, err := config.GlobalUserClient.UpdateUserInfo(ctx, &user.UpdateUserInfoRequest{
		UserId:    req.UserID,
		Username:  req.Username,
		Token:     req.Token,
		Signature: req.Signature,
	})
	if err != nil {
		hlog.Errorf("update userinfo failed: %s", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp.Succed = res.BaseResp.Succed
	resp.StatusMsg = res.BaseResp.StatusMsg
	resp.StatusCode = res.BaseResp.StatusCode

	c.JSON(consts.StatusOK, resp)
}

// UpdateUserPassword .
// @router /blinkable/user/update/password [POST]
func UpdateUserPassword(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UpdateUserPasswordRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.UpdateUserPasswordResponse)
	res, err := config.GlobalUserClient.UpdateUserPassword(ctx, &user.UpdateUserPasswordRequest{
		UserId:       req.UserID,
		Token:        req.Token,
		Newpassword_: req.NewPasswd,
		Oldpassword:  req.OldPasswd,
	})
	if err != nil {
		hlog.Errorf("update user password failed: %s", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp.StatusCode = res.BaseResp.StatusCode
	resp.StatusMsg = res.BaseResp.StatusMsg
	resp.Succed = res.BaseResp.Succed

	c.JSON(consts.StatusOK, resp)
}

// GetHomePage .
// @router /blinkable/homepage/get [GET]
func GetHomePage(ctx context.Context, c *app.RequestContext) {
	var err error
	resp := new(api.GetHomepageResponse)
	res, err := config.GlobalHomepageClient.GetMainview(ctx, nil)
	if err != nil {
		hlog.Errorf("gethomepage failed: %s", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	for _, i := range res.Users {
		k := api.Users{
			AdminID:    i.AdminId,
			Signature:  i.Signature,
			Likes:      i.Likes,
			Title:      i.Title,
			Comments:   i.Comments,
			Guestbooks: nil,
			IconURL:    i.IconUrl,
			ImageURL:   i.ImageUrl,
			GitURL:     i.GitUrl,
		}
		for _, j := range i.Guestbooks {
			g := api.Guestbook{
				BookID:     j.BookId,
				UserID:     j.UserId,
				Context:    j.Context,
				FormuserID: j.FormuserId,
				CreateTime: j.GetCreateTime(),
			}
			k.Guestbooks = append(k.Guestbooks, &g)
		}
		resp.Users = append(resp.Users, &k)
	}
	resp.StatusCode = http.StatusOK
	resp.Succed = true
	resp.StatusMsg = "ok"
	c.JSON(consts.StatusOK, resp)
}

// AddGuestbook .
// @router /blinkable/homepage/guesybook [POST]
func AddGuestbook(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.AddGuestbookRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.AddGuestbookResponse)
	res, err := config.GlobalHomepageClient.AddGuestbook(ctx, &homepage.AddGuestbookRequest{
		UserId:  req.UserID,
		AdminId: req.AdminID,
		Context: req.Context,
	})
	if err != nil {
		hlog.Errorf("addguestbook failed: %s", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp.Succed = res.Succed
	resp.StatusMsg = res.StatusMsg
	resp.StatusCode = res.StatusCode

	c.JSON(consts.StatusOK, resp)
}

// Like .
// @router blinkable/homepage/like [POST]
func Like(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.LikeRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(api.LikeResponse)
	res, err := config.GlobalHomepageClient.LikeAction(ctx, &homepage.LikeRequest{
		AdminId: req.AdminID,
		UserId:  req.UserID,
	})
	if err != nil {
		hlog.Errorf("like failed: %s", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp.Succed = res.Succed
	resp.StatusMsg = res.StatusMsg
	resp.StatusCode = res.StatusCode
	c.JSON(consts.StatusOK, resp)
}
