// Code generated by hertz generator.

package api

import (
	"context"
	"errors"

	"blinkable/server/kitex_gen/user"
	api "blinkable/server/service/api/biz/model/api"
	"blinkable/server/service/api/biz/model/base"
	"blinkable/server/service/api/config"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// UserLogin .
// @router /blinkable/user/login [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error("api user_login bindAndValidate failed", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.UserLoginResponse)
	res, err := config.GlobalUserClient.UserLogin(ctx, &user.UserLoginRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		hlog.Errorf("user_service rpc call failed: %s", err)
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp = &api.UserLoginResponse{
		StatusCode: res.BaseResp.StatusCode,
		StatusMsg:  res.BaseResp.StatusMsg,
		Succed:     res.BaseResp.Succed,
		UserID:     res.UserId,
		Token:      res.Token,
	}

	c.JSON(consts.StatusOK, resp)
}

// UserRegister .
// @router /blinkable/user/register [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		hlog.Error("api user_register bindAndValidate failed", err)
		c.String(consts.StatusInternalServerError, err.Error())
		return
	}

	resp := new(api.UserRegisterResponse)
	res, err := config.GlobalUserClient.UserRegister(ctx, &user.UserRegisterRequest{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		hlog.Errorf("user_service rpc call failed: %s", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp = &api.UserRegisterResponse{
		StatusCode: res.BaseResp.StatusCode,
		StatusMsg:  res.BaseResp.StatusMsg,
		Succed:     res.BaseResp.Succed,
		UserID:     res.UserId,
		Token:      res.Token,
	}

	c.JSON(consts.StatusOK, resp)
}

// GetUserInfo .
// @router /blinkable/user/info [GET]
func GetUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.GetUserInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	if req.Tp == 0 {
		res, err := config.GlobalUserClient.GetUserInfo(ctx, &user.GetUserInfoRequest{
			Tp:     req.Tp,
			UserId: req.UserID,
			Token:  req.Token,
		})
		if err != nil {
			hlog.Errorf("get_user_info rpc call failed", err)
			c.String(consts.StatusBadRequest, err.Error())
			return
		}
		resp := new(api.GetUserInfoResponse)
		resp.User = &base.User{
			ID:            res.UserInfo.Id,
			Name:          req.UserName,
			Avatar:        res.UserInfo.Avatar,
			ArticlesNum:   res.UserInfo.ArticlesNum,
			Level:         res.UserInfo.Level,
			Signature:     res.UserInfo.Signature,
			Experience:    res.UserInfo.Experience,
			BackgroundImg: res.UserInfo.BackgroundImg,
		}
		resp.StatusCode = res.BaseResp.StatusCode
		resp.StatusMsg = res.BaseResp.StatusMsg
		resp.Succed = res.BaseResp.Succed
		c.JSON(consts.StatusOK, resp)
	} else if req.Tp == 1 {
		res, err := config.GlobalUserClient.GetUserInfo(ctx, &user.GetUserInfoRequest{
			Tp:       req.Tp,
			UserName: req.UserName,
			Token:    req.Token,
		})
		if err != nil {
			hlog.Errorf("get_user_info rpc call failed", err)
			c.String(consts.StatusBadRequest, err.Error())
			return
		}
		resp := new(api.GetUserInfoResponse)
		resp.User = &base.User{
			ID:            res.UserInfo.Id,
			Name:          req.UserName,
			Avatar:        res.UserInfo.Avatar,
			ArticlesNum:   res.UserInfo.ArticlesNum,
			Level:         res.UserInfo.Level,
			Signature:     res.UserInfo.Signature,
			Experience:    res.UserInfo.Experience,
			BackgroundImg: res.UserInfo.BackgroundImg,
		}
		resp.StatusCode = res.BaseResp.StatusCode
		resp.StatusMsg = res.BaseResp.StatusMsg
		resp.Succed = res.BaseResp.Succed
		c.JSON(consts.StatusOK, resp)
	} else {
		err := errors.New("undefined type")
		hlog.Errorf("get user info failed: %s", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
}

// UpdateUserInfo .
// @router /blinkable/user/update [POST]
func UpdateUserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UpdateUserInfoRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.UpdateUserInfoResponse)
	res, err := config.GlobalUserClient.UpdateUserInfo(ctx, &user.UpdateUserInfoRequest{
		UserId:    req.UserID,
		Username:  req.Username,
		Token:     req.Token,
		Signature: req.Signature,
	})
	if err != nil {
		hlog.Errorf("update userinfo failed: %s", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp.Succed = res.BaseResp.Succed
	resp.StatusMsg = res.BaseResp.StatusMsg
	resp.StatusCode = res.BaseResp.StatusCode

	c.JSON(consts.StatusOK, resp)
}
