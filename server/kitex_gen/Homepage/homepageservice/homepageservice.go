// Code generated by Kitex v0.7.2. DO NOT EDIT.

package homepageservice

import (
	homepage "blinkable/server/kitex_gen/Homepage"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return homepageServiceServiceInfo
}

var homepageServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "HomepageService"
	handlerType := (*homepage.HomepageService)(nil)
	methods := map[string]kitex.MethodInfo{
		"LikeAction":   kitex.NewMethodInfo(likeActionHandler, newHomepageServiceLikeActionArgs, newHomepageServiceLikeActionResult, false),
		"GetMainview":  kitex.NewMethodInfo(getMainviewHandler, newHomepageServiceGetMainviewArgs, newHomepageServiceGetMainviewResult, false),
		"AddGuestbook": kitex.NewMethodInfo(addGuestbookHandler, newHomepageServiceAddGuestbookArgs, newHomepageServiceAddGuestbookResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "homepage",
		"ServiceFilePath": `../../idl/homepage.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.2",
		Extra:           extra,
	}
	return svcInfo
}

func likeActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*homepage.HomepageServiceLikeActionArgs)
	realResult := result.(*homepage.HomepageServiceLikeActionResult)
	success, err := handler.(homepage.HomepageService).LikeAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newHomepageServiceLikeActionArgs() interface{} {
	return homepage.NewHomepageServiceLikeActionArgs()
}

func newHomepageServiceLikeActionResult() interface{} {
	return homepage.NewHomepageServiceLikeActionResult()
}

func getMainviewHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*homepage.HomepageServiceGetMainviewArgs)
	realResult := result.(*homepage.HomepageServiceGetMainviewResult)
	success, err := handler.(homepage.HomepageService).GetMainview(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newHomepageServiceGetMainviewArgs() interface{} {
	return homepage.NewHomepageServiceGetMainviewArgs()
}

func newHomepageServiceGetMainviewResult() interface{} {
	return homepage.NewHomepageServiceGetMainviewResult()
}

func addGuestbookHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*homepage.HomepageServiceAddGuestbookArgs)
	realResult := result.(*homepage.HomepageServiceAddGuestbookResult)
	success, err := handler.(homepage.HomepageService).AddGuestbook(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newHomepageServiceAddGuestbookArgs() interface{} {
	return homepage.NewHomepageServiceAddGuestbookArgs()
}

func newHomepageServiceAddGuestbookResult() interface{} {
	return homepage.NewHomepageServiceAddGuestbookResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) LikeAction(ctx context.Context, req *homepage.LikeRequest) (r *homepage.LikeResponse, err error) {
	var _args homepage.HomepageServiceLikeActionArgs
	_args.Req = req
	var _result homepage.HomepageServiceLikeActionResult
	if err = p.c.Call(ctx, "LikeAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetMainview(ctx context.Context, req *homepage.GetHomepageRequest) (r *homepage.GetHomepageResponse, err error) {
	var _args homepage.HomepageServiceGetMainviewArgs
	_args.Req = req
	var _result homepage.HomepageServiceGetMainviewResult
	if err = p.c.Call(ctx, "GetMainview", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddGuestbook(ctx context.Context, req *homepage.AddGuestbookRequest) (r *homepage.AddGuestbookResponse, err error) {
	var _args homepage.HomepageServiceAddGuestbookArgs
	_args.Req = req
	var _result homepage.HomepageServiceAddGuestbookResult
	if err = p.c.Call(ctx, "AddGuestbook", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
