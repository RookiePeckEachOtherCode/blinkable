// Code generated by Kitex v0.7.3. DO NOT EDIT.

package articleservice

import (
	article "blinkable/server/kitex_gen/Article"
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GetArticleSum(ctx context.Context, req *article.GetArticleSumRequest, callOptions ...callopt.Option) (r *article.GetArticleSumResponse, err error)
	GetArticleList(ctx context.Context, req *article.GetArticleListRequest, callOptions ...callopt.Option) (r *article.GetArticleListResponse, err error)
	GetArticle(ctx context.Context, req *article.GetArticleRequest, callOptions ...callopt.Option) (r *article.GetArticleResponse, err error)
	PublishArticle(ctx context.Context, req *article.PublishArticleRequest, callOptions ...callopt.Option) (r *article.PublishArticleResponse, err error)
	AddComment(ctx context.Context, req *article.AddCommentRequest, callOptions ...callopt.Option) (r *article.AddCommentResponse, err error)
	DeleteArticle(ctx context.Context, req *article.DeleteArticleRequest, callOptions ...callopt.Option) (r *article.DeleteArticleResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kArticleServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kArticleServiceClient struct {
	*kClient
}

func (p *kArticleServiceClient) GetArticleSum(ctx context.Context, req *article.GetArticleSumRequest, callOptions ...callopt.Option) (r *article.GetArticleSumResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetArticleSum(ctx, req)
}

func (p *kArticleServiceClient) GetArticleList(ctx context.Context, req *article.GetArticleListRequest, callOptions ...callopt.Option) (r *article.GetArticleListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetArticleList(ctx, req)
}

func (p *kArticleServiceClient) GetArticle(ctx context.Context, req *article.GetArticleRequest, callOptions ...callopt.Option) (r *article.GetArticleResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetArticle(ctx, req)
}

func (p *kArticleServiceClient) PublishArticle(ctx context.Context, req *article.PublishArticleRequest, callOptions ...callopt.Option) (r *article.PublishArticleResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PublishArticle(ctx, req)
}

func (p *kArticleServiceClient) AddComment(ctx context.Context, req *article.AddCommentRequest, callOptions ...callopt.Option) (r *article.AddCommentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.AddComment(ctx, req)
}

func (p *kArticleServiceClient) DeleteArticle(ctx context.Context, req *article.DeleteArticleRequest, callOptions ...callopt.Option) (r *article.DeleteArticleResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteArticle(ctx, req)
}
