// Code generated by Kitex v0.7.3. DO NOT EDIT.

package articleservice

import (
	article "blinkable/server/kitex_gen/Article"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return articleServiceServiceInfo
}

var articleServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ArticleService"
	handlerType := (*article.ArticleService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetArticleSum":  kitex.NewMethodInfo(getArticleSumHandler, newArticleServiceGetArticleSumArgs, newArticleServiceGetArticleSumResult, false),
		"GetArticleList": kitex.NewMethodInfo(getArticleListHandler, newArticleServiceGetArticleListArgs, newArticleServiceGetArticleListResult, false),
		"GetArticle":     kitex.NewMethodInfo(getArticleHandler, newArticleServiceGetArticleArgs, newArticleServiceGetArticleResult, false),
		"PublishArticle": kitex.NewMethodInfo(publishArticleHandler, newArticleServicePublishArticleArgs, newArticleServicePublishArticleResult, false),
		"AddComment":     kitex.NewMethodInfo(addCommentHandler, newArticleServiceAddCommentArgs, newArticleServiceAddCommentResult, false),
		"DeleteArticle":  kitex.NewMethodInfo(deleteArticleHandler, newArticleServiceDeleteArticleArgs, newArticleServiceDeleteArticleResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "article",
		"ServiceFilePath": `../../idl/article.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.3",
		Extra:           extra,
	}
	return svcInfo
}

func getArticleSumHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*article.ArticleServiceGetArticleSumArgs)
	realResult := result.(*article.ArticleServiceGetArticleSumResult)
	success, err := handler.(article.ArticleService).GetArticleSum(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArticleServiceGetArticleSumArgs() interface{} {
	return article.NewArticleServiceGetArticleSumArgs()
}

func newArticleServiceGetArticleSumResult() interface{} {
	return article.NewArticleServiceGetArticleSumResult()
}

func getArticleListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*article.ArticleServiceGetArticleListArgs)
	realResult := result.(*article.ArticleServiceGetArticleListResult)
	success, err := handler.(article.ArticleService).GetArticleList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArticleServiceGetArticleListArgs() interface{} {
	return article.NewArticleServiceGetArticleListArgs()
}

func newArticleServiceGetArticleListResult() interface{} {
	return article.NewArticleServiceGetArticleListResult()
}

func getArticleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*article.ArticleServiceGetArticleArgs)
	realResult := result.(*article.ArticleServiceGetArticleResult)
	success, err := handler.(article.ArticleService).GetArticle(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArticleServiceGetArticleArgs() interface{} {
	return article.NewArticleServiceGetArticleArgs()
}

func newArticleServiceGetArticleResult() interface{} {
	return article.NewArticleServiceGetArticleResult()
}

func publishArticleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*article.ArticleServicePublishArticleArgs)
	realResult := result.(*article.ArticleServicePublishArticleResult)
	success, err := handler.(article.ArticleService).PublishArticle(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArticleServicePublishArticleArgs() interface{} {
	return article.NewArticleServicePublishArticleArgs()
}

func newArticleServicePublishArticleResult() interface{} {
	return article.NewArticleServicePublishArticleResult()
}

func addCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*article.ArticleServiceAddCommentArgs)
	realResult := result.(*article.ArticleServiceAddCommentResult)
	success, err := handler.(article.ArticleService).AddComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArticleServiceAddCommentArgs() interface{} {
	return article.NewArticleServiceAddCommentArgs()
}

func newArticleServiceAddCommentResult() interface{} {
	return article.NewArticleServiceAddCommentResult()
}

func deleteArticleHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*article.ArticleServiceDeleteArticleArgs)
	realResult := result.(*article.ArticleServiceDeleteArticleResult)
	success, err := handler.(article.ArticleService).DeleteArticle(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newArticleServiceDeleteArticleArgs() interface{} {
	return article.NewArticleServiceDeleteArticleArgs()
}

func newArticleServiceDeleteArticleResult() interface{} {
	return article.NewArticleServiceDeleteArticleResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetArticleSum(ctx context.Context, req *article.GetArticleSumRequest) (r *article.GetArticleSumResponse, err error) {
	var _args article.ArticleServiceGetArticleSumArgs
	_args.Req = req
	var _result article.ArticleServiceGetArticleSumResult
	if err = p.c.Call(ctx, "GetArticleSum", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetArticleList(ctx context.Context, req *article.GetArticleListRequest) (r *article.GetArticleListResponse, err error) {
	var _args article.ArticleServiceGetArticleListArgs
	_args.Req = req
	var _result article.ArticleServiceGetArticleListResult
	if err = p.c.Call(ctx, "GetArticleList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetArticle(ctx context.Context, req *article.GetArticleRequest) (r *article.GetArticleResponse, err error) {
	var _args article.ArticleServiceGetArticleArgs
	_args.Req = req
	var _result article.ArticleServiceGetArticleResult
	if err = p.c.Call(ctx, "GetArticle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishArticle(ctx context.Context, req *article.PublishArticleRequest) (r *article.PublishArticleResponse, err error) {
	var _args article.ArticleServicePublishArticleArgs
	_args.Req = req
	var _result article.ArticleServicePublishArticleResult
	if err = p.c.Call(ctx, "PublishArticle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AddComment(ctx context.Context, req *article.AddCommentRequest) (r *article.AddCommentResponse, err error) {
	var _args article.ArticleServiceAddCommentArgs
	_args.Req = req
	var _result article.ArticleServiceAddCommentResult
	if err = p.c.Call(ctx, "AddComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteArticle(ctx context.Context, req *article.DeleteArticleRequest) (r *article.DeleteArticleResponse, err error) {
	var _args article.ArticleServiceDeleteArticleArgs
	_args.Req = req
	var _result article.ArticleServiceDeleteArticleResult
	if err = p.c.Call(ctx, "DeleteArticle", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
