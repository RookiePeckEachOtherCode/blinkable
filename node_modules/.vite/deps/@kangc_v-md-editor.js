import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS
} from "./chunk-CF3WPAMV.js";

// ../../node_modules/@vue/shared/dist/shared.esm-bundler.js
function makeMap(str, expectsLowerCase) {
  const map2 = /* @__PURE__ */ Object.create(null);
  const list = str.split(",");
  for (let i = 0; i < list.length; i++) {
    map2[list[i]] = true;
  }
  return expectsLowerCase ? (val) => !!map2[val.toLowerCase()] : (val) => !!map2[val];
}
function normalizeStyle(value) {
  if (isArray(value)) {
    const res = {};
    for (let i = 0; i < value.length; i++) {
      const item = value[i];
      const normalized = isString(item) ? parseStringStyle(item) : normalizeStyle(item);
      if (normalized) {
        for (const key in normalized) {
          res[key] = normalized[key];
        }
      }
    }
    return res;
  } else if (isString(value)) {
    return value;
  } else if (isObject(value)) {
    return value;
  }
}
function parseStringStyle(cssText) {
  const ret = {};
  cssText.split(listDelimiterRE).forEach((item) => {
    if (item) {
      const tmp = item.split(propertyDelimiterRE);
      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return ret;
}
function normalizeClass(value) {
  let res = "";
  if (isString(value)) {
    res = value;
  } else if (isArray(value)) {
    for (let i = 0; i < value.length; i++) {
      const normalized = normalizeClass(value[i]);
      if (normalized) {
        res += normalized + " ";
      }
    }
  } else if (isObject(value)) {
    for (const name in value) {
      if (value[name]) {
        res += name + " ";
      }
    }
  }
  return res.trim();
}
function normalizeProps(props) {
  if (!props)
    return null;
  let { class: klass, style } = props;
  if (klass && !isString(klass)) {
    props.class = normalizeClass(klass);
  }
  if (style) {
    props.style = normalizeStyle(style);
  }
  return props;
}
function looseCompareArrays(a, b) {
  if (a.length !== b.length)
    return false;
  let equal = true;
  for (let i = 0; equal && i < a.length; i++) {
    equal = looseEqual(a[i], b[i]);
  }
  return equal;
}
function looseEqual(a, b) {
  if (a === b)
    return true;
  let aValidType = isDate(a);
  let bValidType = isDate(b);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? a.getTime() === b.getTime() : false;
  }
  aValidType = isArray(a);
  bValidType = isArray(b);
  if (aValidType || bValidType) {
    return aValidType && bValidType ? looseCompareArrays(a, b) : false;
  }
  aValidType = isObject(a);
  bValidType = isObject(b);
  if (aValidType || bValidType) {
    if (!aValidType || !bValidType) {
      return false;
    }
    const aKeysCount = Object.keys(a).length;
    const bKeysCount = Object.keys(b).length;
    if (aKeysCount !== bKeysCount) {
      return false;
    }
    for (const key in a) {
      const aHasKey = a.hasOwnProperty(key);
      const bHasKey = b.hasOwnProperty(key);
      if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) {
        return false;
      }
    }
  }
  return String(a) === String(b);
}
function looseIndexOf(arr, val) {
  return arr.findIndex((item) => looseEqual(item, val));
}
var GLOBALS_WHITE_LISTED, isGloballyWhitelisted, specialBooleanAttrs, isSpecialBooleanAttr, isBooleanAttr, isNoUnitNumericStyleProp, isKnownHtmlAttr, isKnownSvgAttr, listDelimiterRE, propertyDelimiterRE, HTML_TAGS, SVG_TAGS, VOID_TAGS, isHTMLTag, isSVGTag, isVoidTag, toDisplayString, replacer, EMPTY_OBJ, EMPTY_ARR, NOOP, NO, onRE, isOn, isModelListener, extend, remove, hasOwnProperty, hasOwn, isArray, isMap, isSet, isDate, isFunction, isString, isSymbol, isObject, isPromise, objectToString, toTypeString, toRawType, isPlainObject, isIntegerKey, isReservedProp, cacheStringFunction, camelizeRE, camelize, hyphenateRE, hyphenate, capitalize, toHandlerKey, hasChanged, invokeArrayFns, def, toNumber, _globalThis, getGlobalThis;
var init_shared_esm_bundler = __esm({
  "../../node_modules/@vue/shared/dist/shared.esm-bundler.js"() {
    GLOBALS_WHITE_LISTED = "Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt";
    isGloballyWhitelisted = makeMap(GLOBALS_WHITE_LISTED);
    specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;
    isSpecialBooleanAttr = makeMap(specialBooleanAttrs);
    isBooleanAttr = makeMap(specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`);
    isNoUnitNumericStyleProp = makeMap(`animation-iteration-count,border-image-outset,border-image-slice,border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,stroke-miterlimit,stroke-opacity,stroke-width`);
    isKnownHtmlAttr = makeMap(`accept,accept-charset,accesskey,action,align,allow,alt,async,autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,border,buffered,capture,challenge,charset,checked,cite,class,code,codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,formaction,formenctype,formmethod,formnovalidate,formtarget,headers,height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,start,step,style,summary,tabindex,target,title,translate,type,usemap,value,width,wrap`);
    isKnownSvgAttr = makeMap(`xmlns,accent-height,accumulate,additive,alignment-baseline,alphabetic,amplitude,arabic-form,ascent,attributeName,attributeType,azimuth,baseFrequency,baseline-shift,baseProfile,bbox,begin,bias,by,calcMode,cap-height,class,clip,clipPathUnits,clip-path,clip-rule,color,color-interpolation,color-interpolation-filters,color-profile,color-rendering,contentScriptType,contentStyleType,crossorigin,cursor,cx,cy,d,decelerate,descent,diffuseConstant,direction,display,divisor,dominant-baseline,dur,dx,dy,edgeMode,elevation,enable-background,end,exponent,fill,fill-opacity,fill-rule,filter,filterRes,filterUnits,flood-color,flood-opacity,font-family,font-size,font-size-adjust,font-stretch,font-style,font-variant,font-weight,format,from,fr,fx,fy,g1,g2,glyph-name,glyph-orientation-horizontal,glyph-orientation-vertical,glyphRef,gradientTransform,gradientUnits,hanging,height,href,hreflang,horiz-adv-x,horiz-origin-x,id,ideographic,image-rendering,in,in2,intercept,k,k1,k2,k3,k4,kernelMatrix,kernelUnitLength,kerning,keyPoints,keySplines,keyTimes,lang,lengthAdjust,letter-spacing,lighting-color,limitingConeAngle,local,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mask,maskContentUnits,maskUnits,mathematical,max,media,method,min,mode,name,numOctaves,offset,opacity,operator,order,orient,orientation,origin,overflow,overline-position,overline-thickness,panose-1,paint-order,path,pathLength,patternContentUnits,patternTransform,patternUnits,ping,pointer-events,points,pointsAtX,pointsAtY,pointsAtZ,preserveAlpha,preserveAspectRatio,primitiveUnits,r,radius,referrerPolicy,refX,refY,rel,rendering-intent,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,result,rotate,rx,ry,scale,seed,shape-rendering,slope,spacing,specularConstant,specularExponent,speed,spreadMethod,startOffset,stdDeviation,stemh,stemv,stitchTiles,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,string,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,style,surfaceScale,systemLanguage,tabindex,tableValues,target,targetX,targetY,text-anchor,text-decoration,text-rendering,textLength,to,transform,transform-origin,type,u1,u2,underline-position,underline-thickness,unicode,unicode-bidi,unicode-range,units-per-em,v-alphabetic,v-hanging,v-ideographic,v-mathematical,values,vector-effect,version,vert-adv-y,vert-origin-x,vert-origin-y,viewBox,viewTarget,visibility,width,widths,word-spacing,writing-mode,x,x-height,x1,x2,xChannelSelector,xlink:actuate,xlink:arcrole,xlink:href,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,y,y1,y2,yChannelSelector,z,zoomAndPan`);
    listDelimiterRE = /;(?![^(]*\))/g;
    propertyDelimiterRE = /:(.+)/;
    HTML_TAGS = "html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,summary,template,blockquote,iframe,tfoot";
    SVG_TAGS = "svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,text,textPath,title,tspan,unknown,use,view";
    VOID_TAGS = "area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr";
    isHTMLTag = makeMap(HTML_TAGS);
    isSVGTag = makeMap(SVG_TAGS);
    isVoidTag = makeMap(VOID_TAGS);
    toDisplayString = (val) => {
      return val == null ? "" : isArray(val) || isObject(val) && val.toString === objectToString ? JSON.stringify(val, replacer, 2) : String(val);
    };
    replacer = (_key, val) => {
      if (val && val.__v_isRef) {
        return replacer(_key, val.value);
      } else if (isMap(val)) {
        return {
          [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val2]) => {
            entries[`${key} =>`] = val2;
            return entries;
          }, {})
        };
      } else if (isSet(val)) {
        return {
          [`Set(${val.size})`]: [...val.values()]
        };
      } else if (isObject(val) && !isArray(val) && !isPlainObject(val)) {
        return String(val);
      }
      return val;
    };
    EMPTY_OBJ = true ? Object.freeze({}) : {};
    EMPTY_ARR = true ? Object.freeze([]) : [];
    NOOP = () => {
    };
    NO = () => false;
    onRE = /^on[^a-z]/;
    isOn = (key) => onRE.test(key);
    isModelListener = (key) => key.startsWith("onUpdate:");
    extend = Object.assign;
    remove = (arr, el) => {
      const i = arr.indexOf(el);
      if (i > -1) {
        arr.splice(i, 1);
      }
    };
    hasOwnProperty = Object.prototype.hasOwnProperty;
    hasOwn = (val, key) => hasOwnProperty.call(val, key);
    isArray = Array.isArray;
    isMap = (val) => toTypeString(val) === "[object Map]";
    isSet = (val) => toTypeString(val) === "[object Set]";
    isDate = (val) => val instanceof Date;
    isFunction = (val) => typeof val === "function";
    isString = (val) => typeof val === "string";
    isSymbol = (val) => typeof val === "symbol";
    isObject = (val) => val !== null && typeof val === "object";
    isPromise = (val) => {
      return isObject(val) && isFunction(val.then) && isFunction(val.catch);
    };
    objectToString = Object.prototype.toString;
    toTypeString = (value) => objectToString.call(value);
    toRawType = (value) => {
      return toTypeString(value).slice(8, -1);
    };
    isPlainObject = (val) => toTypeString(val) === "[object Object]";
    isIntegerKey = (key) => isString(key) && key !== "NaN" && key[0] !== "-" && "" + parseInt(key, 10) === key;
    isReservedProp = makeMap(
      // the leading comma is intentional so empty string "" is also included
      ",key,ref,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"
    );
    cacheStringFunction = (fn) => {
      const cache = /* @__PURE__ */ Object.create(null);
      return (str) => {
        const hit = cache[str];
        return hit || (cache[str] = fn(str));
      };
    };
    camelizeRE = /-(\w)/g;
    camelize = cacheStringFunction((str) => {
      return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : "");
    });
    hyphenateRE = /\B([A-Z])/g;
    hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, "-$1").toLowerCase());
    capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));
    toHandlerKey = cacheStringFunction((str) => str ? `on${capitalize(str)}` : ``);
    hasChanged = (value, oldValue) => !Object.is(value, oldValue);
    invokeArrayFns = (fns, arg) => {
      for (let i = 0; i < fns.length; i++) {
        fns[i](arg);
      }
    };
    def = (obj, key, value) => {
      Object.defineProperty(obj, key, {
        configurable: true,
        enumerable: false,
        value
      });
    };
    toNumber = (val) => {
      const n = parseFloat(val);
      return isNaN(n) ? val : n;
    };
    getGlobalThis = () => {
      return _globalThis || (_globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {});
    };
  }
});

// ../../node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js
function warn(msg, ...args) {
  console.warn(`[Vue warn] ${msg}`, ...args);
}
function effectScope(detached) {
  return new EffectScope(detached);
}
function recordEffectScope(effect2, scope) {
  scope = scope || activeEffectScope;
  if (scope && scope.active) {
    scope.effects.push(effect2);
  }
}
function getCurrentScope() {
  return activeEffectScope;
}
function onScopeDispose(fn) {
  if (activeEffectScope) {
    activeEffectScope.cleanups.push(fn);
  } else if (true) {
    warn(`onDispose() is called when there is no active effect scope  to be associated with.`);
  }
}
function cleanupEffect(effect2) {
  const { deps } = effect2;
  if (deps.length) {
    for (let i = 0; i < deps.length; i++) {
      deps[i].delete(effect2);
    }
    deps.length = 0;
  }
}
function effect(fn, options) {
  if (fn.effect) {
    fn = fn.effect.fn;
  }
  const _effect = new ReactiveEffect(fn);
  if (options) {
    extend(_effect, options);
    if (options.scope)
      recordEffectScope(_effect, options.scope);
  }
  if (!options || !options.lazy) {
    _effect.run();
  }
  const runner = _effect.run.bind(_effect);
  runner.effect = _effect;
  return runner;
}
function stop(runner) {
  runner.effect.stop();
}
function pauseTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = false;
}
function enableTracking() {
  trackStack.push(shouldTrack);
  shouldTrack = true;
}
function resetTracking() {
  const last = trackStack.pop();
  shouldTrack = last === void 0 ? true : last;
}
function track(target, type, key) {
  if (!isTracking()) {
    return;
  }
  let depsMap = targetMap.get(target);
  if (!depsMap) {
    targetMap.set(target, depsMap = /* @__PURE__ */ new Map());
  }
  let dep = depsMap.get(key);
  if (!dep) {
    depsMap.set(key, dep = createDep());
  }
  const eventInfo = true ? { effect: activeEffect, target, type, key } : void 0;
  trackEffects(dep, eventInfo);
}
function isTracking() {
  return shouldTrack && activeEffect !== void 0;
}
function trackEffects(dep, debuggerEventExtraInfo) {
  let shouldTrack2 = false;
  if (effectTrackDepth <= maxMarkerBits) {
    if (!newTracked(dep)) {
      dep.n |= trackOpBit;
      shouldTrack2 = !wasTracked(dep);
    }
  } else {
    shouldTrack2 = !dep.has(activeEffect);
  }
  if (shouldTrack2) {
    dep.add(activeEffect);
    activeEffect.deps.push(dep);
    if (activeEffect.onTrack) {
      activeEffect.onTrack(Object.assign({
        effect: activeEffect
      }, debuggerEventExtraInfo));
    }
  }
}
function trigger(target, type, key, newValue, oldValue, oldTarget) {
  const depsMap = targetMap.get(target);
  if (!depsMap) {
    return;
  }
  let deps = [];
  if (type === "clear") {
    deps = [...depsMap.values()];
  } else if (key === "length" && isArray(target)) {
    depsMap.forEach((dep, key2) => {
      if (key2 === "length" || key2 >= newValue) {
        deps.push(dep);
      }
    });
  } else {
    if (key !== void 0) {
      deps.push(depsMap.get(key));
    }
    switch (type) {
      case "add":
        if (!isArray(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if (isMap(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        } else if (isIntegerKey(key)) {
          deps.push(depsMap.get("length"));
        }
        break;
      case "delete":
        if (!isArray(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
          if (isMap(target)) {
            deps.push(depsMap.get(MAP_KEY_ITERATE_KEY));
          }
        }
        break;
      case "set":
        if (isMap(target)) {
          deps.push(depsMap.get(ITERATE_KEY));
        }
        break;
    }
  }
  const eventInfo = true ? { target, type, key, newValue, oldValue, oldTarget } : void 0;
  if (deps.length === 1) {
    if (deps[0]) {
      if (true) {
        triggerEffects(deps[0], eventInfo);
      } else {
        triggerEffects(deps[0]);
      }
    }
  } else {
    const effects = [];
    for (const dep of deps) {
      if (dep) {
        effects.push(...dep);
      }
    }
    if (true) {
      triggerEffects(createDep(effects), eventInfo);
    } else {
      triggerEffects(createDep(effects));
    }
  }
}
function triggerEffects(dep, debuggerEventExtraInfo) {
  for (const effect2 of isArray(dep) ? dep : [...dep]) {
    if (effect2 !== activeEffect || effect2.allowRecurse) {
      if (effect2.onTrigger) {
        effect2.onTrigger(extend({ effect: effect2 }, debuggerEventExtraInfo));
      }
      if (effect2.scheduler) {
        effect2.scheduler();
      } else {
        effect2.run();
      }
    }
  }
}
function createArrayInstrumentations() {
  const instrumentations = {};
  ["includes", "indexOf", "lastIndexOf"].forEach((key) => {
    instrumentations[key] = function(...args) {
      const arr = toRaw(this);
      for (let i = 0, l = this.length; i < l; i++) {
        track(arr, "get", i + "");
      }
      const res = arr[key](...args);
      if (res === -1 || res === false) {
        return arr[key](...args.map(toRaw));
      } else {
        return res;
      }
    };
  });
  ["push", "pop", "shift", "unshift", "splice"].forEach((key) => {
    instrumentations[key] = function(...args) {
      pauseTracking();
      const res = toRaw(this)[key].apply(this, args);
      resetTracking();
      return res;
    };
  });
  return instrumentations;
}
function createGetter(isReadonly2 = false, shallow = false) {
  return function get2(target, key, receiver) {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_raw" && receiver === (isReadonly2 ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) {
      return target;
    }
    const targetIsArray = isArray(target);
    if (!isReadonly2 && targetIsArray && hasOwn(arrayInstrumentations, key)) {
      return Reflect.get(arrayInstrumentations, key, receiver);
    }
    const res = Reflect.get(target, key, receiver);
    if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {
      return res;
    }
    if (!isReadonly2) {
      track(target, "get", key);
    }
    if (shallow) {
      return res;
    }
    if (isRef(res)) {
      const shouldUnwrap = !targetIsArray || !isIntegerKey(key);
      return shouldUnwrap ? res.value : res;
    }
    if (isObject(res)) {
      return isReadonly2 ? readonly(res) : reactive(res);
    }
    return res;
  };
}
function createSetter(shallow = false) {
  return function set2(target, key, value, receiver) {
    let oldValue = target[key];
    if (!shallow) {
      value = toRaw(value);
      oldValue = toRaw(oldValue);
      if (!isArray(target) && isRef(oldValue) && !isRef(value)) {
        oldValue.value = value;
        return true;
      }
    }
    const hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);
    const result = Reflect.set(target, key, value, receiver);
    if (target === toRaw(receiver)) {
      if (!hadKey) {
        trigger(target, "add", key, value);
      } else if (hasChanged(value, oldValue)) {
        trigger(target, "set", key, value, oldValue);
      }
    }
    return result;
  };
}
function deleteProperty(target, key) {
  const hadKey = hasOwn(target, key);
  const oldValue = target[key];
  const result = Reflect.deleteProperty(target, key);
  if (result && hadKey) {
    trigger(target, "delete", key, void 0, oldValue);
  }
  return result;
}
function has(target, key) {
  const result = Reflect.has(target, key);
  if (!isSymbol(key) || !builtInSymbols.has(key)) {
    track(target, "has", key);
  }
  return result;
}
function ownKeys(target) {
  track(target, "iterate", isArray(target) ? "length" : ITERATE_KEY);
  return Reflect.ownKeys(target);
}
function get$1(target, key, isReadonly2 = false, isShallow = false) {
  target = target[
    "__v_raw"
    /* RAW */
  ];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (key !== rawKey) {
    !isReadonly2 && track(rawTarget, "get", key);
  }
  !isReadonly2 && track(rawTarget, "get", rawKey);
  const { has: has2 } = getProto(rawTarget);
  const wrap = isShallow ? toShallow : isReadonly2 ? toReadonly : toReactive;
  if (has2.call(rawTarget, key)) {
    return wrap(target.get(key));
  } else if (has2.call(rawTarget, rawKey)) {
    return wrap(target.get(rawKey));
  } else if (target !== rawTarget) {
    target.get(key);
  }
}
function has$1(key, isReadonly2 = false) {
  const target = this[
    "__v_raw"
    /* RAW */
  ];
  const rawTarget = toRaw(target);
  const rawKey = toRaw(key);
  if (key !== rawKey) {
    !isReadonly2 && track(rawTarget, "has", key);
  }
  !isReadonly2 && track(rawTarget, "has", rawKey);
  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);
}
function size(target, isReadonly2 = false) {
  target = target[
    "__v_raw"
    /* RAW */
  ];
  !isReadonly2 && track(toRaw(target), "iterate", ITERATE_KEY);
  return Reflect.get(target, "size", target);
}
function add(value) {
  value = toRaw(value);
  const target = toRaw(this);
  const proto = getProto(target);
  const hadKey = proto.has.call(target, value);
  if (!hadKey) {
    target.add(value);
    trigger(target, "add", value, value);
  }
  return this;
}
function set$1(key, value) {
  value = toRaw(value);
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  } else if (true) {
    checkIdentityKeys(target, has2, key);
  }
  const oldValue = get2.call(target, key);
  target.set(key, value);
  if (!hadKey) {
    trigger(target, "add", key, value);
  } else if (hasChanged(value, oldValue)) {
    trigger(target, "set", key, value, oldValue);
  }
  return this;
}
function deleteEntry(key) {
  const target = toRaw(this);
  const { has: has2, get: get2 } = getProto(target);
  let hadKey = has2.call(target, key);
  if (!hadKey) {
    key = toRaw(key);
    hadKey = has2.call(target, key);
  } else if (true) {
    checkIdentityKeys(target, has2, key);
  }
  const oldValue = get2 ? get2.call(target, key) : void 0;
  const result = target.delete(key);
  if (hadKey) {
    trigger(target, "delete", key, void 0, oldValue);
  }
  return result;
}
function clear() {
  const target = toRaw(this);
  const hadItems = target.size !== 0;
  const oldTarget = true ? isMap(target) ? new Map(target) : new Set(target) : void 0;
  const result = target.clear();
  if (hadItems) {
    trigger(target, "clear", void 0, void 0, oldTarget);
  }
  return result;
}
function createForEach(isReadonly2, isShallow) {
  return function forEach(callback, thisArg) {
    const observed = this;
    const target = observed[
      "__v_raw"
      /* RAW */
    ];
    const rawTarget = toRaw(target);
    const wrap = isShallow ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(rawTarget, "iterate", ITERATE_KEY);
    return target.forEach((value, key) => {
      return callback.call(thisArg, wrap(value), wrap(key), observed);
    });
  };
}
function createIterableMethod(method, isReadonly2, isShallow) {
  return function(...args) {
    const target = this[
      "__v_raw"
      /* RAW */
    ];
    const rawTarget = toRaw(target);
    const targetIsMap = isMap(rawTarget);
    const isPair = method === "entries" || method === Symbol.iterator && targetIsMap;
    const isKeyOnly = method === "keys" && targetIsMap;
    const innerIterator = target[method](...args);
    const wrap = isShallow ? toShallow : isReadonly2 ? toReadonly : toReactive;
    !isReadonly2 && track(rawTarget, "iterate", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);
    return {
      // iterator protocol
      next() {
        const { value, done } = innerIterator.next();
        return done ? { value, done } : {
          value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),
          done
        };
      },
      // iterable protocol
      [Symbol.iterator]() {
        return this;
      }
    };
  };
}
function createReadonlyMethod(type) {
  return function(...args) {
    if (true) {
      const key = args[0] ? `on key "${args[0]}" ` : ``;
      console.warn(`${capitalize(type)} operation ${key}failed: target is readonly.`, toRaw(this));
    }
    return type === "delete" ? false : this;
  };
}
function createInstrumentations() {
  const mutableInstrumentations2 = {
    get(key) {
      return get$1(this, key);
    },
    get size() {
      return size(this);
    },
    has: has$1,
    add,
    set: set$1,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, false)
  };
  const shallowInstrumentations2 = {
    get(key) {
      return get$1(this, key, false, true);
    },
    get size() {
      return size(this);
    },
    has: has$1,
    add,
    set: set$1,
    delete: deleteEntry,
    clear,
    forEach: createForEach(false, true)
  };
  const readonlyInstrumentations2 = {
    get(key) {
      return get$1(this, key, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has$1.call(this, key, true);
    },
    add: createReadonlyMethod(
      "add"
      /* ADD */
    ),
    set: createReadonlyMethod(
      "set"
      /* SET */
    ),
    delete: createReadonlyMethod(
      "delete"
      /* DELETE */
    ),
    clear: createReadonlyMethod(
      "clear"
      /* CLEAR */
    ),
    forEach: createForEach(true, false)
  };
  const shallowReadonlyInstrumentations2 = {
    get(key) {
      return get$1(this, key, true, true);
    },
    get size() {
      return size(this, true);
    },
    has(key) {
      return has$1.call(this, key, true);
    },
    add: createReadonlyMethod(
      "add"
      /* ADD */
    ),
    set: createReadonlyMethod(
      "set"
      /* SET */
    ),
    delete: createReadonlyMethod(
      "delete"
      /* DELETE */
    ),
    clear: createReadonlyMethod(
      "clear"
      /* CLEAR */
    ),
    forEach: createForEach(true, true)
  };
  const iteratorMethods = ["keys", "values", "entries", Symbol.iterator];
  iteratorMethods.forEach((method) => {
    mutableInstrumentations2[method] = createIterableMethod(method, false, false);
    readonlyInstrumentations2[method] = createIterableMethod(method, true, false);
    shallowInstrumentations2[method] = createIterableMethod(method, false, true);
    shallowReadonlyInstrumentations2[method] = createIterableMethod(method, true, true);
  });
  return [
    mutableInstrumentations2,
    readonlyInstrumentations2,
    shallowInstrumentations2,
    shallowReadonlyInstrumentations2
  ];
}
function createInstrumentationGetter(isReadonly2, shallow) {
  const instrumentations = shallow ? isReadonly2 ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly2 ? readonlyInstrumentations : mutableInstrumentations;
  return (target, key, receiver) => {
    if (key === "__v_isReactive") {
      return !isReadonly2;
    } else if (key === "__v_isReadonly") {
      return isReadonly2;
    } else if (key === "__v_raw") {
      return target;
    }
    return Reflect.get(hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver);
  };
}
function checkIdentityKeys(target, has2, key) {
  const rawKey = toRaw(key);
  if (rawKey !== key && has2.call(target, rawKey)) {
    const type = toRawType(target);
    console.warn(`Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`);
  }
}
function targetTypeMap(rawType) {
  switch (rawType) {
    case "Object":
    case "Array":
      return 1;
    case "Map":
    case "Set":
    case "WeakMap":
    case "WeakSet":
      return 2;
    default:
      return 0;
  }
}
function getTargetType(value) {
  return value[
    "__v_skip"
    /* SKIP */
  ] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));
}
function reactive(target) {
  if (target && target[
    "__v_isReadonly"
    /* IS_READONLY */
  ]) {
    return target;
  }
  return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);
}
function shallowReactive(target) {
  return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers, shallowReactiveMap);
}
function readonly(target) {
  return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);
}
function shallowReadonly(target) {
  return createReactiveObject(target, true, shallowReadonlyHandlers, shallowReadonlyCollectionHandlers, shallowReadonlyMap);
}
function createReactiveObject(target, isReadonly2, baseHandlers, collectionHandlers, proxyMap) {
  if (!isObject(target)) {
    if (true) {
      console.warn(`value cannot be made reactive: ${String(target)}`);
    }
    return target;
  }
  if (target[
    "__v_raw"
    /* RAW */
  ] && !(isReadonly2 && target[
    "__v_isReactive"
    /* IS_REACTIVE */
  ])) {
    return target;
  }
  const existingProxy = proxyMap.get(target);
  if (existingProxy) {
    return existingProxy;
  }
  const targetType = getTargetType(target);
  if (targetType === 0) {
    return target;
  }
  const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);
  proxyMap.set(target, proxy);
  return proxy;
}
function isReactive(value) {
  if (isReadonly(value)) {
    return isReactive(value[
      "__v_raw"
      /* RAW */
    ]);
  }
  return !!(value && value[
    "__v_isReactive"
    /* IS_REACTIVE */
  ]);
}
function isReadonly(value) {
  return !!(value && value[
    "__v_isReadonly"
    /* IS_READONLY */
  ]);
}
function isProxy(value) {
  return isReactive(value) || isReadonly(value);
}
function toRaw(observed) {
  const raw = observed && observed[
    "__v_raw"
    /* RAW */
  ];
  return raw ? toRaw(raw) : observed;
}
function markRaw(value) {
  def(value, "__v_skip", true);
  return value;
}
function trackRefValue(ref2) {
  if (isTracking()) {
    ref2 = toRaw(ref2);
    if (!ref2.dep) {
      ref2.dep = createDep();
    }
    if (true) {
      trackEffects(ref2.dep, {
        target: ref2,
        type: "get",
        key: "value"
      });
    } else {
      trackEffects(ref2.dep);
    }
  }
}
function triggerRefValue(ref2, newVal) {
  ref2 = toRaw(ref2);
  if (ref2.dep) {
    if (true) {
      triggerEffects(ref2.dep, {
        target: ref2,
        type: "set",
        key: "value",
        newValue: newVal
      });
    } else {
      triggerEffects(ref2.dep);
    }
  }
}
function isRef(r) {
  return Boolean(r && r.__v_isRef === true);
}
function ref(value) {
  return createRef(value);
}
function shallowRef(value) {
  return createRef(value, true);
}
function createRef(rawValue, shallow = false) {
  if (isRef(rawValue)) {
    return rawValue;
  }
  return new RefImpl(rawValue, shallow);
}
function triggerRef(ref2) {
  triggerRefValue(ref2, true ? ref2.value : void 0);
}
function unref(ref2) {
  return isRef(ref2) ? ref2.value : ref2;
}
function proxyRefs(objectWithRefs) {
  return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);
}
function customRef(factory) {
  return new CustomRefImpl(factory);
}
function toRefs(object) {
  if (!isProxy(object)) {
    console.warn(`toRefs() expects a reactive object but received a plain one.`);
  }
  const ret = isArray(object) ? new Array(object.length) : {};
  for (const key in object) {
    ret[key] = toRef(object, key);
  }
  return ret;
}
function toRef(object, key) {
  return isRef(object[key]) ? object[key] : new ObjectRefImpl(object, key);
}
function computed(getterOrOptions, debugOptions) {
  let getter;
  let setter;
  if (isFunction(getterOrOptions)) {
    getter = getterOrOptions;
    setter = true ? () => {
      console.warn("Write operation failed: computed value is readonly");
    } : NOOP;
  } else {
    getter = getterOrOptions.get;
    setter = getterOrOptions.set;
  }
  const cRef = new ComputedRefImpl(getter, setter, isFunction(getterOrOptions) || !getterOrOptions.set);
  if (debugOptions) {
    cRef.effect.onTrack = debugOptions.onTrack;
    cRef.effect.onTrigger = debugOptions.onTrigger;
  }
  return cRef;
}
var activeEffectScope, effectScopeStack, EffectScope, createDep, wasTracked, newTracked, initDepMarkers, finalizeDepMarkers, targetMap, effectTrackDepth, trackOpBit, maxMarkerBits, effectStack, activeEffect, ITERATE_KEY, MAP_KEY_ITERATE_KEY, ReactiveEffect, shouldTrack, trackStack, isNonTrackableKeys, builtInSymbols, get, shallowGet, readonlyGet, shallowReadonlyGet, arrayInstrumentations, set, shallowSet, mutableHandlers, readonlyHandlers, shallowReactiveHandlers, shallowReadonlyHandlers, toReactive, toReadonly, toShallow, getProto, mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations, mutableCollectionHandlers, shallowCollectionHandlers, readonlyCollectionHandlers, shallowReadonlyCollectionHandlers, reactiveMap, shallowReactiveMap, readonlyMap, shallowReadonlyMap, convert, RefImpl, shallowUnwrapHandlers, CustomRefImpl, ObjectRefImpl, ComputedRefImpl, _a, tick;
var init_reactivity_esm_bundler = __esm({
  "../../node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js"() {
    init_shared_esm_bundler();
    effectScopeStack = [];
    EffectScope = class {
      constructor(detached = false) {
        this.active = true;
        this.effects = [];
        this.cleanups = [];
        if (!detached && activeEffectScope) {
          this.parent = activeEffectScope;
          this.index = (activeEffectScope.scopes || (activeEffectScope.scopes = [])).push(this) - 1;
        }
      }
      run(fn) {
        if (this.active) {
          try {
            this.on();
            return fn();
          } finally {
            this.off();
          }
        } else if (true) {
          warn(`cannot run an inactive effect scope.`);
        }
      }
      on() {
        if (this.active) {
          effectScopeStack.push(this);
          activeEffectScope = this;
        }
      }
      off() {
        if (this.active) {
          effectScopeStack.pop();
          activeEffectScope = effectScopeStack[effectScopeStack.length - 1];
        }
      }
      stop(fromParent) {
        if (this.active) {
          this.effects.forEach((e) => e.stop());
          this.cleanups.forEach((cleanup) => cleanup());
          if (this.scopes) {
            this.scopes.forEach((e) => e.stop(true));
          }
          if (this.parent && !fromParent) {
            const last = this.parent.scopes.pop();
            if (last && last !== this) {
              this.parent.scopes[this.index] = last;
              last.index = this.index;
            }
          }
          this.active = false;
        }
      }
    };
    createDep = (effects) => {
      const dep = new Set(effects);
      dep.w = 0;
      dep.n = 0;
      return dep;
    };
    wasTracked = (dep) => (dep.w & trackOpBit) > 0;
    newTracked = (dep) => (dep.n & trackOpBit) > 0;
    initDepMarkers = ({ deps }) => {
      if (deps.length) {
        for (let i = 0; i < deps.length; i++) {
          deps[i].w |= trackOpBit;
        }
      }
    };
    finalizeDepMarkers = (effect2) => {
      const { deps } = effect2;
      if (deps.length) {
        let ptr = 0;
        for (let i = 0; i < deps.length; i++) {
          const dep = deps[i];
          if (wasTracked(dep) && !newTracked(dep)) {
            dep.delete(effect2);
          } else {
            deps[ptr++] = dep;
          }
          dep.w &= ~trackOpBit;
          dep.n &= ~trackOpBit;
        }
        deps.length = ptr;
      }
    };
    targetMap = /* @__PURE__ */ new WeakMap();
    effectTrackDepth = 0;
    trackOpBit = 1;
    maxMarkerBits = 30;
    effectStack = [];
    ITERATE_KEY = Symbol(true ? "iterate" : "");
    MAP_KEY_ITERATE_KEY = Symbol(true ? "Map key iterate" : "");
    ReactiveEffect = class {
      constructor(fn, scheduler = null, scope) {
        this.fn = fn;
        this.scheduler = scheduler;
        this.active = true;
        this.deps = [];
        recordEffectScope(this, scope);
      }
      run() {
        if (!this.active) {
          return this.fn();
        }
        if (!effectStack.includes(this)) {
          try {
            effectStack.push(activeEffect = this);
            enableTracking();
            trackOpBit = 1 << ++effectTrackDepth;
            if (effectTrackDepth <= maxMarkerBits) {
              initDepMarkers(this);
            } else {
              cleanupEffect(this);
            }
            return this.fn();
          } finally {
            if (effectTrackDepth <= maxMarkerBits) {
              finalizeDepMarkers(this);
            }
            trackOpBit = 1 << --effectTrackDepth;
            resetTracking();
            effectStack.pop();
            const n = effectStack.length;
            activeEffect = n > 0 ? effectStack[n - 1] : void 0;
          }
        }
      }
      stop() {
        if (this.active) {
          cleanupEffect(this);
          if (this.onStop) {
            this.onStop();
          }
          this.active = false;
        }
      }
    };
    shouldTrack = true;
    trackStack = [];
    isNonTrackableKeys = makeMap(`__proto__,__v_isRef,__isVue`);
    builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol).map((key) => Symbol[key]).filter(isSymbol));
    get = createGetter();
    shallowGet = createGetter(false, true);
    readonlyGet = createGetter(true);
    shallowReadonlyGet = createGetter(true, true);
    arrayInstrumentations = createArrayInstrumentations();
    set = createSetter();
    shallowSet = createSetter(true);
    mutableHandlers = {
      get,
      set,
      deleteProperty,
      has,
      ownKeys
    };
    readonlyHandlers = {
      get: readonlyGet,
      set(target, key) {
        if (true) {
          console.warn(`Set operation on key "${String(key)}" failed: target is readonly.`, target);
        }
        return true;
      },
      deleteProperty(target, key) {
        if (true) {
          console.warn(`Delete operation on key "${String(key)}" failed: target is readonly.`, target);
        }
        return true;
      }
    };
    shallowReactiveHandlers = extend({}, mutableHandlers, {
      get: shallowGet,
      set: shallowSet
    });
    shallowReadonlyHandlers = extend({}, readonlyHandlers, {
      get: shallowReadonlyGet
    });
    toReactive = (value) => isObject(value) ? reactive(value) : value;
    toReadonly = (value) => isObject(value) ? readonly(value) : value;
    toShallow = (value) => value;
    getProto = (v) => Reflect.getPrototypeOf(v);
    [mutableInstrumentations, readonlyInstrumentations, shallowInstrumentations, shallowReadonlyInstrumentations] = createInstrumentations();
    mutableCollectionHandlers = {
      get: createInstrumentationGetter(false, false)
    };
    shallowCollectionHandlers = {
      get: createInstrumentationGetter(false, true)
    };
    readonlyCollectionHandlers = {
      get: createInstrumentationGetter(true, false)
    };
    shallowReadonlyCollectionHandlers = {
      get: createInstrumentationGetter(true, true)
    };
    reactiveMap = /* @__PURE__ */ new WeakMap();
    shallowReactiveMap = /* @__PURE__ */ new WeakMap();
    readonlyMap = /* @__PURE__ */ new WeakMap();
    shallowReadonlyMap = /* @__PURE__ */ new WeakMap();
    convert = (val) => isObject(val) ? reactive(val) : val;
    RefImpl = class {
      constructor(value, _shallow = false) {
        this._shallow = _shallow;
        this.dep = void 0;
        this.__v_isRef = true;
        this._rawValue = _shallow ? value : toRaw(value);
        this._value = _shallow ? value : convert(value);
      }
      get value() {
        trackRefValue(this);
        return this._value;
      }
      set value(newVal) {
        newVal = this._shallow ? newVal : toRaw(newVal);
        if (hasChanged(newVal, this._rawValue)) {
          this._rawValue = newVal;
          this._value = this._shallow ? newVal : convert(newVal);
          triggerRefValue(this, newVal);
        }
      }
    };
    shallowUnwrapHandlers = {
      get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),
      set: (target, key, value, receiver) => {
        const oldValue = target[key];
        if (isRef(oldValue) && !isRef(value)) {
          oldValue.value = value;
          return true;
        } else {
          return Reflect.set(target, key, value, receiver);
        }
      }
    };
    CustomRefImpl = class {
      constructor(factory) {
        this.dep = void 0;
        this.__v_isRef = true;
        const { get: get2, set: set2 } = factory(() => trackRefValue(this), () => triggerRefValue(this));
        this._get = get2;
        this._set = set2;
      }
      get value() {
        return this._get();
      }
      set value(newVal) {
        this._set(newVal);
      }
    };
    ObjectRefImpl = class {
      constructor(_object, _key) {
        this._object = _object;
        this._key = _key;
        this.__v_isRef = true;
      }
      get value() {
        return this._object[this._key];
      }
      set value(newVal) {
        this._object[this._key] = newVal;
      }
    };
    ComputedRefImpl = class {
      constructor(getter, _setter, isReadonly2) {
        this._setter = _setter;
        this.dep = void 0;
        this._dirty = true;
        this.__v_isRef = true;
        this.effect = new ReactiveEffect(getter, () => {
          if (!this._dirty) {
            this._dirty = true;
            triggerRefValue(this);
          }
        });
        this[
          "__v_isReadonly"
          /* IS_READONLY */
        ] = isReadonly2;
      }
      get value() {
        const self2 = toRaw(this);
        trackRefValue(self2);
        if (self2._dirty) {
          self2._dirty = false;
          self2._value = self2.effect.run();
        }
        return self2._value;
      }
      set value(newValue) {
        this._setter(newValue);
      }
    };
    tick = Promise.resolve();
    _a = "__v_isReadonly";
  }
});

// ../../node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js
function registerHMR(instance) {
  const id = instance.type.__hmrId;
  let record = map.get(id);
  if (!record) {
    createRecord(id, instance.type);
    record = map.get(id);
  }
  record.instances.add(instance);
}
function unregisterHMR(instance) {
  map.get(instance.type.__hmrId).instances.delete(instance);
}
function createRecord(id, component) {
  if (!component) {
    warn2(`HMR API usage is out of date.
Please upgrade vue-loader/vite/rollup-plugin-vue or other relevant dependency that handles Vue SFC compilation.`);
    component = {};
  }
  if (map.has(id)) {
    return false;
  }
  map.set(id, {
    component: isClassComponent(component) ? component.__vccOpts : component,
    instances: /* @__PURE__ */ new Set()
  });
  return true;
}
function rerender(id, newRender) {
  const record = map.get(id);
  if (!record)
    return;
  if (newRender)
    record.component.render = newRender;
  Array.from(record.instances).forEach((instance) => {
    if (newRender) {
      instance.render = newRender;
    }
    instance.renderCache = [];
    isHmrUpdating = true;
    instance.update();
    isHmrUpdating = false;
  });
}
function reload(id, newComp) {
  const record = map.get(id);
  if (!record)
    return;
  const { component, instances } = record;
  if (!hmrDirtyComponents.has(component)) {
    newComp = isClassComponent(newComp) ? newComp.__vccOpts : newComp;
    extend(component, newComp);
    for (const key in component) {
      if (key !== "__file" && !(key in newComp)) {
        delete component[key];
      }
    }
    hmrDirtyComponents.add(component);
    queuePostFlushCb(() => {
      hmrDirtyComponents.delete(component);
    });
  }
  Array.from(instances).forEach((instance) => {
    instance.appContext.optionsCache.delete(instance.type);
    if (instance.ceReload) {
      hmrDirtyComponents.add(component);
      instance.ceReload(newComp.styles);
      hmrDirtyComponents.delete(component);
    } else if (instance.parent) {
      queueJob(instance.parent.update);
      if (instance.parent.type.__asyncLoader && instance.parent.ceReload) {
        instance.parent.ceReload(newComp.styles);
      }
    } else if (instance.appContext.reload) {
      instance.appContext.reload();
    } else if (typeof window !== "undefined") {
      window.location.reload();
    } else {
      console.warn("[HMR] Root or manually mounted instance modified. Full reload required.");
    }
  });
}
function tryWrap(fn) {
  return (id, arg) => {
    try {
      return fn(id, arg);
    } catch (e) {
      console.error(e);
      console.warn(`[HMR] Something went wrong during Vue component hot-reload. Full reload required.`);
    }
  };
}
function setDevtoolsHook(hook) {
  devtools = hook;
}
function devtoolsInitApp(app, version2) {
  if (!devtools)
    return;
  devtools.emit("app:init", app, version2, {
    Fragment,
    Text,
    Comment: Comment$1,
    Static
  });
}
function devtoolsUnmountApp(app) {
  if (!devtools)
    return;
  devtools.emit("app:unmount", app);
}
function createDevtoolsComponentHook(hook) {
  return (component) => {
    if (!devtools)
      return;
    devtools.emit(hook, component.appContext.app, component.uid, component.parent ? component.parent.uid : void 0, component);
  };
}
function createDevtoolsPerformanceHook(hook) {
  return (component, type, time) => {
    if (!devtools)
      return;
    devtools.emit(hook, component.appContext.app, component.uid, component, type, time);
  };
}
function devtoolsComponentEmit(component, event, params) {
  if (!devtools)
    return;
  devtools.emit("component:emit", component.appContext.app, component, event, params);
}
function emit(instance, event, ...rawArgs) {
  const props = instance.vnode.props || EMPTY_OBJ;
  if (true) {
    const { emitsOptions, propsOptions: [propsOptions] } = instance;
    if (emitsOptions) {
      if (!(event in emitsOptions) && true) {
        if (!propsOptions || !(toHandlerKey(event) in propsOptions)) {
          warn2(`Component emitted event "${event}" but it is neither declared in the emits option nor as an "${toHandlerKey(event)}" prop.`);
        }
      } else {
        const validator = emitsOptions[event];
        if (isFunction(validator)) {
          const isValid = validator(...rawArgs);
          if (!isValid) {
            warn2(`Invalid event arguments: event validation failed for event "${event}".`);
          }
        }
      }
    }
  }
  let args = rawArgs;
  const isModelListener2 = event.startsWith("update:");
  const modelArg = isModelListener2 && event.slice(7);
  if (modelArg && modelArg in props) {
    const modifiersKey = `${modelArg === "modelValue" ? "model" : modelArg}Modifiers`;
    const { number, trim } = props[modifiersKey] || EMPTY_OBJ;
    if (trim) {
      args = rawArgs.map((a) => a.trim());
    } else if (number) {
      args = rawArgs.map(toNumber);
    }
  }
  if (true) {
    devtoolsComponentEmit(instance, event, args);
  }
  if (true) {
    const lowerCaseEvent = event.toLowerCase();
    if (lowerCaseEvent !== event && props[toHandlerKey(lowerCaseEvent)]) {
      warn2(`Event "${lowerCaseEvent}" is emitted in component ${formatComponentName(instance, instance.type)} but the handler is registered for "${event}". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "${hyphenate(event)}" instead of "${event}".`);
    }
  }
  let handlerName;
  let handler = props[handlerName = toHandlerKey(event)] || // also try camelCase event handler (#2249)
  props[handlerName = toHandlerKey(camelize(event))];
  if (!handler && isModelListener2) {
    handler = props[handlerName = toHandlerKey(hyphenate(event))];
  }
  if (handler) {
    callWithAsyncErrorHandling(handler, instance, 6, args);
  }
  const onceHandler = props[handlerName + `Once`];
  if (onceHandler) {
    if (!instance.emitted) {
      instance.emitted = {};
    } else if (instance.emitted[handlerName]) {
      return;
    }
    instance.emitted[handlerName] = true;
    callWithAsyncErrorHandling(onceHandler, instance, 6, args);
  }
}
function normalizeEmitsOptions(comp, appContext, asMixin = false) {
  const cache = appContext.emitsCache;
  const cached = cache.get(comp);
  if (cached !== void 0) {
    return cached;
  }
  const raw = comp.emits;
  let normalized = {};
  let hasExtends = false;
  if (__VUE_OPTIONS_API__ && !isFunction(comp)) {
    const extendEmits = (raw2) => {
      const normalizedFromExtend = normalizeEmitsOptions(raw2, appContext, true);
      if (normalizedFromExtend) {
        hasExtends = true;
        extend(normalized, normalizedFromExtend);
      }
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendEmits);
    }
    if (comp.extends) {
      extendEmits(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendEmits);
    }
  }
  if (!raw && !hasExtends) {
    cache.set(comp, null);
    return null;
  }
  if (isArray(raw)) {
    raw.forEach((key) => normalized[key] = null);
  } else {
    extend(normalized, raw);
  }
  cache.set(comp, normalized);
  return normalized;
}
function isEmitListener(options, key) {
  if (!options || !isOn(key)) {
    return false;
  }
  key = key.slice(2).replace(/Once$/, "");
  return hasOwn(options, key[0].toLowerCase() + key.slice(1)) || hasOwn(options, hyphenate(key)) || hasOwn(options, key);
}
function setCurrentRenderingInstance(instance) {
  const prev = currentRenderingInstance;
  currentRenderingInstance = instance;
  currentScopeId = instance && instance.type.__scopeId || null;
  return prev;
}
function pushScopeId(id) {
  currentScopeId = id;
}
function popScopeId() {
  currentScopeId = null;
}
function withCtx(fn, ctx = currentRenderingInstance, isNonScopedSlot) {
  if (!ctx)
    return fn;
  if (fn._n) {
    return fn;
  }
  const renderFnWithContext = (...args) => {
    if (renderFnWithContext._d) {
      setBlockTracking(-1);
    }
    const prevInstance = setCurrentRenderingInstance(ctx);
    const res = fn(...args);
    setCurrentRenderingInstance(prevInstance);
    if (renderFnWithContext._d) {
      setBlockTracking(1);
    }
    if (true) {
      devtoolsComponentUpdated(ctx);
    }
    return res;
  };
  renderFnWithContext._n = true;
  renderFnWithContext._c = true;
  renderFnWithContext._d = true;
  return renderFnWithContext;
}
function markAttrsAccessed() {
  accessedAttrs = true;
}
function renderComponentRoot(instance) {
  const { type: Component, vnode, proxy, withProxy, props, propsOptions: [propsOptions], slots, attrs, emit: emit2, render: render2, renderCache, data, setupState, ctx, inheritAttrs } = instance;
  let result;
  const prev = setCurrentRenderingInstance(instance);
  if (true) {
    accessedAttrs = false;
  }
  try {
    let fallthroughAttrs;
    if (vnode.shapeFlag & 4) {
      const proxyToUse = withProxy || proxy;
      result = normalizeVNode(render2.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));
      fallthroughAttrs = attrs;
    } else {
      const render3 = Component;
      if (attrs === props) {
        markAttrsAccessed();
      }
      result = normalizeVNode(render3.length > 1 ? render3(props, true ? {
        get attrs() {
          markAttrsAccessed();
          return attrs;
        },
        slots,
        emit: emit2
      } : { attrs, slots, emit: emit2 }) : render3(
        props,
        null
        /* we know it doesn't need it */
      ));
      fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);
    }
    let root = result;
    let setRoot = void 0;
    if (result.patchFlag > 0 && result.patchFlag & 2048) {
      ;
      [root, setRoot] = getChildRoot(result);
    }
    if (fallthroughAttrs && inheritAttrs !== false) {
      const keys = Object.keys(fallthroughAttrs);
      const { shapeFlag } = root;
      if (keys.length) {
        if (shapeFlag & 1 || shapeFlag & 6) {
          if (propsOptions && keys.some(isModelListener)) {
            fallthroughAttrs = filterModelListeners(fallthroughAttrs, propsOptions);
          }
          root = cloneVNode(root, fallthroughAttrs);
        } else if (!accessedAttrs && root.type !== Comment$1) {
          const allAttrs = Object.keys(attrs);
          const eventAttrs = [];
          const extraAttrs = [];
          for (let i = 0, l = allAttrs.length; i < l; i++) {
            const key = allAttrs[i];
            if (isOn(key)) {
              if (!isModelListener(key)) {
                eventAttrs.push(key[2].toLowerCase() + key.slice(3));
              }
            } else {
              extraAttrs.push(key);
            }
          }
          if (extraAttrs.length) {
            warn2(`Extraneous non-props attributes (${extraAttrs.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes.`);
          }
          if (eventAttrs.length) {
            warn2(`Extraneous non-emits event listeners (${eventAttrs.join(", ")}) were passed to component but could not be automatically inherited because component renders fragment or text root nodes. If the listener is intended to be a component custom event listener only, declare it using the "emits" option.`);
          }
        }
      }
    }
    if (false)
      ;
    if (vnode.dirs) {
      if (!isElementRoot(root)) {
        warn2(`Runtime directive used on component with non-element root node. The directives will not function as intended.`);
      }
      root.dirs = root.dirs ? root.dirs.concat(vnode.dirs) : vnode.dirs;
    }
    if (vnode.transition) {
      if (!isElementRoot(root)) {
        warn2(`Component inside <Transition> renders non-element root node that cannot be animated.`);
      }
      root.transition = vnode.transition;
    }
    if (setRoot) {
      setRoot(root);
    } else {
      result = root;
    }
  } catch (err) {
    blockStack.length = 0;
    handleError(
      err,
      instance,
      1
      /* RENDER_FUNCTION */
    );
    result = createVNode(Comment$1);
  }
  setCurrentRenderingInstance(prev);
  return result;
}
function filterSingleRoot(children) {
  let singleRoot;
  for (let i = 0; i < children.length; i++) {
    const child = children[i];
    if (isVNode(child)) {
      if (child.type !== Comment$1 || child.children === "v-if") {
        if (singleRoot) {
          return;
        } else {
          singleRoot = child;
        }
      }
    } else {
      return;
    }
  }
  return singleRoot;
}
function shouldUpdateComponent(prevVNode, nextVNode, optimized) {
  const { props: prevProps, children: prevChildren, component } = prevVNode;
  const { props: nextProps, children: nextChildren, patchFlag } = nextVNode;
  const emits = component.emitsOptions;
  if ((prevChildren || nextChildren) && isHmrUpdating) {
    return true;
  }
  if (nextVNode.dirs || nextVNode.transition) {
    return true;
  }
  if (optimized && patchFlag >= 0) {
    if (patchFlag & 1024) {
      return true;
    }
    if (patchFlag & 16) {
      if (!prevProps) {
        return !!nextProps;
      }
      return hasPropsChanged(prevProps, nextProps, emits);
    } else if (patchFlag & 8) {
      const dynamicProps = nextVNode.dynamicProps;
      for (let i = 0; i < dynamicProps.length; i++) {
        const key = dynamicProps[i];
        if (nextProps[key] !== prevProps[key] && !isEmitListener(emits, key)) {
          return true;
        }
      }
    }
  } else {
    if (prevChildren || nextChildren) {
      if (!nextChildren || !nextChildren.$stable) {
        return true;
      }
    }
    if (prevProps === nextProps) {
      return false;
    }
    if (!prevProps) {
      return !!nextProps;
    }
    if (!nextProps) {
      return true;
    }
    return hasPropsChanged(prevProps, nextProps, emits);
  }
  return false;
}
function hasPropsChanged(prevProps, nextProps, emitsOptions) {
  const nextKeys = Object.keys(nextProps);
  if (nextKeys.length !== Object.keys(prevProps).length) {
    return true;
  }
  for (let i = 0; i < nextKeys.length; i++) {
    const key = nextKeys[i];
    if (nextProps[key] !== prevProps[key] && !isEmitListener(emitsOptions, key)) {
      return true;
    }
  }
  return false;
}
function updateHOCHostEl({ vnode, parent }, el) {
  while (parent && parent.subTree === vnode) {
    (vnode = parent.vnode).el = el;
    parent = parent.parent;
  }
}
function triggerEvent(vnode, name) {
  const eventListener = vnode.props && vnode.props[name];
  if (isFunction(eventListener)) {
    eventListener();
  }
}
function mountSuspense(vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {
  const { p: patch, o: { createElement } } = rendererInternals;
  const hiddenContainer = createElement("div");
  const suspense = vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals);
  patch(null, suspense.pendingBranch = vnode.ssContent, hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds);
  if (suspense.deps > 0) {
    triggerEvent(vnode, "onPending");
    triggerEvent(vnode, "onFallback");
    patch(
      null,
      vnode.ssFallback,
      container,
      anchor,
      parentComponent,
      null,
      // fallback tree will not have suspense context
      isSVG,
      slotScopeIds
    );
    setActiveBranch(suspense, vnode.ssFallback);
  } else {
    suspense.resolve();
  }
}
function patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, { p: patch, um: unmount, o: { createElement } }) {
  const suspense = n2.suspense = n1.suspense;
  suspense.vnode = n2;
  n2.el = n1.el;
  const newBranch = n2.ssContent;
  const newFallback = n2.ssFallback;
  const { activeBranch, pendingBranch, isInFallback, isHydrating } = suspense;
  if (pendingBranch) {
    suspense.pendingBranch = newBranch;
    if (isSameVNodeType(newBranch, pendingBranch)) {
      patch(pendingBranch, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
      if (suspense.deps <= 0) {
        suspense.resolve();
      } else if (isInFallback) {
        patch(
          activeBranch,
          newFallback,
          container,
          anchor,
          parentComponent,
          null,
          // fallback tree will not have suspense context
          isSVG,
          slotScopeIds,
          optimized
        );
        setActiveBranch(suspense, newFallback);
      }
    } else {
      suspense.pendingId++;
      if (isHydrating) {
        suspense.isHydrating = false;
        suspense.activeBranch = pendingBranch;
      } else {
        unmount(pendingBranch, parentComponent, suspense);
      }
      suspense.deps = 0;
      suspense.effects.length = 0;
      suspense.hiddenContainer = createElement("div");
      if (isInFallback) {
        patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
        if (suspense.deps <= 0) {
          suspense.resolve();
        } else {
          patch(
            activeBranch,
            newFallback,
            container,
            anchor,
            parentComponent,
            null,
            // fallback tree will not have suspense context
            isSVG,
            slotScopeIds,
            optimized
          );
          setActiveBranch(suspense, newFallback);
        }
      } else if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
        patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);
        suspense.resolve(true);
      } else {
        patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
        if (suspense.deps <= 0) {
          suspense.resolve();
        }
      }
    }
  } else {
    if (activeBranch && isSameVNodeType(newBranch, activeBranch)) {
      patch(activeBranch, newBranch, container, anchor, parentComponent, suspense, isSVG, slotScopeIds, optimized);
      setActiveBranch(suspense, newBranch);
    } else {
      triggerEvent(n2, "onPending");
      suspense.pendingBranch = newBranch;
      suspense.pendingId++;
      patch(null, newBranch, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, slotScopeIds, optimized);
      if (suspense.deps <= 0) {
        suspense.resolve();
      } else {
        const { timeout, pendingId } = suspense;
        if (timeout > 0) {
          setTimeout(() => {
            if (suspense.pendingId === pendingId) {
              suspense.fallback(newFallback);
            }
          }, timeout);
        } else if (timeout === 0) {
          suspense.fallback(newFallback);
        }
      }
    }
  }
}
function createSuspenseBoundary(vnode, parent, parentComponent, container, hiddenContainer, anchor, isSVG, slotScopeIds, optimized, rendererInternals, isHydrating = false) {
  if (!hasWarned) {
    hasWarned = true;
    console[console.info ? "info" : "log"](`<Suspense> is an experimental feature and its API will likely change.`);
  }
  const { p: patch, m: move, um: unmount, n: next, o: { parentNode, remove: remove2 } } = rendererInternals;
  const timeout = toNumber(vnode.props && vnode.props.timeout);
  const suspense = {
    vnode,
    parent,
    parentComponent,
    isSVG,
    container,
    hiddenContainer,
    anchor,
    deps: 0,
    pendingId: 0,
    timeout: typeof timeout === "number" ? timeout : -1,
    activeBranch: null,
    pendingBranch: null,
    isInFallback: true,
    isHydrating,
    isUnmounted: false,
    effects: [],
    resolve(resume = false) {
      if (true) {
        if (!resume && !suspense.pendingBranch) {
          throw new Error(`suspense.resolve() is called without a pending branch.`);
        }
        if (suspense.isUnmounted) {
          throw new Error(`suspense.resolve() is called on an already unmounted suspense boundary.`);
        }
      }
      const { vnode: vnode2, activeBranch, pendingBranch, pendingId, effects, parentComponent: parentComponent2, container: container2 } = suspense;
      if (suspense.isHydrating) {
        suspense.isHydrating = false;
      } else if (!resume) {
        const delayEnter = activeBranch && pendingBranch.transition && pendingBranch.transition.mode === "out-in";
        if (delayEnter) {
          activeBranch.transition.afterLeave = () => {
            if (pendingId === suspense.pendingId) {
              move(
                pendingBranch,
                container2,
                anchor2,
                0
                /* ENTER */
              );
            }
          };
        }
        let { anchor: anchor2 } = suspense;
        if (activeBranch) {
          anchor2 = next(activeBranch);
          unmount(activeBranch, parentComponent2, suspense, true);
        }
        if (!delayEnter) {
          move(
            pendingBranch,
            container2,
            anchor2,
            0
            /* ENTER */
          );
        }
      }
      setActiveBranch(suspense, pendingBranch);
      suspense.pendingBranch = null;
      suspense.isInFallback = false;
      let parent2 = suspense.parent;
      let hasUnresolvedAncestor = false;
      while (parent2) {
        if (parent2.pendingBranch) {
          parent2.effects.push(...effects);
          hasUnresolvedAncestor = true;
          break;
        }
        parent2 = parent2.parent;
      }
      if (!hasUnresolvedAncestor) {
        queuePostFlushCb(effects);
      }
      suspense.effects = [];
      triggerEvent(vnode2, "onResolve");
    },
    fallback(fallbackVNode) {
      if (!suspense.pendingBranch) {
        return;
      }
      const { vnode: vnode2, activeBranch, parentComponent: parentComponent2, container: container2, isSVG: isSVG2 } = suspense;
      triggerEvent(vnode2, "onFallback");
      const anchor2 = next(activeBranch);
      const mountFallback = () => {
        if (!suspense.isInFallback) {
          return;
        }
        patch(
          null,
          fallbackVNode,
          container2,
          anchor2,
          parentComponent2,
          null,
          // fallback tree will not have suspense context
          isSVG2,
          slotScopeIds,
          optimized
        );
        setActiveBranch(suspense, fallbackVNode);
      };
      const delayEnter = fallbackVNode.transition && fallbackVNode.transition.mode === "out-in";
      if (delayEnter) {
        activeBranch.transition.afterLeave = mountFallback;
      }
      suspense.isInFallback = true;
      unmount(
        activeBranch,
        parentComponent2,
        null,
        // no suspense so unmount hooks fire now
        true
        // shouldRemove
      );
      if (!delayEnter) {
        mountFallback();
      }
    },
    move(container2, anchor2, type) {
      suspense.activeBranch && move(suspense.activeBranch, container2, anchor2, type);
      suspense.container = container2;
    },
    next() {
      return suspense.activeBranch && next(suspense.activeBranch);
    },
    registerDep(instance, setupRenderEffect) {
      const isInPendingSuspense = !!suspense.pendingBranch;
      if (isInPendingSuspense) {
        suspense.deps++;
      }
      const hydratedEl = instance.vnode.el;
      instance.asyncDep.catch((err) => {
        handleError(
          err,
          instance,
          0
          /* SETUP_FUNCTION */
        );
      }).then((asyncSetupResult) => {
        if (instance.isUnmounted || suspense.isUnmounted || suspense.pendingId !== instance.suspenseId) {
          return;
        }
        instance.asyncResolved = true;
        const { vnode: vnode2 } = instance;
        if (true) {
          pushWarningContext(vnode2);
        }
        handleSetupResult(instance, asyncSetupResult, false);
        if (hydratedEl) {
          vnode2.el = hydratedEl;
        }
        const placeholder = !hydratedEl && instance.subTree.el;
        setupRenderEffect(
          instance,
          vnode2,
          // component may have been moved before resolve.
          // if this is not a hydration, instance.subTree will be the comment
          // placeholder.
          parentNode(hydratedEl || instance.subTree.el),
          // anchor will not be used if this is hydration, so only need to
          // consider the comment placeholder case.
          hydratedEl ? null : next(instance.subTree),
          suspense,
          isSVG,
          optimized
        );
        if (placeholder) {
          remove2(placeholder);
        }
        updateHOCHostEl(instance, vnode2.el);
        if (true) {
          popWarningContext();
        }
        if (isInPendingSuspense && --suspense.deps === 0) {
          suspense.resolve();
        }
      });
    },
    unmount(parentSuspense, doRemove) {
      suspense.isUnmounted = true;
      if (suspense.activeBranch) {
        unmount(suspense.activeBranch, parentComponent, parentSuspense, doRemove);
      }
      if (suspense.pendingBranch) {
        unmount(suspense.pendingBranch, parentComponent, parentSuspense, doRemove);
      }
    }
  };
  return suspense;
}
function hydrateSuspense(node, vnode, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals, hydrateNode) {
  const suspense = vnode.suspense = createSuspenseBoundary(
    vnode,
    parentSuspense,
    parentComponent,
    node.parentNode,
    document.createElement("div"),
    null,
    isSVG,
    slotScopeIds,
    optimized,
    rendererInternals,
    true
    /* hydrating */
  );
  const result = hydrateNode(node, suspense.pendingBranch = vnode.ssContent, parentComponent, suspense, slotScopeIds, optimized);
  if (suspense.deps === 0) {
    suspense.resolve();
  }
  return result;
}
function normalizeSuspenseChildren(vnode) {
  const { shapeFlag, children } = vnode;
  const isSlotChildren = shapeFlag & 32;
  vnode.ssContent = normalizeSuspenseSlot(isSlotChildren ? children.default : children);
  vnode.ssFallback = isSlotChildren ? normalizeSuspenseSlot(children.fallback) : createVNode(Comment);
}
function normalizeSuspenseSlot(s) {
  let block;
  if (isFunction(s)) {
    const isCompiledSlot = s._c;
    if (isCompiledSlot) {
      s._d = false;
      openBlock();
    }
    s = s();
    if (isCompiledSlot) {
      s._d = true;
      block = currentBlock;
      closeBlock();
    }
  }
  if (isArray(s)) {
    const singleChild = filterSingleRoot(s);
    if (!singleChild) {
      warn2(`<Suspense> slots expect a single root node.`);
    }
    s = singleChild;
  }
  s = normalizeVNode(s);
  if (block && !s.dynamicChildren) {
    s.dynamicChildren = block.filter((c) => c !== s);
  }
  return s;
}
function queueEffectWithSuspense(fn, suspense) {
  if (suspense && suspense.pendingBranch) {
    if (isArray(fn)) {
      suspense.effects.push(...fn);
    } else {
      suspense.effects.push(fn);
    }
  } else {
    queuePostFlushCb(fn);
  }
}
function setActiveBranch(suspense, branch) {
  suspense.activeBranch = branch;
  const { vnode, parentComponent } = suspense;
  const el = vnode.el = branch.el;
  if (parentComponent && parentComponent.subTree === vnode) {
    parentComponent.vnode.el = el;
    updateHOCHostEl(parentComponent, el);
  }
}
function provide(key, value) {
  if (!currentInstance) {
    if (true) {
      warn2(`provide() can only be used inside setup().`);
    }
  } else {
    let provides = currentInstance.provides;
    const parentProvides = currentInstance.parent && currentInstance.parent.provides;
    if (parentProvides === provides) {
      provides = currentInstance.provides = Object.create(parentProvides);
    }
    provides[key] = value;
  }
}
function inject(key, defaultValue, treatDefaultAsFactory = false) {
  const instance = currentInstance || currentRenderingInstance;
  if (instance) {
    const provides = instance.parent == null ? instance.vnode.appContext && instance.vnode.appContext.provides : instance.parent.provides;
    if (provides && key in provides) {
      return provides[key];
    } else if (arguments.length > 1) {
      return treatDefaultAsFactory && isFunction(defaultValue) ? defaultValue.call(instance.proxy) : defaultValue;
    } else if (true) {
      warn2(`injection "${String(key)}" not found.`);
    }
  } else if (true) {
    warn2(`inject() can only be used inside setup() or functional components.`);
  }
}
function useTransitionState() {
  const state = {
    isMounted: false,
    isLeaving: false,
    isUnmounting: false,
    leavingVNodes: /* @__PURE__ */ new Map()
  };
  onMounted(() => {
    state.isMounted = true;
  });
  onBeforeUnmount(() => {
    state.isUnmounting = true;
  });
  return state;
}
function getLeavingNodesForType(state, vnode) {
  const { leavingVNodes } = state;
  let leavingVNodesCache = leavingVNodes.get(vnode.type);
  if (!leavingVNodesCache) {
    leavingVNodesCache = /* @__PURE__ */ Object.create(null);
    leavingVNodes.set(vnode.type, leavingVNodesCache);
  }
  return leavingVNodesCache;
}
function resolveTransitionHooks(vnode, props, state, instance) {
  const { appear, mode, persisted = false, onBeforeEnter, onEnter, onAfterEnter, onEnterCancelled, onBeforeLeave, onLeave, onAfterLeave, onLeaveCancelled, onBeforeAppear, onAppear, onAfterAppear, onAppearCancelled } = props;
  const key = String(vnode.key);
  const leavingVNodesCache = getLeavingNodesForType(state, vnode);
  const callHook3 = (hook, args) => {
    hook && callWithAsyncErrorHandling(hook, instance, 9, args);
  };
  const hooks = {
    mode,
    persisted,
    beforeEnter(el) {
      let hook = onBeforeEnter;
      if (!state.isMounted) {
        if (appear) {
          hook = onBeforeAppear || onBeforeEnter;
        } else {
          return;
        }
      }
      if (el._leaveCb) {
        el._leaveCb(
          true
          /* cancelled */
        );
      }
      const leavingVNode = leavingVNodesCache[key];
      if (leavingVNode && isSameVNodeType(vnode, leavingVNode) && leavingVNode.el._leaveCb) {
        leavingVNode.el._leaveCb();
      }
      callHook3(hook, [el]);
    },
    enter(el) {
      let hook = onEnter;
      let afterHook = onAfterEnter;
      let cancelHook = onEnterCancelled;
      if (!state.isMounted) {
        if (appear) {
          hook = onAppear || onEnter;
          afterHook = onAfterAppear || onAfterEnter;
          cancelHook = onAppearCancelled || onEnterCancelled;
        } else {
          return;
        }
      }
      let called = false;
      const done = el._enterCb = (cancelled) => {
        if (called)
          return;
        called = true;
        if (cancelled) {
          callHook3(cancelHook, [el]);
        } else {
          callHook3(afterHook, [el]);
        }
        if (hooks.delayedLeave) {
          hooks.delayedLeave();
        }
        el._enterCb = void 0;
      };
      if (hook) {
        hook(el, done);
        if (hook.length <= 1) {
          done();
        }
      } else {
        done();
      }
    },
    leave(el, remove2) {
      const key2 = String(vnode.key);
      if (el._enterCb) {
        el._enterCb(
          true
          /* cancelled */
        );
      }
      if (state.isUnmounting) {
        return remove2();
      }
      callHook3(onBeforeLeave, [el]);
      let called = false;
      const done = el._leaveCb = (cancelled) => {
        if (called)
          return;
        called = true;
        remove2();
        if (cancelled) {
          callHook3(onLeaveCancelled, [el]);
        } else {
          callHook3(onAfterLeave, [el]);
        }
        el._leaveCb = void 0;
        if (leavingVNodesCache[key2] === vnode) {
          delete leavingVNodesCache[key2];
        }
      };
      leavingVNodesCache[key2] = vnode;
      if (onLeave) {
        onLeave(el, done);
        if (onLeave.length <= 1) {
          done();
        }
      } else {
        done();
      }
    },
    clone(vnode2) {
      return resolveTransitionHooks(vnode2, props, state, instance);
    }
  };
  return hooks;
}
function emptyPlaceholder(vnode) {
  if (isKeepAlive(vnode)) {
    vnode = cloneVNode(vnode);
    vnode.children = null;
    return vnode;
  }
}
function getKeepAliveChild(vnode) {
  return isKeepAlive(vnode) ? vnode.children ? vnode.children[0] : void 0 : vnode;
}
function setTransitionHooks(vnode, hooks) {
  if (vnode.shapeFlag & 6 && vnode.component) {
    setTransitionHooks(vnode.component.subTree, hooks);
  } else if (vnode.shapeFlag & 128) {
    vnode.ssContent.transition = hooks.clone(vnode.ssContent);
    vnode.ssFallback.transition = hooks.clone(vnode.ssFallback);
  } else {
    vnode.transition = hooks;
  }
}
function getTransitionRawChildren(children, keepComment = false) {
  let ret = [];
  let keyedFragmentCount = 0;
  for (let i = 0; i < children.length; i++) {
    const child = children[i];
    if (child.type === Fragment) {
      if (child.patchFlag & 128)
        keyedFragmentCount++;
      ret = ret.concat(getTransitionRawChildren(child.children, keepComment));
    } else if (keepComment || child.type !== Comment$1) {
      ret.push(child);
    }
  }
  if (keyedFragmentCount > 1) {
    for (let i = 0; i < ret.length; i++) {
      ret[i].patchFlag = -2;
    }
  }
  return ret;
}
function defineComponent(options) {
  return isFunction(options) ? { setup: options, name: options.name } : options;
}
function defineAsyncComponent(source) {
  if (isFunction(source)) {
    source = { loader: source };
  }
  const {
    loader,
    loadingComponent,
    errorComponent,
    delay = 200,
    timeout,
    // undefined = never times out
    suspensible = true,
    onError: userOnError
  } = source;
  let pendingRequest = null;
  let resolvedComp;
  let retries = 0;
  const retry = () => {
    retries++;
    pendingRequest = null;
    return load();
  };
  const load = () => {
    let thisRequest;
    return pendingRequest || (thisRequest = pendingRequest = loader().catch((err) => {
      err = err instanceof Error ? err : new Error(String(err));
      if (userOnError) {
        return new Promise((resolve2, reject) => {
          const userRetry = () => resolve2(retry());
          const userFail = () => reject(err);
          userOnError(err, userRetry, userFail, retries + 1);
        });
      } else {
        throw err;
      }
    }).then((comp) => {
      if (thisRequest !== pendingRequest && pendingRequest) {
        return pendingRequest;
      }
      if (!comp) {
        warn2(`Async component loader resolved to undefined. If you are using retry(), make sure to return its return value.`);
      }
      if (comp && (comp.__esModule || comp[Symbol.toStringTag] === "Module")) {
        comp = comp.default;
      }
      if (comp && !isObject(comp) && !isFunction(comp)) {
        throw new Error(`Invalid async component load result: ${comp}`);
      }
      resolvedComp = comp;
      return comp;
    }));
  };
  return defineComponent({
    name: "AsyncComponentWrapper",
    __asyncLoader: load,
    get __asyncResolved() {
      return resolvedComp;
    },
    setup() {
      const instance = currentInstance;
      if (resolvedComp) {
        return () => createInnerComp(resolvedComp, instance);
      }
      const onError = (err) => {
        pendingRequest = null;
        handleError(
          err,
          instance,
          13,
          !errorComponent
          /* do not throw in dev if user provided error component */
        );
      };
      if (suspensible && instance.suspense || false) {
        return load().then((comp) => {
          return () => createInnerComp(comp, instance);
        }).catch((err) => {
          onError(err);
          return () => errorComponent ? createVNode(errorComponent, {
            error: err
          }) : null;
        });
      }
      const loaded = ref(false);
      const error = ref();
      const delayed = ref(!!delay);
      if (delay) {
        setTimeout(() => {
          delayed.value = false;
        }, delay);
      }
      if (timeout != null) {
        setTimeout(() => {
          if (!loaded.value && !error.value) {
            const err = new Error(`Async component timed out after ${timeout}ms.`);
            onError(err);
            error.value = err;
          }
        }, timeout);
      }
      load().then(() => {
        loaded.value = true;
        if (instance.parent && isKeepAlive(instance.parent.vnode)) {
          queueJob(instance.parent.update);
        }
      }).catch((err) => {
        onError(err);
        error.value = err;
      });
      return () => {
        if (loaded.value && resolvedComp) {
          return createInnerComp(resolvedComp, instance);
        } else if (error.value && errorComponent) {
          return createVNode(errorComponent, {
            error: error.value
          });
        } else if (loadingComponent && !delayed.value) {
          return createVNode(loadingComponent);
        }
      };
    }
  });
}
function createInnerComp(comp, { vnode: { ref: ref2, props, children } }) {
  const vnode = createVNode(comp, props, children);
  vnode.ref = ref2;
  return vnode;
}
function matches(pattern, name) {
  if (isArray(pattern)) {
    return pattern.some((p2) => matches(p2, name));
  } else if (isString(pattern)) {
    return pattern.split(",").indexOf(name) > -1;
  } else if (pattern.test) {
    return pattern.test(name);
  }
  return false;
}
function onActivated(hook, target) {
  registerKeepAliveHook(hook, "a", target);
}
function onDeactivated(hook, target) {
  registerKeepAliveHook(hook, "da", target);
}
function registerKeepAliveHook(hook, type, target = currentInstance) {
  const wrappedHook = hook.__wdc || (hook.__wdc = () => {
    let current = target;
    while (current) {
      if (current.isDeactivated) {
        return;
      }
      current = current.parent;
    }
    hook();
  });
  injectHook(type, wrappedHook, target);
  if (target) {
    let current = target.parent;
    while (current && current.parent) {
      if (isKeepAlive(current.parent.vnode)) {
        injectToKeepAliveRoot(wrappedHook, type, target, current);
      }
      current = current.parent;
    }
  }
}
function injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {
  const injected = injectHook(
    type,
    hook,
    keepAliveRoot,
    true
    /* prepend */
  );
  onUnmounted(() => {
    remove(keepAliveRoot[type], injected);
  }, target);
}
function resetShapeFlag(vnode) {
  let shapeFlag = vnode.shapeFlag;
  if (shapeFlag & 256) {
    shapeFlag -= 256;
  }
  if (shapeFlag & 512) {
    shapeFlag -= 512;
  }
  vnode.shapeFlag = shapeFlag;
}
function getInnerChild(vnode) {
  return vnode.shapeFlag & 128 ? vnode.ssContent : vnode;
}
function injectHook(type, hook, target = currentInstance, prepend = false) {
  if (target) {
    const hooks = target[type] || (target[type] = []);
    const wrappedHook = hook.__weh || (hook.__weh = (...args) => {
      if (target.isUnmounted) {
        return;
      }
      pauseTracking();
      setCurrentInstance(target);
      const res = callWithAsyncErrorHandling(hook, target, type, args);
      unsetCurrentInstance();
      resetTracking();
      return res;
    });
    if (prepend) {
      hooks.unshift(wrappedHook);
    } else {
      hooks.push(wrappedHook);
    }
    return wrappedHook;
  } else if (true) {
    const apiName = toHandlerKey(ErrorTypeStrings[type].replace(/ hook$/, ""));
    warn2(`${apiName} is called when there is no active component instance to be associated with. Lifecycle injection APIs can only be used during execution of setup(). If you are using async setup(), make sure to register lifecycle hooks before the first await statement.`);
  }
}
function onErrorCaptured(hook, target = currentInstance) {
  injectHook("ec", hook, target);
}
function createDuplicateChecker() {
  const cache = /* @__PURE__ */ Object.create(null);
  return (type, key) => {
    if (cache[key]) {
      warn2(`${type} property "${key}" is already defined in ${cache[key]}.`);
    } else {
      cache[key] = type;
    }
  };
}
function applyOptions(instance) {
  const options = resolveMergedOptions(instance);
  const publicThis = instance.proxy;
  const ctx = instance.ctx;
  shouldCacheAccess = false;
  if (options.beforeCreate) {
    callHook(
      options.beforeCreate,
      instance,
      "bc"
      /* BEFORE_CREATE */
    );
  }
  const {
    // state
    data: dataOptions,
    computed: computedOptions,
    methods,
    watch: watchOptions,
    provide: provideOptions,
    inject: injectOptions,
    // lifecycle
    created,
    beforeMount,
    mounted,
    beforeUpdate,
    updated,
    activated,
    deactivated,
    beforeDestroy,
    beforeUnmount,
    destroyed,
    unmounted,
    render: render2,
    renderTracked,
    renderTriggered,
    errorCaptured,
    serverPrefetch,
    // public API
    expose,
    inheritAttrs,
    // assets
    components,
    directives,
    filters
  } = options;
  const checkDuplicateProperties = true ? createDuplicateChecker() : null;
  if (true) {
    const [propsOptions] = instance.propsOptions;
    if (propsOptions) {
      for (const key in propsOptions) {
        checkDuplicateProperties("Props", key);
      }
    }
  }
  if (injectOptions) {
    resolveInjections(injectOptions, ctx, checkDuplicateProperties, instance.appContext.config.unwrapInjectedRef);
  }
  if (methods) {
    for (const key in methods) {
      const methodHandler = methods[key];
      if (isFunction(methodHandler)) {
        if (true) {
          Object.defineProperty(ctx, key, {
            value: methodHandler.bind(publicThis),
            configurable: true,
            enumerable: true,
            writable: true
          });
        } else {
          ctx[key] = methodHandler.bind(publicThis);
        }
        if (true) {
          checkDuplicateProperties("Methods", key);
        }
      } else if (true) {
        warn2(`Method "${key}" has type "${typeof methodHandler}" in the component definition. Did you reference the function correctly?`);
      }
    }
  }
  if (dataOptions) {
    if (!isFunction(dataOptions)) {
      warn2(`The data option must be a function. Plain object usage is no longer supported.`);
    }
    const data = dataOptions.call(publicThis, publicThis);
    if (isPromise(data)) {
      warn2(`data() returned a Promise - note data() cannot be async; If you intend to perform data fetching before component renders, use async setup() + <Suspense>.`);
    }
    if (!isObject(data)) {
      warn2(`data() should return an object.`);
    } else {
      instance.data = reactive(data);
      if (true) {
        for (const key in data) {
          checkDuplicateProperties("Data", key);
          if (key[0] !== "$" && key[0] !== "_") {
            Object.defineProperty(ctx, key, {
              configurable: true,
              enumerable: true,
              get: () => data[key],
              set: NOOP
            });
          }
        }
      }
    }
  }
  shouldCacheAccess = true;
  if (computedOptions) {
    for (const key in computedOptions) {
      const opt = computedOptions[key];
      const get2 = isFunction(opt) ? opt.bind(publicThis, publicThis) : isFunction(opt.get) ? opt.get.bind(publicThis, publicThis) : NOOP;
      if (get2 === NOOP) {
        warn2(`Computed property "${key}" has no getter.`);
      }
      const set2 = !isFunction(opt) && isFunction(opt.set) ? opt.set.bind(publicThis) : true ? () => {
        warn2(`Write operation failed: computed property "${key}" is readonly.`);
      } : NOOP;
      const c = computed({
        get: get2,
        set: set2
      });
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => c.value,
        set: (v) => c.value = v
      });
      if (true) {
        checkDuplicateProperties("Computed", key);
      }
    }
  }
  if (watchOptions) {
    for (const key in watchOptions) {
      createWatcher(watchOptions[key], ctx, publicThis, key);
    }
  }
  if (provideOptions) {
    const provides = isFunction(provideOptions) ? provideOptions.call(publicThis) : provideOptions;
    Reflect.ownKeys(provides).forEach((key) => {
      provide(key, provides[key]);
    });
  }
  if (created) {
    callHook(
      created,
      instance,
      "c"
      /* CREATED */
    );
  }
  function registerLifecycleHook(register, hook) {
    if (isArray(hook)) {
      hook.forEach((_hook) => register(_hook.bind(publicThis)));
    } else if (hook) {
      register(hook.bind(publicThis));
    }
  }
  registerLifecycleHook(onBeforeMount, beforeMount);
  registerLifecycleHook(onMounted, mounted);
  registerLifecycleHook(onBeforeUpdate, beforeUpdate);
  registerLifecycleHook(onUpdated, updated);
  registerLifecycleHook(onActivated, activated);
  registerLifecycleHook(onDeactivated, deactivated);
  registerLifecycleHook(onErrorCaptured, errorCaptured);
  registerLifecycleHook(onRenderTracked, renderTracked);
  registerLifecycleHook(onRenderTriggered, renderTriggered);
  registerLifecycleHook(onBeforeUnmount, beforeUnmount);
  registerLifecycleHook(onUnmounted, unmounted);
  registerLifecycleHook(onServerPrefetch, serverPrefetch);
  if (isArray(expose)) {
    if (expose.length) {
      const exposed = instance.exposed || (instance.exposed = {});
      expose.forEach((key) => {
        Object.defineProperty(exposed, key, {
          get: () => publicThis[key],
          set: (val) => publicThis[key] = val
        });
      });
    } else if (!instance.exposed) {
      instance.exposed = {};
    }
  }
  if (render2 && instance.render === NOOP) {
    instance.render = render2;
  }
  if (inheritAttrs != null) {
    instance.inheritAttrs = inheritAttrs;
  }
  if (components)
    instance.components = components;
  if (directives)
    instance.directives = directives;
}
function resolveInjections(injectOptions, ctx, checkDuplicateProperties = NOOP, unwrapRef = false) {
  if (isArray(injectOptions)) {
    injectOptions = normalizeInject(injectOptions);
  }
  for (const key in injectOptions) {
    const opt = injectOptions[key];
    let injected;
    if (isObject(opt)) {
      if ("default" in opt) {
        injected = inject(
          opt.from || key,
          opt.default,
          true
          /* treat default function as factory */
        );
      } else {
        injected = inject(opt.from || key);
      }
    } else {
      injected = inject(opt);
    }
    if (isRef(injected)) {
      if (unwrapRef) {
        Object.defineProperty(ctx, key, {
          enumerable: true,
          configurable: true,
          get: () => injected.value,
          set: (v) => injected.value = v
        });
      } else {
        if (true) {
          warn2(`injected property "${key}" is a ref and will be auto-unwrapped and no longer needs \`.value\` in the next minor release. To opt-in to the new behavior now, set \`app.config.unwrapInjectedRef = true\` (this config is temporary and will not be needed in the future.)`);
        }
        ctx[key] = injected;
      }
    } else {
      ctx[key] = injected;
    }
    if (true) {
      checkDuplicateProperties("Inject", key);
    }
  }
}
function callHook(hook, instance, type) {
  callWithAsyncErrorHandling(isArray(hook) ? hook.map((h2) => h2.bind(instance.proxy)) : hook.bind(instance.proxy), instance, type);
}
function createWatcher(raw, ctx, publicThis, key) {
  const getter = key.includes(".") ? createPathGetter(publicThis, key) : () => publicThis[key];
  if (isString(raw)) {
    const handler = ctx[raw];
    if (isFunction(handler)) {
      watch(getter, handler);
    } else if (true) {
      warn2(`Invalid watch handler specified by key "${raw}"`, handler);
    }
  } else if (isFunction(raw)) {
    watch(getter, raw.bind(publicThis));
  } else if (isObject(raw)) {
    if (isArray(raw)) {
      raw.forEach((r) => createWatcher(r, ctx, publicThis, key));
    } else {
      const handler = isFunction(raw.handler) ? raw.handler.bind(publicThis) : ctx[raw.handler];
      if (isFunction(handler)) {
        watch(getter, handler, raw);
      } else if (true) {
        warn2(`Invalid watch handler specified by key "${raw.handler}"`, handler);
      }
    }
  } else if (true) {
    warn2(`Invalid watch option: "${key}"`, raw);
  }
}
function resolveMergedOptions(instance) {
  const base = instance.type;
  const { mixins, extends: extendsOptions } = base;
  const { mixins: globalMixins, optionsCache: cache, config: { optionMergeStrategies } } = instance.appContext;
  const cached = cache.get(base);
  let resolved;
  if (cached) {
    resolved = cached;
  } else if (!globalMixins.length && !mixins && !extendsOptions) {
    {
      resolved = base;
    }
  } else {
    resolved = {};
    if (globalMixins.length) {
      globalMixins.forEach((m) => mergeOptions(resolved, m, optionMergeStrategies, true));
    }
    mergeOptions(resolved, base, optionMergeStrategies);
  }
  cache.set(base, resolved);
  return resolved;
}
function mergeOptions(to, from, strats, asMixin = false) {
  const { mixins, extends: extendsOptions } = from;
  if (extendsOptions) {
    mergeOptions(to, extendsOptions, strats, true);
  }
  if (mixins) {
    mixins.forEach((m) => mergeOptions(to, m, strats, true));
  }
  for (const key in from) {
    if (asMixin && key === "expose") {
      warn2(`"expose" option is ignored when declared in mixins or extends. It should only be declared in the base component itself.`);
    } else {
      const strat = internalOptionMergeStrats[key] || strats && strats[key];
      to[key] = strat ? strat(to[key], from[key]) : from[key];
    }
  }
  return to;
}
function mergeDataFn(to, from) {
  if (!from) {
    return to;
  }
  if (!to) {
    return from;
  }
  return function mergedDataFn() {
    return extend(isFunction(to) ? to.call(this, this) : to, isFunction(from) ? from.call(this, this) : from);
  };
}
function mergeInject(to, from) {
  return mergeObjectOptions(normalizeInject(to), normalizeInject(from));
}
function normalizeInject(raw) {
  if (isArray(raw)) {
    const res = {};
    for (let i = 0; i < raw.length; i++) {
      res[raw[i]] = raw[i];
    }
    return res;
  }
  return raw;
}
function mergeAsArray(to, from) {
  return to ? [...new Set([].concat(to, from))] : from;
}
function mergeObjectOptions(to, from) {
  return to ? extend(extend(/* @__PURE__ */ Object.create(null), to), from) : from;
}
function mergeWatchOptions(to, from) {
  if (!to)
    return from;
  if (!from)
    return to;
  const merged = extend(/* @__PURE__ */ Object.create(null), to);
  for (const key in from) {
    merged[key] = mergeAsArray(to[key], from[key]);
  }
  return merged;
}
function initProps(instance, rawProps, isStateful, isSSR = false) {
  const props = {};
  const attrs = {};
  def(attrs, InternalObjectKey, 1);
  instance.propsDefaults = /* @__PURE__ */ Object.create(null);
  setFullProps(instance, rawProps, props, attrs);
  for (const key in instance.propsOptions[0]) {
    if (!(key in props)) {
      props[key] = void 0;
    }
  }
  if (true) {
    validateProps(rawProps || {}, props, instance);
  }
  if (isStateful) {
    instance.props = isSSR ? props : shallowReactive(props);
  } else {
    if (!instance.type.props) {
      instance.props = attrs;
    } else {
      instance.props = props;
    }
  }
  instance.attrs = attrs;
}
function updateProps(instance, rawProps, rawPrevProps, optimized) {
  const { props, attrs, vnode: { patchFlag } } = instance;
  const rawCurrentProps = toRaw(props);
  const [options] = instance.propsOptions;
  let hasAttrsChanged = false;
  if (
    // always force full diff in dev
    // - #1942 if hmr is enabled with sfc component
    // - vite#872 non-sfc component used by sfc component
    !(instance.type.__hmrId || instance.parent && instance.parent.type.__hmrId) && (optimized || patchFlag > 0) && !(patchFlag & 16)
  ) {
    if (patchFlag & 8) {
      const propsToUpdate = instance.vnode.dynamicProps;
      for (let i = 0; i < propsToUpdate.length; i++) {
        let key = propsToUpdate[i];
        const value = rawProps[key];
        if (options) {
          if (hasOwn(attrs, key)) {
            if (value !== attrs[key]) {
              attrs[key] = value;
              hasAttrsChanged = true;
            }
          } else {
            const camelizedKey = camelize(key);
            props[camelizedKey] = resolvePropValue(
              options,
              rawCurrentProps,
              camelizedKey,
              value,
              instance,
              false
              /* isAbsent */
            );
          }
        } else {
          if (value !== attrs[key]) {
            attrs[key] = value;
            hasAttrsChanged = true;
          }
        }
      }
    }
  } else {
    if (setFullProps(instance, rawProps, props, attrs)) {
      hasAttrsChanged = true;
    }
    let kebabKey;
    for (const key in rawCurrentProps) {
      if (!rawProps || // for camelCase
      !hasOwn(rawProps, key) && // it's possible the original props was passed in as kebab-case
      // and converted to camelCase (#955)
      ((kebabKey = hyphenate(key)) === key || !hasOwn(rawProps, kebabKey))) {
        if (options) {
          if (rawPrevProps && // for camelCase
          (rawPrevProps[key] !== void 0 || // for kebab-case
          rawPrevProps[kebabKey] !== void 0)) {
            props[key] = resolvePropValue(
              options,
              rawCurrentProps,
              key,
              void 0,
              instance,
              true
              /* isAbsent */
            );
          }
        } else {
          delete props[key];
        }
      }
    }
    if (attrs !== rawCurrentProps) {
      for (const key in attrs) {
        if (!rawProps || !hasOwn(rawProps, key)) {
          delete attrs[key];
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (hasAttrsChanged) {
    trigger(instance, "set", "$attrs");
  }
  if (true) {
    validateProps(rawProps || {}, props, instance);
  }
}
function setFullProps(instance, rawProps, props, attrs) {
  const [options, needCastKeys] = instance.propsOptions;
  let hasAttrsChanged = false;
  let rawCastValues;
  if (rawProps) {
    for (let key in rawProps) {
      if (isReservedProp(key)) {
        continue;
      }
      const value = rawProps[key];
      let camelKey;
      if (options && hasOwn(options, camelKey = camelize(key))) {
        if (!needCastKeys || !needCastKeys.includes(camelKey)) {
          props[camelKey] = value;
        } else {
          (rawCastValues || (rawCastValues = {}))[camelKey] = value;
        }
      } else if (!isEmitListener(instance.emitsOptions, key)) {
        if (value !== attrs[key]) {
          attrs[key] = value;
          hasAttrsChanged = true;
        }
      }
    }
  }
  if (needCastKeys) {
    const rawCurrentProps = toRaw(props);
    const castValues = rawCastValues || EMPTY_OBJ;
    for (let i = 0; i < needCastKeys.length; i++) {
      const key = needCastKeys[i];
      props[key] = resolvePropValue(options, rawCurrentProps, key, castValues[key], instance, !hasOwn(castValues, key));
    }
  }
  return hasAttrsChanged;
}
function resolvePropValue(options, props, key, value, instance, isAbsent) {
  const opt = options[key];
  if (opt != null) {
    const hasDefault = hasOwn(opt, "default");
    if (hasDefault && value === void 0) {
      const defaultValue = opt.default;
      if (opt.type !== Function && isFunction(defaultValue)) {
        const { propsDefaults } = instance;
        if (key in propsDefaults) {
          value = propsDefaults[key];
        } else {
          setCurrentInstance(instance);
          value = propsDefaults[key] = defaultValue.call(null, props);
          unsetCurrentInstance();
        }
      } else {
        value = defaultValue;
      }
    }
    if (opt[
      0
      /* shouldCast */
    ]) {
      if (isAbsent && !hasDefault) {
        value = false;
      } else if (opt[
        1
        /* shouldCastTrue */
      ] && (value === "" || value === hyphenate(key))) {
        value = true;
      }
    }
  }
  return value;
}
function normalizePropsOptions(comp, appContext, asMixin = false) {
  const cache = appContext.propsCache;
  const cached = cache.get(comp);
  if (cached) {
    return cached;
  }
  const raw = comp.props;
  const normalized = {};
  const needCastKeys = [];
  let hasExtends = false;
  if (__VUE_OPTIONS_API__ && !isFunction(comp)) {
    const extendProps = (raw2) => {
      hasExtends = true;
      const [props, keys] = normalizePropsOptions(raw2, appContext, true);
      extend(normalized, props);
      if (keys)
        needCastKeys.push(...keys);
    };
    if (!asMixin && appContext.mixins.length) {
      appContext.mixins.forEach(extendProps);
    }
    if (comp.extends) {
      extendProps(comp.extends);
    }
    if (comp.mixins) {
      comp.mixins.forEach(extendProps);
    }
  }
  if (!raw && !hasExtends) {
    cache.set(comp, EMPTY_ARR);
    return EMPTY_ARR;
  }
  if (isArray(raw)) {
    for (let i = 0; i < raw.length; i++) {
      if (!isString(raw[i])) {
        warn2(`props must be strings when using array syntax.`, raw[i]);
      }
      const normalizedKey = camelize(raw[i]);
      if (validatePropName(normalizedKey)) {
        normalized[normalizedKey] = EMPTY_OBJ;
      }
    }
  } else if (raw) {
    if (!isObject(raw)) {
      warn2(`invalid props options`, raw);
    }
    for (const key in raw) {
      const normalizedKey = camelize(key);
      if (validatePropName(normalizedKey)) {
        const opt = raw[key];
        const prop = normalized[normalizedKey] = isArray(opt) || isFunction(opt) ? { type: opt } : opt;
        if (prop) {
          const booleanIndex = getTypeIndex(Boolean, prop.type);
          const stringIndex = getTypeIndex(String, prop.type);
          prop[
            0
            /* shouldCast */
          ] = booleanIndex > -1;
          prop[
            1
            /* shouldCastTrue */
          ] = stringIndex < 0 || booleanIndex < stringIndex;
          if (booleanIndex > -1 || hasOwn(prop, "default")) {
            needCastKeys.push(normalizedKey);
          }
        }
      }
    }
  }
  const res = [normalized, needCastKeys];
  cache.set(comp, res);
  return res;
}
function validatePropName(key) {
  if (key[0] !== "$") {
    return true;
  } else if (true) {
    warn2(`Invalid prop name: "${key}" is a reserved property.`);
  }
  return false;
}
function getType(ctor) {
  const match = ctor && ctor.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : ctor === null ? "null" : "";
}
function isSameType(a, b) {
  return getType(a) === getType(b);
}
function getTypeIndex(type, expectedTypes) {
  if (isArray(expectedTypes)) {
    return expectedTypes.findIndex((t) => isSameType(t, type));
  } else if (isFunction(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }
  return -1;
}
function validateProps(rawProps, props, instance) {
  const resolvedValues = toRaw(props);
  const options = instance.propsOptions[0];
  for (const key in options) {
    let opt = options[key];
    if (opt == null)
      continue;
    validateProp(key, resolvedValues[key], opt, !hasOwn(rawProps, key) && !hasOwn(rawProps, hyphenate(key)));
  }
}
function validateProp(name, value, prop, isAbsent) {
  const { type, required, validator } = prop;
  if (required && isAbsent) {
    warn2('Missing required prop: "' + name + '"');
    return;
  }
  if (value == null && !prop.required) {
    return;
  }
  if (type != null && type !== true) {
    let isValid = false;
    const types = isArray(type) ? type : [type];
    const expectedTypes = [];
    for (let i = 0; i < types.length && !isValid; i++) {
      const { valid, expectedType } = assertType(value, types[i]);
      expectedTypes.push(expectedType || "");
      isValid = valid;
    }
    if (!isValid) {
      warn2(getInvalidTypeMessage(name, value, expectedTypes));
      return;
    }
  }
  if (validator && !validator(value)) {
    warn2('Invalid prop: custom validator check failed for prop "' + name + '".');
  }
}
function assertType(value, type) {
  let valid;
  const expectedType = getType(type);
  if (isSimpleType(expectedType)) {
    const t = typeof value;
    valid = t === expectedType.toLowerCase();
    if (!valid && t === "object") {
      valid = value instanceof type;
    }
  } else if (expectedType === "Object") {
    valid = isObject(value);
  } else if (expectedType === "Array") {
    valid = isArray(value);
  } else if (expectedType === "null") {
    valid = value === null;
  } else {
    valid = value instanceof type;
  }
  return {
    valid,
    expectedType
  };
}
function getInvalidTypeMessage(name, value, expectedTypes) {
  let message = `Invalid prop: type check failed for prop "${name}". Expected ${expectedTypes.map(capitalize).join(" | ")}`;
  const expectedType = expectedTypes[0];
  const receivedType = toRawType(value);
  const expectedValue = styleValue(value, expectedType);
  const receivedValue = styleValue(value, receivedType);
  if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) {
    message += ` with value ${expectedValue}`;
  }
  message += `, got ${receivedType} `;
  if (isExplicable(receivedType)) {
    message += `with value ${receivedValue}.`;
  }
  return message;
}
function styleValue(value, type) {
  if (type === "String") {
    return `"${value}"`;
  } else if (type === "Number") {
    return `${Number(value)}`;
  } else {
    return `${value}`;
  }
}
function isExplicable(type) {
  const explicitTypes = ["string", "number", "boolean"];
  return explicitTypes.some((elem) => type.toLowerCase() === elem);
}
function isBoolean(...args) {
  return args.some((elem) => elem.toLowerCase() === "boolean");
}
function validateDirectiveName(name) {
  if (isBuiltInDirective(name)) {
    warn2("Do not use built-in directive ids as custom directive id: " + name);
  }
}
function withDirectives(vnode, directives) {
  const internalInstance = currentRenderingInstance;
  if (internalInstance === null) {
    warn2(`withDirectives can only be used inside render functions.`);
    return vnode;
  }
  const instance = internalInstance.proxy;
  const bindings = vnode.dirs || (vnode.dirs = []);
  for (let i = 0; i < directives.length; i++) {
    let [dir, value, arg, modifiers = EMPTY_OBJ] = directives[i];
    if (isFunction(dir)) {
      dir = {
        mounted: dir,
        updated: dir
      };
    }
    if (dir.deep) {
      traverse(value);
    }
    bindings.push({
      dir,
      instance,
      value,
      oldValue: void 0,
      arg,
      modifiers
    });
  }
  return vnode;
}
function invokeDirectiveHook(vnode, prevVNode, instance, name) {
  const bindings = vnode.dirs;
  const oldBindings = prevVNode && prevVNode.dirs;
  for (let i = 0; i < bindings.length; i++) {
    const binding = bindings[i];
    if (oldBindings) {
      binding.oldValue = oldBindings[i].value;
    }
    let hook = binding.dir[name];
    if (hook) {
      pauseTracking();
      callWithAsyncErrorHandling(hook, instance, 8, [
        vnode.el,
        binding,
        vnode,
        prevVNode
      ]);
      resetTracking();
    }
  }
}
function createAppContext() {
  return {
    app: null,
    config: {
      isNativeTag: NO,
      performance: false,
      globalProperties: {},
      optionMergeStrategies: {},
      errorHandler: void 0,
      warnHandler: void 0,
      compilerOptions: {}
    },
    mixins: [],
    components: {},
    directives: {},
    provides: /* @__PURE__ */ Object.create(null),
    optionsCache: /* @__PURE__ */ new WeakMap(),
    propsCache: /* @__PURE__ */ new WeakMap(),
    emitsCache: /* @__PURE__ */ new WeakMap()
  };
}
function createAppAPI(render2, hydrate2) {
  return function createApp2(rootComponent, rootProps = null) {
    if (rootProps != null && !isObject(rootProps)) {
      warn2(`root props passed to app.mount() must be an object.`);
      rootProps = null;
    }
    const context = createAppContext();
    const installedPlugins = /* @__PURE__ */ new Set();
    let isMounted = false;
    const app = context.app = {
      _uid: uid++,
      _component: rootComponent,
      _props: rootProps,
      _container: null,
      _context: context,
      _instance: null,
      version,
      get config() {
        return context.config;
      },
      set config(v) {
        if (true) {
          warn2(`app.config cannot be replaced. Modify individual options instead.`);
        }
      },
      use(plugin, ...options) {
        if (installedPlugins.has(plugin)) {
          warn2(`Plugin has already been applied to target app.`);
        } else if (plugin && isFunction(plugin.install)) {
          installedPlugins.add(plugin);
          plugin.install(app, ...options);
        } else if (isFunction(plugin)) {
          installedPlugins.add(plugin);
          plugin(app, ...options);
        } else if (true) {
          warn2(`A plugin must either be a function or an object with an "install" function.`);
        }
        return app;
      },
      mixin(mixin) {
        if (__VUE_OPTIONS_API__) {
          if (!context.mixins.includes(mixin)) {
            context.mixins.push(mixin);
          } else if (true) {
            warn2("Mixin has already been applied to target app" + (mixin.name ? `: ${mixin.name}` : ""));
          }
        } else if (true) {
          warn2("Mixins are only available in builds supporting Options API");
        }
        return app;
      },
      component(name, component) {
        if (true) {
          validateComponentName(name, context.config);
        }
        if (!component) {
          return context.components[name];
        }
        if (context.components[name]) {
          warn2(`Component "${name}" has already been registered in target app.`);
        }
        context.components[name] = component;
        return app;
      },
      directive(name, directive) {
        if (true) {
          validateDirectiveName(name);
        }
        if (!directive) {
          return context.directives[name];
        }
        if (context.directives[name]) {
          warn2(`Directive "${name}" has already been registered in target app.`);
        }
        context.directives[name] = directive;
        return app;
      },
      mount(rootContainer, isHydrate, isSVG) {
        if (!isMounted) {
          const vnode = createVNode(rootComponent, rootProps);
          vnode.appContext = context;
          if (true) {
            context.reload = () => {
              render2(cloneVNode(vnode), rootContainer, isSVG);
            };
          }
          if (isHydrate && hydrate2) {
            hydrate2(vnode, rootContainer);
          } else {
            render2(vnode, rootContainer, isSVG);
          }
          isMounted = true;
          app._container = rootContainer;
          rootContainer.__vue_app__ = app;
          if (true) {
            app._instance = vnode.component;
            devtoolsInitApp(app, version);
          }
          return vnode.component.proxy;
        } else if (true) {
          warn2(`App has already been mounted.
If you want to remount the same app, move your app creation logic into a factory function and create fresh app instances for each mount - e.g. \`const createMyApp = () => createApp(App)\``);
        }
      },
      unmount() {
        if (isMounted) {
          render2(null, app._container);
          if (true) {
            app._instance = null;
            devtoolsUnmountApp(app);
          }
          delete app._container.__vue_app__;
        } else if (true) {
          warn2(`Cannot unmount an app that is not mounted.`);
        }
      },
      provide(key, value) {
        if (key in context.provides) {
          warn2(`App already provides property with key "${String(key)}". It will be overwritten with the new value.`);
        }
        context.provides[key] = value;
        return app;
      }
    };
    return app;
  };
}
function createHydrationFunctions(rendererInternals) {
  const { mt: mountComponent, p: patch, o: { patchProp: patchProp2, nextSibling, parentNode, remove: remove2, insert, createComment } } = rendererInternals;
  const hydrate2 = (vnode, container) => {
    if (!container.hasChildNodes()) {
      warn2(`Attempting to hydrate existing markup but container is empty. Performing full mount instead.`);
      patch(null, vnode, container);
      flushPostFlushCbs();
      return;
    }
    hasMismatch = false;
    hydrateNode(container.firstChild, vnode, null, null, null);
    flushPostFlushCbs();
    if (hasMismatch && true) {
      console.error(`Hydration completed but contains mismatches.`);
    }
  };
  const hydrateNode = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized = false) => {
    const isFragmentStart = isComment(node) && node.data === "[";
    const onMismatch = () => handleMismatch(node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragmentStart);
    const { type, ref: ref2, shapeFlag } = vnode;
    const domType = node.nodeType;
    vnode.el = node;
    let nextNode = null;
    switch (type) {
      case Text:
        if (domType !== 3) {
          nextNode = onMismatch();
        } else {
          if (node.data !== vnode.children) {
            hasMismatch = true;
            warn2(`Hydration text mismatch:
- Client: ${JSON.stringify(node.data)}
- Server: ${JSON.stringify(vnode.children)}`);
            node.data = vnode.children;
          }
          nextNode = nextSibling(node);
        }
        break;
      case Comment$1:
        if (domType !== 8 || isFragmentStart) {
          nextNode = onMismatch();
        } else {
          nextNode = nextSibling(node);
        }
        break;
      case Static:
        if (domType !== 1) {
          nextNode = onMismatch();
        } else {
          nextNode = node;
          const needToAdoptContent = !vnode.children.length;
          for (let i = 0; i < vnode.staticCount; i++) {
            if (needToAdoptContent)
              vnode.children += nextNode.outerHTML;
            if (i === vnode.staticCount - 1) {
              vnode.anchor = nextNode;
            }
            nextNode = nextSibling(nextNode);
          }
          return nextNode;
        }
        break;
      case Fragment:
        if (!isFragmentStart) {
          nextNode = onMismatch();
        } else {
          nextNode = hydrateFragment(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
        }
        break;
      default:
        if (shapeFlag & 1) {
          if (domType !== 1 || vnode.type.toLowerCase() !== node.tagName.toLowerCase()) {
            nextNode = onMismatch();
          } else {
            nextNode = hydrateElement(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
          }
        } else if (shapeFlag & 6) {
          vnode.slotScopeIds = slotScopeIds;
          const container = parentNode(node);
          mountComponent(vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), optimized);
          nextNode = isFragmentStart ? locateClosingAsyncAnchor(node) : nextSibling(node);
          if (isAsyncWrapper(vnode)) {
            let subTree;
            if (isFragmentStart) {
              subTree = createVNode(Fragment);
              subTree.anchor = nextNode ? nextNode.previousSibling : container.lastChild;
            } else {
              subTree = node.nodeType === 3 ? createTextVNode("") : createVNode("div");
            }
            subTree.el = node;
            vnode.component.subTree = subTree;
          }
        } else if (shapeFlag & 64) {
          if (domType !== 8) {
            nextNode = onMismatch();
          } else {
            nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, rendererInternals, hydrateChildren);
          }
        } else if (shapeFlag & 128) {
          nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, isSVGContainer(parentNode(node)), slotScopeIds, optimized, rendererInternals, hydrateNode);
        } else if (true) {
          warn2("Invalid HostVNode type:", type, `(${typeof type})`);
        }
    }
    if (ref2 != null) {
      setRef(ref2, null, parentSuspense, vnode);
    }
    return nextNode;
  };
  const hydrateElement = (el, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {
    optimized = optimized || !!vnode.dynamicChildren;
    const { type, props, patchFlag, shapeFlag, dirs } = vnode;
    const forcePatchValue = type === "input" && dirs || type === "option";
    if (forcePatchValue || patchFlag !== -1) {
      if (dirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "created");
      }
      if (props) {
        if (forcePatchValue || !optimized || patchFlag & 16 || patchFlag & 32) {
          for (const key in props) {
            if (forcePatchValue && key.endsWith("value") || isOn(key) && !isReservedProp(key)) {
              patchProp2(el, key, null, props[key]);
            }
          }
        } else if (props.onClick) {
          patchProp2(el, "onClick", null, props.onClick);
        }
      }
      let vnodeHooks;
      if (vnodeHooks = props && props.onVnodeBeforeMount) {
        invokeVNodeHook(vnodeHooks, parentComponent, vnode);
      }
      if (dirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
      }
      if ((vnodeHooks = props && props.onVnodeMounted) || dirs) {
        queueEffectWithSuspense(() => {
          vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);
          dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
        }, parentSuspense);
      }
      if (shapeFlag & 16 && // skip if element has innerHTML / textContent
      !(props && (props.innerHTML || props.textContent))) {
        let next = hydrateChildren(el.firstChild, vnode, el, parentComponent, parentSuspense, slotScopeIds, optimized);
        let hasWarned2 = false;
        while (next) {
          hasMismatch = true;
          if (!hasWarned2) {
            warn2(`Hydration children mismatch in <${vnode.type}>: server rendered element contains more child nodes than client vdom.`);
            hasWarned2 = true;
          }
          const cur = next;
          next = next.nextSibling;
          remove2(cur);
        }
      } else if (shapeFlag & 8) {
        if (el.textContent !== vnode.children) {
          hasMismatch = true;
          warn2(`Hydration text content mismatch in <${vnode.type}>:
- Client: ${el.textContent}
- Server: ${vnode.children}`);
          el.textContent = vnode.children;
        }
      }
    }
    return el.nextSibling;
  };
  const hydrateChildren = (node, parentVNode, container, parentComponent, parentSuspense, slotScopeIds, optimized) => {
    optimized = optimized || !!parentVNode.dynamicChildren;
    const children = parentVNode.children;
    const l = children.length;
    let hasWarned2 = false;
    for (let i = 0; i < l; i++) {
      const vnode = optimized ? children[i] : children[i] = normalizeVNode(children[i]);
      if (node) {
        node = hydrateNode(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized);
      } else if (vnode.type === Text && !vnode.children) {
        continue;
      } else {
        hasMismatch = true;
        if (!hasWarned2) {
          warn2(`Hydration children mismatch in <${container.tagName.toLowerCase()}>: server rendered element contains fewer child nodes than client vdom.`);
          hasWarned2 = true;
        }
        patch(null, vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);
      }
    }
    return node;
  };
  const hydrateFragment = (node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized) => {
    const { slotScopeIds: fragmentSlotScopeIds } = vnode;
    if (fragmentSlotScopeIds) {
      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
    }
    const container = parentNode(node);
    const next = hydrateChildren(nextSibling(node), vnode, container, parentComponent, parentSuspense, slotScopeIds, optimized);
    if (next && isComment(next) && next.data === "]") {
      return nextSibling(vnode.anchor = next);
    } else {
      hasMismatch = true;
      insert(vnode.anchor = createComment(`]`), container, next);
      return next;
    }
  };
  const handleMismatch = (node, vnode, parentComponent, parentSuspense, slotScopeIds, isFragment) => {
    hasMismatch = true;
    warn2(`Hydration node mismatch:
- Client vnode:`, vnode.type, `
- Server rendered DOM:`, node, node.nodeType === 3 ? `(text)` : isComment(node) && node.data === "[" ? `(start of fragment)` : ``);
    vnode.el = null;
    if (isFragment) {
      const end = locateClosingAsyncAnchor(node);
      while (true) {
        const next2 = nextSibling(node);
        if (next2 && next2 !== end) {
          remove2(next2);
        } else {
          break;
        }
      }
    }
    const next = nextSibling(node);
    const container = parentNode(node);
    remove2(node);
    patch(null, vnode, container, next, parentComponent, parentSuspense, isSVGContainer(container), slotScopeIds);
    return next;
  };
  const locateClosingAsyncAnchor = (node) => {
    let match = 0;
    while (node) {
      node = nextSibling(node);
      if (node && isComment(node)) {
        if (node.data === "[")
          match++;
        if (node.data === "]") {
          if (match === 0) {
            return nextSibling(node);
          } else {
            match--;
          }
        }
      }
    }
    return node;
  };
  return [hydrate2, hydrateNode];
}
function startMeasure(instance, type) {
  if (instance.appContext.config.performance && isSupported()) {
    perf.mark(`vue-${type}-${instance.uid}`);
  }
  if (true) {
    devtoolsPerfStart(instance, type, supported ? perf.now() : Date.now());
  }
}
function endMeasure(instance, type) {
  if (instance.appContext.config.performance && isSupported()) {
    const startTag = `vue-${type}-${instance.uid}`;
    const endTag = startTag + `:end`;
    perf.mark(endTag);
    perf.measure(`<${formatComponentName(instance, instance.type)}> ${type}`, startTag, endTag);
    perf.clearMarks(startTag);
    perf.clearMarks(endTag);
  }
  if (true) {
    devtoolsPerfEnd(instance, type, supported ? perf.now() : Date.now());
  }
}
function isSupported() {
  if (supported !== void 0) {
    return supported;
  }
  if (typeof window !== "undefined" && window.performance) {
    supported = true;
    perf = window.performance;
  } else {
    supported = false;
  }
  return supported;
}
function initFeatureFlags() {
  let needWarn = false;
  if (typeof __VUE_OPTIONS_API__ !== "boolean") {
    needWarn = true;
    getGlobalThis().__VUE_OPTIONS_API__ = true;
  }
  if (typeof __VUE_PROD_DEVTOOLS__ !== "boolean") {
    needWarn = true;
    getGlobalThis().__VUE_PROD_DEVTOOLS__ = false;
  }
  if (needWarn) {
    console.warn(`You are running the esm-bundler build of Vue. It is recommended to configure your bundler to explicitly replace feature flag globals with boolean literals to get proper tree-shaking in the final bundle. See http://link.vuejs.org/feature-flags for more details.`);
  }
}
function createRenderer(options) {
  return baseCreateRenderer(options);
}
function createHydrationRenderer(options) {
  return baseCreateRenderer(options, createHydrationFunctions);
}
function baseCreateRenderer(options, createHydrationFns) {
  {
    initFeatureFlags();
  }
  if (true) {
    const target = getGlobalThis();
    target.__VUE__ = true;
    setDevtoolsHook(target.__VUE_DEVTOOLS_GLOBAL_HOOK__);
  }
  const { insert: hostInsert, remove: hostRemove, patchProp: hostPatchProp, createElement: hostCreateElement, createText: hostCreateText, createComment: hostCreateComment, setText: hostSetText, setElementText: hostSetElementText, parentNode: hostParentNode, nextSibling: hostNextSibling, setScopeId: hostSetScopeId = NOOP, cloneNode: hostCloneNode, insertStaticContent: hostInsertStaticContent } = options;
  const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, slotScopeIds = null, optimized = isHmrUpdating ? false : !!n2.dynamicChildren) => {
    if (n1 === n2) {
      return;
    }
    if (n1 && !isSameVNodeType(n1, n2)) {
      anchor = getNextHostNode(n1);
      unmount(n1, parentComponent, parentSuspense, true);
      n1 = null;
    }
    if (n2.patchFlag === -2) {
      optimized = false;
      n2.dynamicChildren = null;
    }
    const { type, ref: ref2, shapeFlag } = n2;
    switch (type) {
      case Text:
        processText(n1, n2, container, anchor);
        break;
      case Comment$1:
        processCommentNode(n1, n2, container, anchor);
        break;
      case Static:
        if (n1 == null) {
          mountStaticNode(n2, container, anchor, isSVG);
        } else if (true) {
          patchStaticNode(n1, n2, container, isSVG);
        }
        break;
      case Fragment:
        processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        break;
      default:
        if (shapeFlag & 1) {
          processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (shapeFlag & 6) {
          processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (shapeFlag & 64) {
          type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
        } else if (shapeFlag & 128) {
          type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals);
        } else if (true) {
          warn2("Invalid VNode type:", type, `(${typeof type})`);
        }
    }
    if (ref2 != null && parentComponent) {
      setRef(ref2, n1 && n1.ref, parentSuspense, n2 || n1, !n2);
    }
  };
  const processText = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(n2.el = hostCreateText(n2.children), container, anchor);
    } else {
      const el = n2.el = n1.el;
      if (n2.children !== n1.children) {
        hostSetText(el, n2.children);
      }
    }
  };
  const processCommentNode = (n1, n2, container, anchor) => {
    if (n1 == null) {
      hostInsert(n2.el = hostCreateComment(n2.children || ""), container, anchor);
    } else {
      n2.el = n1.el;
    }
  };
  const mountStaticNode = (n2, container, anchor, isSVG) => {
    [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);
  };
  const patchStaticNode = (n1, n2, container, isSVG) => {
    if (n2.children !== n1.children) {
      const anchor = hostNextSibling(n1.anchor);
      removeStaticNode(n1);
      [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);
    } else {
      n2.el = n1.el;
      n2.anchor = n1.anchor;
    }
  };
  const moveStaticNode = ({ el, anchor }, container, nextSibling) => {
    let next;
    while (el && el !== anchor) {
      next = hostNextSibling(el);
      hostInsert(el, container, nextSibling);
      el = next;
    }
    hostInsert(anchor, container, nextSibling);
  };
  const removeStaticNode = ({ el, anchor }) => {
    let next;
    while (el && el !== anchor) {
      next = hostNextSibling(el);
      hostRemove(el);
      el = next;
    }
    hostRemove(anchor);
  };
  const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    isSVG = isSVG || n2.type === "svg";
    if (n1 == null) {
      mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    } else {
      patchElement(n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
  };
  const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    let el;
    let vnodeHook;
    const { type, props, shapeFlag, transition, patchFlag, dirs } = vnode;
    if (false) {
      el = vnode.el = hostCloneNode(vnode.el);
    } else {
      el = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is, props);
      if (shapeFlag & 8) {
        hostSetElementText(el, vnode.children);
      } else if (shapeFlag & 16) {
        mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG && type !== "foreignObject", slotScopeIds, optimized);
      }
      if (dirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "created");
      }
      if (props) {
        for (const key in props) {
          if (key !== "value" && !isReservedProp(key)) {
            hostPatchProp(el, key, null, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
          }
        }
        if ("value" in props) {
          hostPatchProp(el, "value", null, props.value);
        }
        if (vnodeHook = props.onVnodeBeforeMount) {
          invokeVNodeHook(vnodeHook, parentComponent, vnode);
        }
      }
      setScopeId(el, vnode, vnode.scopeId, slotScopeIds, parentComponent);
    }
    if (true) {
      Object.defineProperty(el, "__vnode", {
        value: vnode,
        enumerable: false
      });
      Object.defineProperty(el, "__vueParentComponent", {
        value: parentComponent,
        enumerable: false
      });
    }
    if (dirs) {
      invokeDirectiveHook(vnode, null, parentComponent, "beforeMount");
    }
    const needCallTransitionHooks = (!parentSuspense || parentSuspense && !parentSuspense.pendingBranch) && transition && !transition.persisted;
    if (needCallTransitionHooks) {
      transition.beforeEnter(el);
    }
    hostInsert(el, container, anchor);
    if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        needCallTransitionHooks && transition.enter(el);
        dirs && invokeDirectiveHook(vnode, null, parentComponent, "mounted");
      }, parentSuspense);
    }
  };
  const setScopeId = (el, vnode, scopeId, slotScopeIds, parentComponent) => {
    if (scopeId) {
      hostSetScopeId(el, scopeId);
    }
    if (slotScopeIds) {
      for (let i = 0; i < slotScopeIds.length; i++) {
        hostSetScopeId(el, slotScopeIds[i]);
      }
    }
    if (parentComponent) {
      let subTree = parentComponent.subTree;
      if (subTree.patchFlag > 0 && subTree.patchFlag & 2048) {
        subTree = filterSingleRoot(subTree.children) || subTree;
      }
      if (vnode === subTree) {
        const parentVNode = parentComponent.vnode;
        setScopeId(el, parentVNode, parentVNode.scopeId, parentVNode.slotScopeIds, parentComponent.parent);
      }
    }
  };
  const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, start = 0) => {
    for (let i = start; i < children.length; i++) {
      const child = children[i] = optimized ? cloneIfMounted(children[i]) : normalizeVNode(children[i]);
      patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
  };
  const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    const el = n2.el = n1.el;
    let { patchFlag, dynamicChildren, dirs } = n2;
    patchFlag |= n1.patchFlag & 16;
    const oldProps = n1.props || EMPTY_OBJ;
    const newProps = n2.props || EMPTY_OBJ;
    let vnodeHook;
    if (vnodeHook = newProps.onVnodeBeforeUpdate) {
      invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
    }
    if (dirs) {
      invokeDirectiveHook(n2, n1, parentComponent, "beforeUpdate");
    }
    if (isHmrUpdating) {
      patchFlag = 0;
      optimized = false;
      dynamicChildren = null;
    }
    if (patchFlag > 0) {
      if (patchFlag & 16) {
        patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
      } else {
        if (patchFlag & 2) {
          if (oldProps.class !== newProps.class) {
            hostPatchProp(el, "class", null, newProps.class, isSVG);
          }
        }
        if (patchFlag & 4) {
          hostPatchProp(el, "style", oldProps.style, newProps.style, isSVG);
        }
        if (patchFlag & 8) {
          const propsToUpdate = n2.dynamicProps;
          for (let i = 0; i < propsToUpdate.length; i++) {
            const key = propsToUpdate[i];
            const prev = oldProps[key];
            const next = newProps[key];
            if (next !== prev || key === "value") {
              hostPatchProp(el, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);
            }
          }
        }
      }
      if (patchFlag & 1) {
        if (n1.children !== n2.children) {
          hostSetElementText(el, n2.children);
        }
      }
    } else if (!optimized && dynamicChildren == null) {
      patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);
    }
    const areChildrenSVG = isSVG && n2.type !== "foreignObject";
    if (dynamicChildren) {
      patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds);
      if (parentComponent && parentComponent.type.__hmrId) {
        traverseStaticChildren(n1, n2);
      }
    } else if (!optimized) {
      patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG, slotScopeIds, false);
    }
    if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);
        dirs && invokeDirectiveHook(n2, n1, parentComponent, "updated");
      }, parentSuspense);
    }
  };
  const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG, slotScopeIds) => {
    for (let i = 0; i < newChildren.length; i++) {
      const oldVNode = oldChildren[i];
      const newVNode = newChildren[i];
      const container = (
        // oldVNode may be an errored async setup() component inside Suspense
        // which will not have a mounted element
        oldVNode.el && // - In the case of a Fragment, we need to provide the actual parent
        // of the Fragment itself so it can move its children.
        (oldVNode.type === Fragment || // - In the case of different nodes, there is going to be a replacement
        // which also requires the correct parent container
        !isSameVNodeType(oldVNode, newVNode) || // - In the case of a component, it could contain anything.
        oldVNode.shapeFlag & 6 || oldVNode.shapeFlag & 64) ? hostParentNode(oldVNode.el) : (
          // In other cases, the parent container is not actually used so we
          // just pass the block element here to avoid a DOM parentNode call.
          fallbackContainer
        )
      );
      patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, true);
    }
  };
  const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {
    if (oldProps !== newProps) {
      for (const key in newProps) {
        if (isReservedProp(key))
          continue;
        const next = newProps[key];
        const prev = oldProps[key];
        if (next !== prev && key !== "value") {
          hostPatchProp(el, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
        }
      }
      if (oldProps !== EMPTY_OBJ) {
        for (const key in oldProps) {
          if (!isReservedProp(key) && !(key in newProps)) {
            hostPatchProp(el, key, oldProps[key], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);
          }
        }
      }
      if ("value" in newProps) {
        hostPatchProp(el, "value", oldProps.value, newProps.value);
      }
    }
  };
  const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText("");
    const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText("");
    let { patchFlag, dynamicChildren, slotScopeIds: fragmentSlotScopeIds } = n2;
    if (isHmrUpdating) {
      patchFlag = 0;
      optimized = false;
      dynamicChildren = null;
    }
    if (fragmentSlotScopeIds) {
      slotScopeIds = slotScopeIds ? slotScopeIds.concat(fragmentSlotScopeIds) : fragmentSlotScopeIds;
    }
    if (n1 == null) {
      hostInsert(fragmentStartAnchor, container, anchor);
      hostInsert(fragmentEndAnchor, container, anchor);
      mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    } else {
      if (patchFlag > 0 && patchFlag & 64 && dynamicChildren && // #2715 the previous fragment could've been a BAILed one as a result
      // of renderSlot() with no valid children
      n1.dynamicChildren) {
        patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG, slotScopeIds);
        if (parentComponent && parentComponent.type.__hmrId) {
          traverseStaticChildren(n1, n2);
        } else if (
          // #2080 if the stable fragment has a key, it's a <template v-for> that may
          //  get moved around. Make sure all root level vnodes inherit el.
          // #2134 or if it's a component root, it may also get moved around
          // as the component is being moved.
          n2.key != null || parentComponent && n2 === parentComponent.subTree
        ) {
          traverseStaticChildren(
            n1,
            n2,
            true
            /* shallow */
          );
        }
      } else {
        patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      }
    }
  };
  const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    n2.slotScopeIds = slotScopeIds;
    if (n1 == null) {
      if (n2.shapeFlag & 512) {
        parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);
      } else {
        mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);
      }
    } else {
      updateComponent(n1, n2, optimized);
    }
  };
  const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {
    const instance = initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense);
    if (instance.type.__hmrId) {
      registerHMR(instance);
    }
    if (true) {
      pushWarningContext(initialVNode);
      startMeasure(instance, `mount`);
    }
    if (isKeepAlive(initialVNode)) {
      instance.ctx.renderer = internals;
    }
    {
      if (true) {
        startMeasure(instance, `init`);
      }
      setupComponent(instance);
      if (true) {
        endMeasure(instance, `init`);
      }
    }
    if (instance.asyncDep) {
      parentSuspense && parentSuspense.registerDep(instance, setupRenderEffect);
      if (!initialVNode.el) {
        const placeholder = instance.subTree = createVNode(Comment$1);
        processCommentNode(null, placeholder, container, anchor);
      }
      return;
    }
    setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);
    if (true) {
      popWarningContext();
      endMeasure(instance, `mount`);
    }
  };
  const updateComponent = (n1, n2, optimized) => {
    const instance = n2.component = n1.component;
    if (shouldUpdateComponent(n1, n2, optimized)) {
      if (instance.asyncDep && !instance.asyncResolved) {
        if (true) {
          pushWarningContext(n2);
        }
        updateComponentPreRender(instance, n2, optimized);
        if (true) {
          popWarningContext();
        }
        return;
      } else {
        instance.next = n2;
        invalidateJob(instance.update);
        instance.update();
      }
    } else {
      n2.component = n1.component;
      n2.el = n1.el;
      instance.vnode = n2;
    }
  };
  const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {
    const componentUpdateFn = () => {
      if (!instance.isMounted) {
        let vnodeHook;
        const { el, props } = initialVNode;
        const { bm, m, parent } = instance;
        effect2.allowRecurse = false;
        if (bm) {
          invokeArrayFns(bm);
        }
        if (vnodeHook = props && props.onVnodeBeforeMount) {
          invokeVNodeHook(vnodeHook, parent, initialVNode);
        }
        effect2.allowRecurse = true;
        if (el && hydrateNode) {
          const hydrateSubTree = () => {
            if (true) {
              startMeasure(instance, `render`);
            }
            instance.subTree = renderComponentRoot(instance);
            if (true) {
              endMeasure(instance, `render`);
            }
            if (true) {
              startMeasure(instance, `hydrate`);
            }
            hydrateNode(el, instance.subTree, instance, parentSuspense, null);
            if (true) {
              endMeasure(instance, `hydrate`);
            }
          };
          if (isAsyncWrapper(initialVNode)) {
            initialVNode.type.__asyncLoader().then(
              // note: we are moving the render call into an async callback,
              // which means it won't track dependencies - but it's ok because
              // a server-rendered async wrapper is already in resolved state
              // and it will never need to change.
              () => !instance.isUnmounted && hydrateSubTree()
            );
          } else {
            hydrateSubTree();
          }
        } else {
          if (true) {
            startMeasure(instance, `render`);
          }
          const subTree = instance.subTree = renderComponentRoot(instance);
          if (true) {
            endMeasure(instance, `render`);
          }
          if (true) {
            startMeasure(instance, `patch`);
          }
          patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);
          if (true) {
            endMeasure(instance, `patch`);
          }
          initialVNode.el = subTree.el;
        }
        if (m) {
          queuePostRenderEffect(m, parentSuspense);
        }
        if (vnodeHook = props && props.onVnodeMounted) {
          const scopedInitialVNode = initialVNode;
          queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, scopedInitialVNode), parentSuspense);
        }
        if (initialVNode.shapeFlag & 256) {
          instance.a && queuePostRenderEffect(instance.a, parentSuspense);
        }
        instance.isMounted = true;
        if (true) {
          devtoolsComponentAdded(instance);
        }
        initialVNode = container = anchor = null;
      } else {
        let { next, bu, u, parent, vnode } = instance;
        let originNext = next;
        let vnodeHook;
        if (true) {
          pushWarningContext(next || instance.vnode);
        }
        if (next) {
          next.el = vnode.el;
          updateComponentPreRender(instance, next, optimized);
        } else {
          next = vnode;
        }
        effect2.allowRecurse = false;
        if (bu) {
          invokeArrayFns(bu);
        }
        if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) {
          invokeVNodeHook(vnodeHook, parent, next, vnode);
        }
        effect2.allowRecurse = true;
        if (true) {
          startMeasure(instance, `render`);
        }
        const nextTree = renderComponentRoot(instance);
        if (true) {
          endMeasure(instance, `render`);
        }
        const prevTree = instance.subTree;
        instance.subTree = nextTree;
        if (true) {
          startMeasure(instance, `patch`);
        }
        patch(
          prevTree,
          nextTree,
          // parent may have changed if it's in a teleport
          hostParentNode(prevTree.el),
          // anchor may have changed if it's in a fragment
          getNextHostNode(prevTree),
          instance,
          parentSuspense,
          isSVG
        );
        if (true) {
          endMeasure(instance, `patch`);
        }
        next.el = nextTree.el;
        if (originNext === null) {
          updateHOCHostEl(instance, nextTree.el);
        }
        if (u) {
          queuePostRenderEffect(u, parentSuspense);
        }
        if (vnodeHook = next.props && next.props.onVnodeUpdated) {
          queuePostRenderEffect(() => invokeVNodeHook(vnodeHook, parent, next, vnode), parentSuspense);
        }
        if (true) {
          devtoolsComponentUpdated(instance);
        }
        if (true) {
          popWarningContext();
        }
      }
    };
    const effect2 = new ReactiveEffect(
      componentUpdateFn,
      () => queueJob(instance.update),
      instance.scope
      // track it in component's effect scope
    );
    const update = instance.update = effect2.run.bind(effect2);
    update.id = instance.uid;
    effect2.allowRecurse = update.allowRecurse = true;
    if (true) {
      effect2.onTrack = instance.rtc ? (e) => invokeArrayFns(instance.rtc, e) : void 0;
      effect2.onTrigger = instance.rtg ? (e) => invokeArrayFns(instance.rtg, e) : void 0;
      update.ownerInstance = instance;
    }
    update();
  };
  const updateComponentPreRender = (instance, nextVNode, optimized) => {
    nextVNode.component = instance;
    const prevProps = instance.vnode.props;
    instance.vnode = nextVNode;
    instance.next = null;
    updateProps(instance, nextVNode.props, prevProps, optimized);
    updateSlots(instance, nextVNode.children, optimized);
    pauseTracking();
    flushPreFlushCbs(void 0, instance.update);
    resetTracking();
  };
  const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized = false) => {
    const c1 = n1 && n1.children;
    const prevShapeFlag = n1 ? n1.shapeFlag : 0;
    const c2 = n2.children;
    const { patchFlag, shapeFlag } = n2;
    if (patchFlag > 0) {
      if (patchFlag & 128) {
        patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        return;
      } else if (patchFlag & 256) {
        patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        return;
      }
    }
    if (shapeFlag & 8) {
      if (prevShapeFlag & 16) {
        unmountChildren(c1, parentComponent, parentSuspense);
      }
      if (c2 !== c1) {
        hostSetElementText(container, c2);
      }
    } else {
      if (prevShapeFlag & 16) {
        if (shapeFlag & 16) {
          patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else {
          unmountChildren(c1, parentComponent, parentSuspense, true);
        }
      } else {
        if (prevShapeFlag & 8) {
          hostSetElementText(container, "");
        }
        if (shapeFlag & 16) {
          mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        }
      }
    }
  };
  const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    c1 = c1 || EMPTY_ARR;
    c2 = c2 || EMPTY_ARR;
    const oldLength = c1.length;
    const newLength = c2.length;
    const commonLength = Math.min(oldLength, newLength);
    let i;
    for (i = 0; i < commonLength; i++) {
      const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
      patch(c1[i], nextChild, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
    }
    if (oldLength > newLength) {
      unmountChildren(c1, parentComponent, parentSuspense, true, false, commonLength);
    } else {
      mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, commonLength);
    }
  };
  const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized) => {
    let i = 0;
    const l2 = c2.length;
    let e1 = c1.length - 1;
    let e2 = l2 - 1;
    while (i <= e1 && i <= e2) {
      const n1 = c1[i];
      const n2 = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
      if (isSameVNodeType(n1, n2)) {
        patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      } else {
        break;
      }
      i++;
    }
    while (i <= e1 && i <= e2) {
      const n1 = c1[e1];
      const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);
      if (isSameVNodeType(n1, n2)) {
        patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
      } else {
        break;
      }
      e1--;
      e2--;
    }
    if (i > e1) {
      if (i <= e2) {
        const nextPos = e2 + 1;
        const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;
        while (i <= e2) {
          patch(null, c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]), container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          i++;
        }
      }
    } else if (i > e2) {
      while (i <= e1) {
        unmount(c1[i], parentComponent, parentSuspense, true);
        i++;
      }
    } else {
      const s1 = i;
      const s2 = i;
      const keyToNewIndexMap = /* @__PURE__ */ new Map();
      for (i = s2; i <= e2; i++) {
        const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);
        if (nextChild.key != null) {
          if (keyToNewIndexMap.has(nextChild.key)) {
            warn2(`Duplicate keys found during update:`, JSON.stringify(nextChild.key), `Make sure keys are unique.`);
          }
          keyToNewIndexMap.set(nextChild.key, i);
        }
      }
      let j;
      let patched = 0;
      const toBePatched = e2 - s2 + 1;
      let moved = false;
      let maxNewIndexSoFar = 0;
      const newIndexToOldIndexMap = new Array(toBePatched);
      for (i = 0; i < toBePatched; i++)
        newIndexToOldIndexMap[i] = 0;
      for (i = s1; i <= e1; i++) {
        const prevChild = c1[i];
        if (patched >= toBePatched) {
          unmount(prevChild, parentComponent, parentSuspense, true);
          continue;
        }
        let newIndex;
        if (prevChild.key != null) {
          newIndex = keyToNewIndexMap.get(prevChild.key);
        } else {
          for (j = s2; j <= e2; j++) {
            if (newIndexToOldIndexMap[j - s2] === 0 && isSameVNodeType(prevChild, c2[j])) {
              newIndex = j;
              break;
            }
          }
        }
        if (newIndex === void 0) {
          unmount(prevChild, parentComponent, parentSuspense, true);
        } else {
          newIndexToOldIndexMap[newIndex - s2] = i + 1;
          if (newIndex >= maxNewIndexSoFar) {
            maxNewIndexSoFar = newIndex;
          } else {
            moved = true;
          }
          patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
          patched++;
        }
      }
      const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : EMPTY_ARR;
      j = increasingNewIndexSequence.length - 1;
      for (i = toBePatched - 1; i >= 0; i--) {
        const nextIndex = s2 + i;
        const nextChild = c2[nextIndex];
        const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;
        if (newIndexToOldIndexMap[i] === 0) {
          patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
        } else if (moved) {
          if (j < 0 || i !== increasingNewIndexSequence[j]) {
            move(
              nextChild,
              container,
              anchor,
              2
              /* REORDER */
            );
          } else {
            j--;
          }
        }
      }
    }
  };
  const move = (vnode, container, anchor, moveType, parentSuspense = null) => {
    const { el, type, transition, children, shapeFlag } = vnode;
    if (shapeFlag & 6) {
      move(vnode.component.subTree, container, anchor, moveType);
      return;
    }
    if (shapeFlag & 128) {
      vnode.suspense.move(container, anchor, moveType);
      return;
    }
    if (shapeFlag & 64) {
      type.move(vnode, container, anchor, internals);
      return;
    }
    if (type === Fragment) {
      hostInsert(el, container, anchor);
      for (let i = 0; i < children.length; i++) {
        move(children[i], container, anchor, moveType);
      }
      hostInsert(vnode.anchor, container, anchor);
      return;
    }
    if (type === Static) {
      moveStaticNode(vnode, container, anchor);
      return;
    }
    const needTransition = moveType !== 2 && shapeFlag & 1 && transition;
    if (needTransition) {
      if (moveType === 0) {
        transition.beforeEnter(el);
        hostInsert(el, container, anchor);
        queuePostRenderEffect(() => transition.enter(el), parentSuspense);
      } else {
        const { leave, delayLeave, afterLeave } = transition;
        const remove3 = () => hostInsert(el, container, anchor);
        const performLeave = () => {
          leave(el, () => {
            remove3();
            afterLeave && afterLeave();
          });
        };
        if (delayLeave) {
          delayLeave(el, remove3, performLeave);
        } else {
          performLeave();
        }
      }
    } else {
      hostInsert(el, container, anchor);
    }
  };
  const unmount = (vnode, parentComponent, parentSuspense, doRemove = false, optimized = false) => {
    const { type, props, ref: ref2, children, dynamicChildren, shapeFlag, patchFlag, dirs } = vnode;
    if (ref2 != null) {
      setRef(ref2, null, parentSuspense, vnode, true);
    }
    if (shapeFlag & 256) {
      parentComponent.ctx.deactivate(vnode);
      return;
    }
    const shouldInvokeDirs = shapeFlag & 1 && dirs;
    let vnodeHook;
    if (vnodeHook = props && props.onVnodeBeforeUnmount) {
      invokeVNodeHook(vnodeHook, parentComponent, vnode);
    }
    if (shapeFlag & 6) {
      unmountComponent(vnode.component, parentSuspense, doRemove);
    } else {
      if (shapeFlag & 128) {
        vnode.suspense.unmount(parentSuspense, doRemove);
        return;
      }
      if (shouldInvokeDirs) {
        invokeDirectiveHook(vnode, null, parentComponent, "beforeUnmount");
      }
      if (shapeFlag & 64) {
        vnode.type.remove(vnode, parentComponent, parentSuspense, optimized, internals, doRemove);
      } else if (dynamicChildren && // #1153: fast path should not be taken for non-stable (v-for) fragments
      (type !== Fragment || patchFlag > 0 && patchFlag & 64)) {
        unmountChildren(dynamicChildren, parentComponent, parentSuspense, false, true);
      } else if (type === Fragment && (patchFlag & 128 || patchFlag & 256) || !optimized && shapeFlag & 16) {
        unmountChildren(children, parentComponent, parentSuspense);
      }
      if (doRemove) {
        remove2(vnode);
      }
    }
    if ((vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {
      queuePostRenderEffect(() => {
        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);
        shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, "unmounted");
      }, parentSuspense);
    }
  };
  const remove2 = (vnode) => {
    const { type, el, anchor, transition } = vnode;
    if (type === Fragment) {
      removeFragment(el, anchor);
      return;
    }
    if (type === Static) {
      removeStaticNode(vnode);
      return;
    }
    const performRemove = () => {
      hostRemove(el);
      if (transition && !transition.persisted && transition.afterLeave) {
        transition.afterLeave();
      }
    };
    if (vnode.shapeFlag & 1 && transition && !transition.persisted) {
      const { leave, delayLeave } = transition;
      const performLeave = () => leave(el, performRemove);
      if (delayLeave) {
        delayLeave(vnode.el, performRemove, performLeave);
      } else {
        performLeave();
      }
    } else {
      performRemove();
    }
  };
  const removeFragment = (cur, end) => {
    let next;
    while (cur !== end) {
      next = hostNextSibling(cur);
      hostRemove(cur);
      cur = next;
    }
    hostRemove(end);
  };
  const unmountComponent = (instance, parentSuspense, doRemove) => {
    if (instance.type.__hmrId) {
      unregisterHMR(instance);
    }
    const { bum, scope, update, subTree, um } = instance;
    if (bum) {
      invokeArrayFns(bum);
    }
    scope.stop();
    if (update) {
      update.active = false;
      unmount(subTree, instance, parentSuspense, doRemove);
    }
    if (um) {
      queuePostRenderEffect(um, parentSuspense);
    }
    queuePostRenderEffect(() => {
      instance.isUnmounted = true;
    }, parentSuspense);
    if (parentSuspense && parentSuspense.pendingBranch && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved && instance.suspenseId === parentSuspense.pendingId) {
      parentSuspense.deps--;
      if (parentSuspense.deps === 0) {
        parentSuspense.resolve();
      }
    }
    if (true) {
      devtoolsComponentRemoved(instance);
    }
  };
  const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, optimized = false, start = 0) => {
    for (let i = start; i < children.length; i++) {
      unmount(children[i], parentComponent, parentSuspense, doRemove, optimized);
    }
  };
  const getNextHostNode = (vnode) => {
    if (vnode.shapeFlag & 6) {
      return getNextHostNode(vnode.component.subTree);
    }
    if (vnode.shapeFlag & 128) {
      return vnode.suspense.next();
    }
    return hostNextSibling(vnode.anchor || vnode.el);
  };
  const render2 = (vnode, container, isSVG) => {
    if (vnode == null) {
      if (container._vnode) {
        unmount(container._vnode, null, null, true);
      }
    } else {
      patch(container._vnode || null, vnode, container, null, null, null, isSVG);
    }
    flushPostFlushCbs();
    container._vnode = vnode;
  };
  const internals = {
    p: patch,
    um: unmount,
    m: move,
    r: remove2,
    mt: mountComponent,
    mc: mountChildren,
    pc: patchChildren,
    pbc: patchBlockChildren,
    n: getNextHostNode,
    o: options
  };
  let hydrate2;
  let hydrateNode;
  if (createHydrationFns) {
    [hydrate2, hydrateNode] = createHydrationFns(internals);
  }
  return {
    render: render2,
    hydrate: hydrate2,
    createApp: createAppAPI(render2, hydrate2)
  };
}
function setRef(rawRef, oldRawRef, parentSuspense, vnode, isUnmount = false) {
  if (isArray(rawRef)) {
    rawRef.forEach((r, i) => setRef(r, oldRawRef && (isArray(oldRawRef) ? oldRawRef[i] : oldRawRef), parentSuspense, vnode, isUnmount));
    return;
  }
  if (isAsyncWrapper(vnode) && !isUnmount) {
    return;
  }
  const refValue = vnode.shapeFlag & 4 ? getExposeProxy(vnode.component) || vnode.component.proxy : vnode.el;
  const value = isUnmount ? null : refValue;
  const { i: owner, r: ref2 } = rawRef;
  if (!owner) {
    warn2(`Missing ref owner context. ref cannot be used on hoisted vnodes. A vnode with ref must be created inside the render function.`);
    return;
  }
  const oldRef = oldRawRef && oldRawRef.r;
  const refs = owner.refs === EMPTY_OBJ ? owner.refs = {} : owner.refs;
  const setupState = owner.setupState;
  if (oldRef != null && oldRef !== ref2) {
    if (isString(oldRef)) {
      refs[oldRef] = null;
      if (hasOwn(setupState, oldRef)) {
        setupState[oldRef] = null;
      }
    } else if (isRef(oldRef)) {
      oldRef.value = null;
    }
  }
  if (isString(ref2)) {
    const doSet = () => {
      {
        refs[ref2] = value;
      }
      if (hasOwn(setupState, ref2)) {
        setupState[ref2] = value;
      }
    };
    if (value) {
      doSet.id = -1;
      queuePostRenderEffect(doSet, parentSuspense);
    } else {
      doSet();
    }
  } else if (isRef(ref2)) {
    const doSet = () => {
      ref2.value = value;
    };
    if (value) {
      doSet.id = -1;
      queuePostRenderEffect(doSet, parentSuspense);
    } else {
      doSet();
    }
  } else if (isFunction(ref2)) {
    callWithErrorHandling(ref2, owner, 12, [value, refs]);
  } else if (true) {
    warn2("Invalid template ref type:", value, `(${typeof value})`);
  }
}
function invokeVNodeHook(hook, instance, vnode, prevVNode = null) {
  callWithAsyncErrorHandling(hook, instance, 7, [
    vnode,
    prevVNode
  ]);
}
function traverseStaticChildren(n1, n2, shallow = false) {
  const ch1 = n1.children;
  const ch2 = n2.children;
  if (isArray(ch1) && isArray(ch2)) {
    for (let i = 0; i < ch1.length; i++) {
      const c1 = ch1[i];
      let c2 = ch2[i];
      if (c2.shapeFlag & 1 && !c2.dynamicChildren) {
        if (c2.patchFlag <= 0 || c2.patchFlag === 32) {
          c2 = ch2[i] = cloneIfMounted(ch2[i]);
          c2.el = c1.el;
        }
        if (!shallow)
          traverseStaticChildren(c1, c2);
      }
      if (c2.type === Comment$1 && !c2.el) {
        c2.el = c1.el;
      }
    }
  }
}
function getSequence(arr) {
  const p2 = arr.slice();
  const result = [0];
  let i, j, u, v, c;
  const len = arr.length;
  for (i = 0; i < len; i++) {
    const arrI = arr[i];
    if (arrI !== 0) {
      j = result[result.length - 1];
      if (arr[j] < arrI) {
        p2[i] = j;
        result.push(i);
        continue;
      }
      u = 0;
      v = result.length - 1;
      while (u < v) {
        c = u + v >> 1;
        if (arr[result[c]] < arrI) {
          u = c + 1;
        } else {
          v = c;
        }
      }
      if (arrI < arr[result[u]]) {
        if (u > 0) {
          p2[i] = result[u - 1];
        }
        result[u] = i;
      }
    }
  }
  u = result.length;
  v = result[u - 1];
  while (u-- > 0) {
    result[u] = v;
    v = p2[v];
  }
  return result;
}
function moveTeleport(vnode, container, parentAnchor, { o: { insert }, m: move }, moveType = 2) {
  if (moveType === 0) {
    insert(vnode.targetAnchor, container, parentAnchor);
  }
  const { el, anchor, shapeFlag, children, props } = vnode;
  const isReorder = moveType === 2;
  if (isReorder) {
    insert(el, container, parentAnchor);
  }
  if (!isReorder || isTeleportDisabled(props)) {
    if (shapeFlag & 16) {
      for (let i = 0; i < children.length; i++) {
        move(
          children[i],
          container,
          parentAnchor,
          2
          /* REORDER */
        );
      }
    }
  }
  if (isReorder) {
    insert(anchor, container, parentAnchor);
  }
}
function hydrateTeleport(node, vnode, parentComponent, parentSuspense, slotScopeIds, optimized, { o: { nextSibling, parentNode, querySelector } }, hydrateChildren) {
  const target = vnode.target = resolveTarget(vnode.props, querySelector);
  if (target) {
    const targetNode = target._lpa || target.firstChild;
    if (vnode.shapeFlag & 16) {
      if (isTeleportDisabled(vnode.props)) {
        vnode.anchor = hydrateChildren(nextSibling(node), vnode, parentNode(node), parentComponent, parentSuspense, slotScopeIds, optimized);
        vnode.targetAnchor = targetNode;
      } else {
        vnode.anchor = nextSibling(node);
        vnode.targetAnchor = hydrateChildren(targetNode, vnode, target, parentComponent, parentSuspense, slotScopeIds, optimized);
      }
      target._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);
    }
  }
  return vnode.anchor && nextSibling(vnode.anchor);
}
function resolveComponent(name, maybeSelfReference) {
  return resolveAsset(COMPONENTS, name, true, maybeSelfReference) || name;
}
function resolveDynamicComponent(component) {
  if (isString(component)) {
    return resolveAsset(COMPONENTS, component, false) || component;
  } else {
    return component || NULL_DYNAMIC_COMPONENT;
  }
}
function resolveDirective(name) {
  return resolveAsset(DIRECTIVES, name);
}
function resolveAsset(type, name, warnMissing = true, maybeSelfReference = false) {
  const instance = currentRenderingInstance || currentInstance;
  if (instance) {
    const Component = instance.type;
    if (type === COMPONENTS) {
      const selfName = getComponentName(Component);
      if (selfName && (selfName === name || selfName === camelize(name) || selfName === capitalize(camelize(name)))) {
        return Component;
      }
    }
    const res = (
      // local registration
      // check instance[type] first which is resolved for options API
      resolve(instance[type] || Component[type], name) || // global registration
      resolve(instance.appContext[type], name)
    );
    if (!res && maybeSelfReference) {
      return Component;
    }
    if (warnMissing && !res) {
      warn2(`Failed to resolve ${type.slice(0, -1)}: ${name}`);
    }
    return res;
  } else if (true) {
    warn2(`resolve${capitalize(type.slice(0, -1))} can only be used in render() or setup().`);
  }
}
function resolve(registry, name) {
  return registry && (registry[name] || registry[camelize(name)] || registry[capitalize(camelize(name))]);
}
function openBlock(disableTracking = false) {
  blockStack.push(currentBlock = disableTracking ? null : []);
}
function closeBlock() {
  blockStack.pop();
  currentBlock = blockStack[blockStack.length - 1] || null;
}
function setBlockTracking(value) {
  isBlockTreeEnabled += value;
}
function setupBlock(vnode) {
  vnode.dynamicChildren = isBlockTreeEnabled > 0 ? currentBlock || EMPTY_ARR : null;
  closeBlock();
  if (isBlockTreeEnabled > 0 && currentBlock) {
    currentBlock.push(vnode);
  }
  return vnode;
}
function createElementBlock(type, props, children, patchFlag, dynamicProps, shapeFlag) {
  return setupBlock(createBaseVNode(
    type,
    props,
    children,
    patchFlag,
    dynamicProps,
    shapeFlag,
    true
    /* isBlock */
  ));
}
function createBlock(type, props, children, patchFlag, dynamicProps) {
  return setupBlock(createVNode(
    type,
    props,
    children,
    patchFlag,
    dynamicProps,
    true
    /* isBlock: prevent a block from tracking itself */
  ));
}
function isVNode(value) {
  return value ? value.__v_isVNode === true : false;
}
function isSameVNodeType(n1, n2) {
  if (n2.shapeFlag & 6 && hmrDirtyComponents.has(n2.type)) {
    return false;
  }
  return n1.type === n2.type && n1.key === n2.key;
}
function transformVNodeArgs(transformer) {
  vnodeArgsTransformer = transformer;
}
function createBaseVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, shapeFlag = type === Fragment ? 0 : 1, isBlockNode = false, needFullChildrenNormalization = false) {
  const vnode = {
    __v_isVNode: true,
    __v_skip: true,
    type,
    props,
    key: props && normalizeKey(props),
    ref: props && normalizeRef(props),
    scopeId: currentScopeId,
    slotScopeIds: null,
    children,
    component: null,
    suspense: null,
    ssContent: null,
    ssFallback: null,
    dirs: null,
    transition: null,
    el: null,
    anchor: null,
    target: null,
    targetAnchor: null,
    staticCount: 0,
    shapeFlag,
    patchFlag,
    dynamicProps,
    dynamicChildren: null,
    appContext: null
  };
  if (needFullChildrenNormalization) {
    normalizeChildren(vnode, children);
    if (shapeFlag & 128) {
      type.normalize(vnode);
    }
  } else if (children) {
    vnode.shapeFlag |= isString(children) ? 8 : 16;
  }
  if (vnode.key !== vnode.key) {
    warn2(`VNode created with invalid key (NaN). VNode type:`, vnode.type);
  }
  if (isBlockTreeEnabled > 0 && // avoid a block node from tracking itself
  !isBlockNode && // has current parent block
  currentBlock && // presence of a patch flag indicates this node needs patching on updates.
  // component nodes also should always be patched, because even if the
  // component doesn't need to update, it needs to persist the instance on to
  // the next vnode so that it can be properly unmounted later.
  (vnode.patchFlag > 0 || shapeFlag & 6) && // the EVENTS flag is only for hydration and if it is the only flag, the
  // vnode should not be considered dynamic due to handler caching.
  vnode.patchFlag !== 32) {
    currentBlock.push(vnode);
  }
  return vnode;
}
function _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {
  if (!type || type === NULL_DYNAMIC_COMPONENT) {
    if (!type) {
      warn2(`Invalid vnode type when creating vnode: ${type}.`);
    }
    type = Comment$1;
  }
  if (isVNode(type)) {
    const cloned = cloneVNode(
      type,
      props,
      true
      /* mergeRef: true */
    );
    if (children) {
      normalizeChildren(cloned, children);
    }
    return cloned;
  }
  if (isClassComponent(type)) {
    type = type.__vccOpts;
  }
  if (props) {
    props = guardReactiveProps(props);
    let { class: klass, style } = props;
    if (klass && !isString(klass)) {
      props.class = normalizeClass(klass);
    }
    if (isObject(style)) {
      if (isProxy(style) && !isArray(style)) {
        style = extend({}, style);
      }
      props.style = normalizeStyle(style);
    }
  }
  const shapeFlag = isString(type) ? 1 : isSuspense(type) ? 128 : isTeleport(type) ? 64 : isObject(type) ? 4 : isFunction(type) ? 2 : 0;
  if (shapeFlag & 4 && isProxy(type)) {
    type = toRaw(type);
    warn2(`Vue received a Component which was made a reactive object. This can lead to unnecessary performance overhead, and should be avoided by marking the component with \`markRaw\` or using \`shallowRef\` instead of \`ref\`.`, `
Component that was made reactive: `, type);
  }
  return createBaseVNode(type, props, children, patchFlag, dynamicProps, shapeFlag, isBlockNode, true);
}
function guardReactiveProps(props) {
  if (!props)
    return null;
  return isProxy(props) || InternalObjectKey in props ? extend({}, props) : props;
}
function cloneVNode(vnode, extraProps, mergeRef = false) {
  const { props, ref: ref2, patchFlag, children } = vnode;
  const mergedProps = extraProps ? mergeProps(props || {}, extraProps) : props;
  const cloned = {
    __v_isVNode: true,
    __v_skip: true,
    type: vnode.type,
    props: mergedProps,
    key: mergedProps && normalizeKey(mergedProps),
    ref: extraProps && extraProps.ref ? (
      // #2078 in the case of <component :is="vnode" ref="extra"/>
      // if the vnode itself already has a ref, cloneVNode will need to merge
      // the refs so the single vnode can be set on multiple refs
      mergeRef && ref2 ? isArray(ref2) ? ref2.concat(normalizeRef(extraProps)) : [ref2, normalizeRef(extraProps)] : normalizeRef(extraProps)
    ) : ref2,
    scopeId: vnode.scopeId,
    slotScopeIds: vnode.slotScopeIds,
    children: patchFlag === -1 && isArray(children) ? children.map(deepCloneVNode) : children,
    target: vnode.target,
    targetAnchor: vnode.targetAnchor,
    staticCount: vnode.staticCount,
    shapeFlag: vnode.shapeFlag,
    // if the vnode is cloned with extra props, we can no longer assume its
    // existing patch flag to be reliable and need to add the FULL_PROPS flag.
    // note: perserve flag for fragments since they use the flag for children
    // fast paths only.
    patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 ? 16 : patchFlag | 16 : patchFlag,
    dynamicProps: vnode.dynamicProps,
    dynamicChildren: vnode.dynamicChildren,
    appContext: vnode.appContext,
    dirs: vnode.dirs,
    transition: vnode.transition,
    // These should technically only be non-null on mounted VNodes. However,
    // they *should* be copied for kept-alive vnodes. So we just always copy
    // them since them being non-null during a mount doesn't affect the logic as
    // they will simply be overwritten.
    component: vnode.component,
    suspense: vnode.suspense,
    ssContent: vnode.ssContent && cloneVNode(vnode.ssContent),
    ssFallback: vnode.ssFallback && cloneVNode(vnode.ssFallback),
    el: vnode.el,
    anchor: vnode.anchor
  };
  return cloned;
}
function deepCloneVNode(vnode) {
  const cloned = cloneVNode(vnode);
  if (isArray(vnode.children)) {
    cloned.children = vnode.children.map(deepCloneVNode);
  }
  return cloned;
}
function createTextVNode(text = " ", flag = 0) {
  return createVNode(Text, null, text, flag);
}
function createStaticVNode(content, numberOfNodes) {
  const vnode = createVNode(Static, null, content);
  vnode.staticCount = numberOfNodes;
  return vnode;
}
function createCommentVNode(text = "", asBlock = false) {
  return asBlock ? (openBlock(), createBlock(Comment$1, null, text)) : createVNode(Comment$1, null, text);
}
function normalizeVNode(child) {
  if (child == null || typeof child === "boolean") {
    return createVNode(Comment$1);
  } else if (isArray(child)) {
    return createVNode(
      Fragment,
      null,
      // #3666, avoid reference pollution when reusing vnode
      child.slice()
    );
  } else if (typeof child === "object") {
    return cloneIfMounted(child);
  } else {
    return createVNode(Text, null, String(child));
  }
}
function cloneIfMounted(child) {
  return child.el === null || child.memo ? child : cloneVNode(child);
}
function normalizeChildren(vnode, children) {
  let type = 0;
  const { shapeFlag } = vnode;
  if (children == null) {
    children = null;
  } else if (isArray(children)) {
    type = 16;
  } else if (typeof children === "object") {
    if (shapeFlag & 1 || shapeFlag & 64) {
      const slot = children.default;
      if (slot) {
        slot._c && (slot._d = false);
        normalizeChildren(vnode, slot());
        slot._c && (slot._d = true);
      }
      return;
    } else {
      type = 32;
      const slotFlag = children._;
      if (!slotFlag && !(InternalObjectKey in children)) {
        children._ctx = currentRenderingInstance;
      } else if (slotFlag === 3 && currentRenderingInstance) {
        if (currentRenderingInstance.slots._ === 1) {
          children._ = 1;
        } else {
          children._ = 2;
          vnode.patchFlag |= 1024;
        }
      }
    }
  } else if (isFunction(children)) {
    children = { default: children, _ctx: currentRenderingInstance };
    type = 32;
  } else {
    children = String(children);
    if (shapeFlag & 64) {
      type = 16;
      children = [createTextVNode(children)];
    } else {
      type = 8;
    }
  }
  vnode.children = children;
  vnode.shapeFlag |= type;
}
function mergeProps(...args) {
  const ret = {};
  for (let i = 0; i < args.length; i++) {
    const toMerge = args[i];
    for (const key in toMerge) {
      if (key === "class") {
        if (ret.class !== toMerge.class) {
          ret.class = normalizeClass([ret.class, toMerge.class]);
        }
      } else if (key === "style") {
        ret.style = normalizeStyle([ret.style, toMerge.style]);
      } else if (isOn(key)) {
        const existing = ret[key];
        const incoming = toMerge[key];
        if (existing !== incoming) {
          ret[key] = existing ? [].concat(existing, incoming) : incoming;
        }
      } else if (key !== "") {
        ret[key] = toMerge[key];
      }
    }
  }
  return ret;
}
function renderList(source, renderItem, cache, index) {
  let ret;
  const cached = cache && cache[index];
  if (isArray(source) || isString(source)) {
    ret = new Array(source.length);
    for (let i = 0, l = source.length; i < l; i++) {
      ret[i] = renderItem(source[i], i, void 0, cached && cached[i]);
    }
  } else if (typeof source === "number") {
    if (!Number.isInteger(source)) {
      warn2(`The v-for range expect an integer value but got ${source}.`);
      return [];
    }
    ret = new Array(source);
    for (let i = 0; i < source; i++) {
      ret[i] = renderItem(i + 1, i, void 0, cached && cached[i]);
    }
  } else if (isObject(source)) {
    if (source[Symbol.iterator]) {
      ret = Array.from(source, (item, i) => renderItem(item, i, void 0, cached && cached[i]));
    } else {
      const keys = Object.keys(source);
      ret = new Array(keys.length);
      for (let i = 0, l = keys.length; i < l; i++) {
        const key = keys[i];
        ret[i] = renderItem(source[key], key, i, cached && cached[i]);
      }
    }
  } else {
    ret = [];
  }
  if (cache) {
    cache[index] = ret;
  }
  return ret;
}
function createSlots(slots, dynamicSlots) {
  for (let i = 0; i < dynamicSlots.length; i++) {
    const slot = dynamicSlots[i];
    if (isArray(slot)) {
      for (let j = 0; j < slot.length; j++) {
        slots[slot[j].name] = slot[j].fn;
      }
    } else if (slot) {
      slots[slot.name] = slot.fn;
    }
  }
  return slots;
}
function renderSlot(slots, name, props = {}, fallback, noSlotted) {
  if (currentRenderingInstance.isCE) {
    return createVNode("slot", name === "default" ? null : { name }, fallback && fallback());
  }
  let slot = slots[name];
  if (slot && slot.length > 1) {
    warn2(`SSR-optimized slot function detected in a non-SSR-optimized render function. You need to mark this component with $dynamic-slots in the parent template.`);
    slot = () => [];
  }
  if (slot && slot._c) {
    slot._d = false;
  }
  openBlock();
  const validSlotContent = slot && ensureValidVNode(slot(props));
  const rendered = createBlock(
    Fragment,
    { key: props.key || `_${name}` },
    validSlotContent || (fallback ? fallback() : []),
    validSlotContent && slots._ === 1 ? 64 : -2
    /* BAIL */
  );
  if (!noSlotted && rendered.scopeId) {
    rendered.slotScopeIds = [rendered.scopeId + "-s"];
  }
  if (slot && slot._c) {
    slot._d = true;
  }
  return rendered;
}
function ensureValidVNode(vnodes) {
  return vnodes.some((child) => {
    if (!isVNode(child))
      return true;
    if (child.type === Comment$1)
      return false;
    if (child.type === Fragment && !ensureValidVNode(child.children))
      return false;
    return true;
  }) ? vnodes : null;
}
function toHandlers(obj) {
  const ret = {};
  if (!isObject(obj)) {
    warn2(`v-on with no argument expects an object value.`);
    return ret;
  }
  for (const key in obj) {
    ret[toHandlerKey(key)] = obj[key];
  }
  return ret;
}
function createDevRenderContext(instance) {
  const target = {};
  Object.defineProperty(target, `_`, {
    configurable: true,
    enumerable: false,
    get: () => instance
  });
  Object.keys(publicPropertiesMap).forEach((key) => {
    Object.defineProperty(target, key, {
      configurable: true,
      enumerable: false,
      get: () => publicPropertiesMap[key](instance),
      // intercepted by the proxy so no need for implementation,
      // but needed to prevent set errors
      set: NOOP
    });
  });
  return target;
}
function exposePropsOnRenderContext(instance) {
  const { ctx, propsOptions: [propsOptions] } = instance;
  if (propsOptions) {
    Object.keys(propsOptions).forEach((key) => {
      Object.defineProperty(ctx, key, {
        enumerable: true,
        configurable: true,
        get: () => instance.props[key],
        set: NOOP
      });
    });
  }
}
function exposeSetupStateOnRenderContext(instance) {
  const { ctx, setupState } = instance;
  Object.keys(toRaw(setupState)).forEach((key) => {
    if (!setupState.__isScriptSetup && (key[0] === "$" || key[0] === "_")) {
      warn2(`setup() return property ${JSON.stringify(key)} should not start with "$" or "_" which are reserved prefixes for Vue internals.`);
      return;
    }
    Object.defineProperty(ctx, key, {
      enumerable: true,
      configurable: true,
      get: () => setupState[key],
      set: NOOP
    });
  });
}
function createComponentInstance(vnode, parent, suspense) {
  const type = vnode.type;
  const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;
  const instance = {
    uid: uid$1++,
    vnode,
    type,
    parent,
    appContext,
    root: null,
    next: null,
    subTree: null,
    update: null,
    scope: new EffectScope(
      true
      /* detached */
    ),
    render: null,
    proxy: null,
    exposed: null,
    exposeProxy: null,
    withProxy: null,
    provides: parent ? parent.provides : Object.create(appContext.provides),
    accessCache: null,
    renderCache: [],
    // local resovled assets
    components: null,
    directives: null,
    // resolved props and emits options
    propsOptions: normalizePropsOptions(type, appContext),
    emitsOptions: normalizeEmitsOptions(type, appContext),
    // emit
    emit: null,
    emitted: null,
    // props default value
    propsDefaults: EMPTY_OBJ,
    // inheritAttrs
    inheritAttrs: type.inheritAttrs,
    // state
    ctx: EMPTY_OBJ,
    data: EMPTY_OBJ,
    props: EMPTY_OBJ,
    attrs: EMPTY_OBJ,
    slots: EMPTY_OBJ,
    refs: EMPTY_OBJ,
    setupState: EMPTY_OBJ,
    setupContext: null,
    // suspense related
    suspense,
    suspenseId: suspense ? suspense.pendingId : 0,
    asyncDep: null,
    asyncResolved: false,
    // lifecycle hooks
    // not using enums here because it results in computed properties
    isMounted: false,
    isUnmounted: false,
    isDeactivated: false,
    bc: null,
    c: null,
    bm: null,
    m: null,
    bu: null,
    u: null,
    um: null,
    bum: null,
    da: null,
    a: null,
    rtg: null,
    rtc: null,
    ec: null,
    sp: null
  };
  if (true) {
    instance.ctx = createDevRenderContext(instance);
  } else {
    instance.ctx = { _: instance };
  }
  instance.root = parent ? parent.root : instance;
  instance.emit = emit.bind(null, instance);
  if (vnode.ce) {
    vnode.ce(instance);
  }
  return instance;
}
function validateComponentName(name, config) {
  const appIsNativeTag = config.isNativeTag || NO;
  if (isBuiltInTag(name) || appIsNativeTag(name)) {
    warn2("Do not use built-in or reserved HTML elements as component id: " + name);
  }
}
function isStatefulComponent(instance) {
  return instance.vnode.shapeFlag & 4;
}
function setupComponent(instance, isSSR = false) {
  isInSSRComponentSetup = isSSR;
  const { props, children } = instance.vnode;
  const isStateful = isStatefulComponent(instance);
  initProps(instance, props, isStateful, isSSR);
  initSlots(instance, children);
  const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : void 0;
  isInSSRComponentSetup = false;
  return setupResult;
}
function setupStatefulComponent(instance, isSSR) {
  const Component = instance.type;
  if (true) {
    if (Component.name) {
      validateComponentName(Component.name, instance.appContext.config);
    }
    if (Component.components) {
      const names = Object.keys(Component.components);
      for (let i = 0; i < names.length; i++) {
        validateComponentName(names[i], instance.appContext.config);
      }
    }
    if (Component.directives) {
      const names = Object.keys(Component.directives);
      for (let i = 0; i < names.length; i++) {
        validateDirectiveName(names[i]);
      }
    }
    if (Component.compilerOptions && isRuntimeOnly()) {
      warn2(`"compilerOptions" is only supported when using a build of Vue that includes the runtime compiler. Since you are using a runtime-only build, the options should be passed via your build tool config instead.`);
    }
  }
  instance.accessCache = /* @__PURE__ */ Object.create(null);
  instance.proxy = markRaw(new Proxy(instance.ctx, PublicInstanceProxyHandlers));
  if (true) {
    exposePropsOnRenderContext(instance);
  }
  const { setup } = Component;
  if (setup) {
    const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;
    setCurrentInstance(instance);
    pauseTracking();
    const setupResult = callWithErrorHandling(setup, instance, 0, [true ? shallowReadonly(instance.props) : instance.props, setupContext]);
    resetTracking();
    unsetCurrentInstance();
    if (isPromise(setupResult)) {
      setupResult.then(unsetCurrentInstance, unsetCurrentInstance);
      if (isSSR) {
        return setupResult.then((resolvedResult) => {
          handleSetupResult(instance, resolvedResult, isSSR);
        }).catch((e) => {
          handleError(
            e,
            instance,
            0
            /* SETUP_FUNCTION */
          );
        });
      } else {
        instance.asyncDep = setupResult;
      }
    } else {
      handleSetupResult(instance, setupResult, isSSR);
    }
  } else {
    finishComponentSetup(instance, isSSR);
  }
}
function handleSetupResult(instance, setupResult, isSSR) {
  if (isFunction(setupResult)) {
    {
      instance.render = setupResult;
    }
  } else if (isObject(setupResult)) {
    if (isVNode(setupResult)) {
      warn2(`setup() should not return VNodes directly - return a render function instead.`);
    }
    if (true) {
      instance.devtoolsRawSetupState = setupResult;
    }
    instance.setupState = proxyRefs(setupResult);
    if (true) {
      exposeSetupStateOnRenderContext(instance);
    }
  } else if (setupResult !== void 0) {
    warn2(`setup() should return an object. Received: ${setupResult === null ? "null" : typeof setupResult}`);
  }
  finishComponentSetup(instance, isSSR);
}
function registerRuntimeCompiler(_compile) {
  compile = _compile;
  installWithProxy = (i) => {
    if (i.render._rc) {
      i.withProxy = new Proxy(i.ctx, RuntimeCompiledPublicInstanceProxyHandlers);
    }
  };
}
function finishComponentSetup(instance, isSSR, skipOptions) {
  const Component = instance.type;
  if (!instance.render) {
    if (compile && !Component.render) {
      const template = Component.template;
      if (template) {
        if (true) {
          startMeasure(instance, `compile`);
        }
        const { isCustomElement, compilerOptions } = instance.appContext.config;
        const { delimiters, compilerOptions: componentCompilerOptions } = Component;
        const finalCompilerOptions = extend(extend({
          isCustomElement,
          delimiters
        }, compilerOptions), componentCompilerOptions);
        Component.render = compile(template, finalCompilerOptions);
        if (true) {
          endMeasure(instance, `compile`);
        }
      }
    }
    instance.render = Component.render || NOOP;
    if (installWithProxy) {
      installWithProxy(instance);
    }
  }
  if (__VUE_OPTIONS_API__ && true) {
    setCurrentInstance(instance);
    pauseTracking();
    applyOptions(instance);
    resetTracking();
    unsetCurrentInstance();
  }
  if (!Component.render && instance.render === NOOP && !isSSR) {
    if (!compile && Component.template) {
      warn2(
        `Component provided template option but runtime compilation is not supported in this build of Vue. Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`
        /* should not happen */
      );
    } else {
      warn2(`Component is missing template or render function.`);
    }
  }
}
function createAttrsProxy(instance) {
  return new Proxy(instance.attrs, true ? {
    get(target, key) {
      markAttrsAccessed();
      track(instance, "get", "$attrs");
      return target[key];
    },
    set() {
      warn2(`setupContext.attrs is readonly.`);
      return false;
    },
    deleteProperty() {
      warn2(`setupContext.attrs is readonly.`);
      return false;
    }
  } : {
    get(target, key) {
      track(instance, "get", "$attrs");
      return target[key];
    }
  });
}
function createSetupContext(instance) {
  const expose = (exposed) => {
    if (instance.exposed) {
      warn2(`expose() should be called only once per setup().`);
    }
    instance.exposed = exposed || {};
  };
  let attrs;
  if (true) {
    return Object.freeze({
      get attrs() {
        return attrs || (attrs = createAttrsProxy(instance));
      },
      get slots() {
        return shallowReadonly(instance.slots);
      },
      get emit() {
        return (event, ...args) => instance.emit(event, ...args);
      },
      expose
    });
  } else {
    return {
      get attrs() {
        return attrs || (attrs = createAttrsProxy(instance));
      },
      slots: instance.slots,
      emit: instance.emit,
      expose
    };
  }
}
function getExposeProxy(instance) {
  if (instance.exposed) {
    return instance.exposeProxy || (instance.exposeProxy = new Proxy(proxyRefs(markRaw(instance.exposed)), {
      get(target, key) {
        if (key in target) {
          return target[key];
        } else if (key in publicPropertiesMap) {
          return publicPropertiesMap[key](instance);
        }
      }
    }));
  }
}
function getComponentName(Component) {
  return isFunction(Component) ? Component.displayName || Component.name : Component.name;
}
function formatComponentName(instance, Component, isRoot = false) {
  let name = getComponentName(Component);
  if (!name && Component.__file) {
    const match = Component.__file.match(/([^/\\]+)\.\w+$/);
    if (match) {
      name = match[1];
    }
  }
  if (!name && instance && instance.parent) {
    const inferFromRegistry = (registry) => {
      for (const key in registry) {
        if (registry[key] === Component) {
          return key;
        }
      }
    };
    name = inferFromRegistry(instance.components || instance.parent.type.components) || inferFromRegistry(instance.appContext.components);
  }
  return name ? classify(name) : isRoot ? `App` : `Anonymous`;
}
function isClassComponent(value) {
  return isFunction(value) && "__vccOpts" in value;
}
function pushWarningContext(vnode) {
  stack.push(vnode);
}
function popWarningContext() {
  stack.pop();
}
function warn2(msg, ...args) {
  pauseTracking();
  const instance = stack.length ? stack[stack.length - 1].component : null;
  const appWarnHandler = instance && instance.appContext.config.warnHandler;
  const trace = getComponentTrace();
  if (appWarnHandler) {
    callWithErrorHandling(appWarnHandler, instance, 11, [
      msg + args.join(""),
      instance && instance.proxy,
      trace.map(({ vnode }) => `at <${formatComponentName(instance, vnode.type)}>`).join("\n"),
      trace
    ]);
  } else {
    const warnArgs = [`[Vue warn]: ${msg}`, ...args];
    if (trace.length && // avoid spamming console during tests
    true) {
      warnArgs.push(`
`, ...formatTrace(trace));
    }
    console.warn(...warnArgs);
  }
  resetTracking();
}
function getComponentTrace() {
  let currentVNode = stack[stack.length - 1];
  if (!currentVNode) {
    return [];
  }
  const normalizedStack = [];
  while (currentVNode) {
    const last = normalizedStack[0];
    if (last && last.vnode === currentVNode) {
      last.recurseCount++;
    } else {
      normalizedStack.push({
        vnode: currentVNode,
        recurseCount: 0
      });
    }
    const parentInstance = currentVNode.component && currentVNode.component.parent;
    currentVNode = parentInstance && parentInstance.vnode;
  }
  return normalizedStack;
}
function formatTrace(trace) {
  const logs = [];
  trace.forEach((entry, i) => {
    logs.push(...i === 0 ? [] : [`
`], ...formatTraceEntry(entry));
  });
  return logs;
}
function formatTraceEntry({ vnode, recurseCount }) {
  const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;
  const isRoot = vnode.component ? vnode.component.parent == null : false;
  const open = ` at <${formatComponentName(vnode.component, vnode.type, isRoot)}`;
  const close = `>` + postfix;
  return vnode.props ? [open, ...formatProps(vnode.props), close] : [open + close];
}
function formatProps(props) {
  const res = [];
  const keys = Object.keys(props);
  keys.slice(0, 3).forEach((key) => {
    res.push(...formatProp(key, props[key]));
  });
  if (keys.length > 3) {
    res.push(` ...`);
  }
  return res;
}
function formatProp(key, value, raw) {
  if (isString(value)) {
    value = JSON.stringify(value);
    return raw ? value : [`${key}=${value}`];
  } else if (typeof value === "number" || typeof value === "boolean" || value == null) {
    return raw ? value : [`${key}=${value}`];
  } else if (isRef(value)) {
    value = formatProp(key, toRaw(value.value), true);
    return raw ? value : [`${key}=Ref<`, value, `>`];
  } else if (isFunction(value)) {
    return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];
  } else {
    value = toRaw(value);
    return raw ? value : [`${key}=`, value];
  }
}
function callWithErrorHandling(fn, instance, type, args) {
  let res;
  try {
    res = args ? fn(...args) : fn();
  } catch (err) {
    handleError(err, instance, type);
  }
  return res;
}
function callWithAsyncErrorHandling(fn, instance, type, args) {
  if (isFunction(fn)) {
    const res = callWithErrorHandling(fn, instance, type, args);
    if (res && isPromise(res)) {
      res.catch((err) => {
        handleError(err, instance, type);
      });
    }
    return res;
  }
  const values = [];
  for (let i = 0; i < fn.length; i++) {
    values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));
  }
  return values;
}
function handleError(err, instance, type, throwInDev = true) {
  const contextVNode = instance ? instance.vnode : null;
  if (instance) {
    let cur = instance.parent;
    const exposedInstance = instance.proxy;
    const errorInfo = true ? ErrorTypeStrings[type] : type;
    while (cur) {
      const errorCapturedHooks = cur.ec;
      if (errorCapturedHooks) {
        for (let i = 0; i < errorCapturedHooks.length; i++) {
          if (errorCapturedHooks[i](err, exposedInstance, errorInfo) === false) {
            return;
          }
        }
      }
      cur = cur.parent;
    }
    const appErrorHandler = instance.appContext.config.errorHandler;
    if (appErrorHandler) {
      callWithErrorHandling(appErrorHandler, null, 10, [err, exposedInstance, errorInfo]);
      return;
    }
  }
  logError(err, type, contextVNode, throwInDev);
}
function logError(err, type, contextVNode, throwInDev = true) {
  if (true) {
    const info = ErrorTypeStrings[type];
    if (contextVNode) {
      pushWarningContext(contextVNode);
    }
    warn2(`Unhandled error${info ? ` during execution of ${info}` : ``}`);
    if (contextVNode) {
      popWarningContext();
    }
    if (throwInDev) {
      throw err;
    } else {
      console.error(err);
    }
  } else {
    console.error(err);
  }
}
function nextTick(fn) {
  const p2 = currentFlushPromise || resolvedPromise;
  return fn ? p2.then(this ? fn.bind(this) : fn) : p2;
}
function findInsertionIndex(id) {
  let start = flushIndex + 1;
  let end = queue.length;
  while (start < end) {
    const middle = start + end >>> 1;
    const middleJobId = getId(queue[middle]);
    middleJobId < id ? start = middle + 1 : end = middle;
  }
  return start;
}
function queueJob(job) {
  if ((!queue.length || !queue.includes(job, isFlushing && job.allowRecurse ? flushIndex + 1 : flushIndex)) && job !== currentPreFlushParentJob) {
    if (job.id == null) {
      queue.push(job);
    } else {
      queue.splice(findInsertionIndex(job.id), 0, job);
    }
    queueFlush();
  }
}
function queueFlush() {
  if (!isFlushing && !isFlushPending) {
    isFlushPending = true;
    currentFlushPromise = resolvedPromise.then(flushJobs);
  }
}
function invalidateJob(job) {
  const i = queue.indexOf(job);
  if (i > flushIndex) {
    queue.splice(i, 1);
  }
}
function queueCb(cb, activeQueue, pendingQueue, index) {
  if (!isArray(cb)) {
    if (!activeQueue || !activeQueue.includes(cb, cb.allowRecurse ? index + 1 : index)) {
      pendingQueue.push(cb);
    }
  } else {
    pendingQueue.push(...cb);
  }
  queueFlush();
}
function queuePreFlushCb(cb) {
  queueCb(cb, activePreFlushCbs, pendingPreFlushCbs, preFlushIndex);
}
function queuePostFlushCb(cb) {
  queueCb(cb, activePostFlushCbs, pendingPostFlushCbs, postFlushIndex);
}
function flushPreFlushCbs(seen, parentJob = null) {
  if (pendingPreFlushCbs.length) {
    currentPreFlushParentJob = parentJob;
    activePreFlushCbs = [...new Set(pendingPreFlushCbs)];
    pendingPreFlushCbs.length = 0;
    if (true) {
      seen = seen || /* @__PURE__ */ new Map();
    }
    for (preFlushIndex = 0; preFlushIndex < activePreFlushCbs.length; preFlushIndex++) {
      if (checkRecursiveUpdates(seen, activePreFlushCbs[preFlushIndex])) {
        continue;
      }
      activePreFlushCbs[preFlushIndex]();
    }
    activePreFlushCbs = null;
    preFlushIndex = 0;
    currentPreFlushParentJob = null;
    flushPreFlushCbs(seen, parentJob);
  }
}
function flushPostFlushCbs(seen) {
  if (pendingPostFlushCbs.length) {
    const deduped = [...new Set(pendingPostFlushCbs)];
    pendingPostFlushCbs.length = 0;
    if (activePostFlushCbs) {
      activePostFlushCbs.push(...deduped);
      return;
    }
    activePostFlushCbs = deduped;
    if (true) {
      seen = seen || /* @__PURE__ */ new Map();
    }
    activePostFlushCbs.sort((a, b) => getId(a) - getId(b));
    for (postFlushIndex = 0; postFlushIndex < activePostFlushCbs.length; postFlushIndex++) {
      if (checkRecursiveUpdates(seen, activePostFlushCbs[postFlushIndex])) {
        continue;
      }
      activePostFlushCbs[postFlushIndex]();
    }
    activePostFlushCbs = null;
    postFlushIndex = 0;
  }
}
function flushJobs(seen) {
  isFlushPending = false;
  isFlushing = true;
  if (true) {
    seen = seen || /* @__PURE__ */ new Map();
  }
  flushPreFlushCbs(seen);
  queue.sort((a, b) => getId(a) - getId(b));
  try {
    for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {
      const job = queue[flushIndex];
      if (job && job.active !== false) {
        if (checkRecursiveUpdates(seen, job)) {
          continue;
        }
        callWithErrorHandling(
          job,
          null,
          14
          /* SCHEDULER */
        );
      }
    }
  } finally {
    flushIndex = 0;
    queue.length = 0;
    flushPostFlushCbs(seen);
    isFlushing = false;
    currentFlushPromise = null;
    if (queue.length || pendingPreFlushCbs.length || pendingPostFlushCbs.length) {
      flushJobs(seen);
    }
  }
}
function checkRecursiveUpdates(seen, fn) {
  if (!seen.has(fn)) {
    seen.set(fn, 1);
  } else {
    const count = seen.get(fn);
    if (count > RECURSION_LIMIT) {
      const instance = fn.ownerInstance;
      const componentName = instance && getComponentName(instance.type);
      warn2(`Maximum recursive updates exceeded${componentName ? ` in component <${componentName}>` : ``}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`);
      return true;
    } else {
      seen.set(fn, count + 1);
    }
  }
}
function watchEffect(effect2, options) {
  return doWatch(effect2, null, options);
}
function watchPostEffect(effect2, options) {
  return doWatch(effect2, null, true ? Object.assign(options || {}, { flush: "post" }) : { flush: "post" });
}
function watchSyncEffect(effect2, options) {
  return doWatch(effect2, null, true ? Object.assign(options || {}, { flush: "sync" }) : { flush: "sync" });
}
function watch(source, cb, options) {
  if (!isFunction(cb)) {
    warn2(`\`watch(fn, options?)\` signature has been moved to a separate API. Use \`watchEffect(fn, options?)\` instead. \`watch\` now only supports \`watch(source, cb, options?) signature.`);
  }
  return doWatch(source, cb, options);
}
function doWatch(source, cb, { immediate, deep, flush, onTrack, onTrigger } = EMPTY_OBJ) {
  if (!cb) {
    if (immediate !== void 0) {
      warn2(`watch() "immediate" option is only respected when using the watch(source, callback, options?) signature.`);
    }
    if (deep !== void 0) {
      warn2(`watch() "deep" option is only respected when using the watch(source, callback, options?) signature.`);
    }
  }
  const warnInvalidSource = (s) => {
    warn2(`Invalid watch source: `, s, `A watch source can only be a getter/effect function, a ref, a reactive object, or an array of these types.`);
  };
  const instance = currentInstance;
  let getter;
  let forceTrigger = false;
  let isMultiSource = false;
  if (isRef(source)) {
    getter = () => source.value;
    forceTrigger = !!source._shallow;
  } else if (isReactive(source)) {
    getter = () => source;
    deep = true;
  } else if (isArray(source)) {
    isMultiSource = true;
    forceTrigger = source.some(isReactive);
    getter = () => source.map((s) => {
      if (isRef(s)) {
        return s.value;
      } else if (isReactive(s)) {
        return traverse(s);
      } else if (isFunction(s)) {
        return callWithErrorHandling(
          s,
          instance,
          2
          /* WATCH_GETTER */
        );
      } else {
        warnInvalidSource(s);
      }
    });
  } else if (isFunction(source)) {
    if (cb) {
      getter = () => callWithErrorHandling(
        source,
        instance,
        2
        /* WATCH_GETTER */
      );
    } else {
      getter = () => {
        if (instance && instance.isUnmounted) {
          return;
        }
        if (cleanup) {
          cleanup();
        }
        return callWithAsyncErrorHandling(source, instance, 3, [onInvalidate]);
      };
    }
  } else {
    getter = NOOP;
    warnInvalidSource(source);
  }
  if (cb && deep) {
    const baseGetter = getter;
    getter = () => traverse(baseGetter());
  }
  let cleanup;
  let onInvalidate = (fn) => {
    cleanup = effect2.onStop = () => {
      callWithErrorHandling(
        fn,
        instance,
        4
        /* WATCH_CLEANUP */
      );
    };
  };
  let oldValue = isMultiSource ? [] : INITIAL_WATCHER_VALUE;
  const job = () => {
    if (!effect2.active) {
      return;
    }
    if (cb) {
      const newValue = effect2.run();
      if (deep || forceTrigger || (isMultiSource ? newValue.some((v, i) => hasChanged(v, oldValue[i])) : hasChanged(newValue, oldValue)) || false) {
        if (cleanup) {
          cleanup();
        }
        callWithAsyncErrorHandling(cb, instance, 3, [
          newValue,
          // pass undefined as the old value when it's changed for the first time
          oldValue === INITIAL_WATCHER_VALUE ? void 0 : oldValue,
          onInvalidate
        ]);
        oldValue = newValue;
      }
    } else {
      effect2.run();
    }
  };
  job.allowRecurse = !!cb;
  let scheduler;
  if (flush === "sync") {
    scheduler = job;
  } else if (flush === "post") {
    scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);
  } else {
    scheduler = () => {
      if (!instance || instance.isMounted) {
        queuePreFlushCb(job);
      } else {
        job();
      }
    };
  }
  const effect2 = new ReactiveEffect(getter, scheduler);
  if (true) {
    effect2.onTrack = onTrack;
    effect2.onTrigger = onTrigger;
  }
  if (cb) {
    if (immediate) {
      job();
    } else {
      oldValue = effect2.run();
    }
  } else if (flush === "post") {
    queuePostRenderEffect(effect2.run.bind(effect2), instance && instance.suspense);
  } else {
    effect2.run();
  }
  return () => {
    effect2.stop();
    if (instance && instance.scope) {
      remove(instance.scope.effects, effect2);
    }
  };
}
function instanceWatch(source, value, options) {
  const publicThis = this.proxy;
  const getter = isString(source) ? source.includes(".") ? createPathGetter(publicThis, source) : () => publicThis[source] : source.bind(publicThis, publicThis);
  let cb;
  if (isFunction(value)) {
    cb = value;
  } else {
    cb = value.handler;
    options = value;
  }
  const cur = currentInstance;
  setCurrentInstance(this);
  const res = doWatch(getter, cb.bind(publicThis), options);
  if (cur) {
    setCurrentInstance(cur);
  } else {
    unsetCurrentInstance();
  }
  return res;
}
function createPathGetter(ctx, path) {
  const segments = path.split(".");
  return () => {
    let cur = ctx;
    for (let i = 0; i < segments.length && cur; i++) {
      cur = cur[segments[i]];
    }
    return cur;
  };
}
function traverse(value, seen = /* @__PURE__ */ new Set()) {
  if (!isObject(value) || value[
    "__v_skip"
    /* SKIP */
  ]) {
    return value;
  }
  seen = seen || /* @__PURE__ */ new Set();
  if (seen.has(value)) {
    return value;
  }
  seen.add(value);
  if (isRef(value)) {
    traverse(value.value, seen);
  } else if (isArray(value)) {
    for (let i = 0; i < value.length; i++) {
      traverse(value[i], seen);
    }
  } else if (isSet(value) || isMap(value)) {
    value.forEach((v) => {
      traverse(v, seen);
    });
  } else if (isPlainObject(value)) {
    for (const key in value) {
      traverse(value[key], seen);
    }
  }
  return value;
}
function defineProps() {
  if (true) {
    warnRuntimeUsage(`defineProps`);
  }
  return null;
}
function defineEmits() {
  if (true) {
    warnRuntimeUsage(`defineEmits`);
  }
  return null;
}
function defineExpose(exposed) {
  if (true) {
    warnRuntimeUsage(`defineExpose`);
  }
}
function withDefaults(props, defaults) {
  if (true) {
    warnRuntimeUsage(`withDefaults`);
  }
  return null;
}
function useSlots() {
  return getContext().slots;
}
function useAttrs() {
  return getContext().attrs;
}
function getContext() {
  const i = getCurrentInstance();
  if (!i) {
    warn2(`useContext() called without active instance.`);
  }
  return i.setupContext || (i.setupContext = createSetupContext(i));
}
function mergeDefaults(props, defaults) {
  for (const key in defaults) {
    const val = props[key];
    if (val) {
      val.default = defaults[key];
    } else if (val === null) {
      props[key] = { default: defaults[key] };
    } else if (true) {
      warn2(`props default key "${key}" has no corresponding declaration.`);
    }
  }
  return props;
}
function withAsyncContext(getAwaitable) {
  const ctx = getCurrentInstance();
  if (!ctx) {
    warn2(`withAsyncContext called without active current instance. This is likely a bug.`);
  }
  let awaitable = getAwaitable();
  unsetCurrentInstance();
  if (isPromise2(awaitable)) {
    awaitable = awaitable.catch((e) => {
      setCurrentInstance(ctx);
      throw e;
    });
  }
  return [awaitable, () => setCurrentInstance(ctx)];
}
function h(type, propsOrChildren, children) {
  const l = arguments.length;
  if (l === 2) {
    if (isObject(propsOrChildren) && !isArray(propsOrChildren)) {
      if (isVNode(propsOrChildren)) {
        return createVNode(type, null, [propsOrChildren]);
      }
      return createVNode(type, propsOrChildren);
    } else {
      return createVNode(type, null, propsOrChildren);
    }
  } else {
    if (l > 3) {
      children = Array.prototype.slice.call(arguments, 2);
    } else if (l === 3 && isVNode(children)) {
      children = [children];
    }
    return createVNode(type, propsOrChildren, children);
  }
}
function initCustomFormatter() {
  if (typeof window === "undefined") {
    return;
  }
  const vueStyle = { style: "color:#3ba776" };
  const numberStyle = { style: "color:#0b1bc9" };
  const stringStyle = { style: "color:#b62e24" };
  const keywordStyle = { style: "color:#9d288c" };
  const formatter = {
    header(obj) {
      if (!isObject(obj)) {
        return null;
      }
      if (obj.__isVue) {
        return ["div", vueStyle, `VueInstance`];
      } else if (isRef(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, genRefFlag(obj)],
          "<",
          formatValue(obj.value),
          `>`
        ];
      } else if (isReactive(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, "Reactive"],
          "<",
          formatValue(obj),
          `>${isReadonly(obj) ? ` (readonly)` : ``}`
        ];
      } else if (isReadonly(obj)) {
        return [
          "div",
          {},
          ["span", vueStyle, "Readonly"],
          "<",
          formatValue(obj),
          ">"
        ];
      }
      return null;
    },
    hasBody(obj) {
      return obj && obj.__isVue;
    },
    body(obj) {
      if (obj && obj.__isVue) {
        return [
          "div",
          {},
          ...formatInstance(obj.$)
        ];
      }
    }
  };
  function formatInstance(instance) {
    const blocks = [];
    if (instance.type.props && instance.props) {
      blocks.push(createInstanceBlock("props", toRaw(instance.props)));
    }
    if (instance.setupState !== EMPTY_OBJ) {
      blocks.push(createInstanceBlock("setup", instance.setupState));
    }
    if (instance.data !== EMPTY_OBJ) {
      blocks.push(createInstanceBlock("data", toRaw(instance.data)));
    }
    const computed2 = extractKeys(instance, "computed");
    if (computed2) {
      blocks.push(createInstanceBlock("computed", computed2));
    }
    const injected = extractKeys(instance, "inject");
    if (injected) {
      blocks.push(createInstanceBlock("injected", injected));
    }
    blocks.push([
      "div",
      {},
      [
        "span",
        {
          style: keywordStyle.style + ";opacity:0.66"
        },
        "$ (internal): "
      ],
      ["object", { object: instance }]
    ]);
    return blocks;
  }
  function createInstanceBlock(type, target) {
    target = extend({}, target);
    if (!Object.keys(target).length) {
      return ["span", {}];
    }
    return [
      "div",
      { style: "line-height:1.25em;margin-bottom:0.6em" },
      [
        "div",
        {
          style: "color:#476582"
        },
        type
      ],
      [
        "div",
        {
          style: "padding-left:1.25em"
        },
        ...Object.keys(target).map((key) => {
          return [
            "div",
            {},
            ["span", keywordStyle, key + ": "],
            formatValue(target[key], false)
          ];
        })
      ]
    ];
  }
  function formatValue(v, asRaw = true) {
    if (typeof v === "number") {
      return ["span", numberStyle, v];
    } else if (typeof v === "string") {
      return ["span", stringStyle, JSON.stringify(v)];
    } else if (typeof v === "boolean") {
      return ["span", keywordStyle, v];
    } else if (isObject(v)) {
      return ["object", { object: asRaw ? toRaw(v) : v }];
    } else {
      return ["span", stringStyle, String(v)];
    }
  }
  function extractKeys(instance, type) {
    const Comp = instance.type;
    if (isFunction(Comp)) {
      return;
    }
    const extracted = {};
    for (const key in instance.ctx) {
      if (isKeyOfType(Comp, key, type)) {
        extracted[key] = instance.ctx[key];
      }
    }
    return extracted;
  }
  function isKeyOfType(Comp, key, type) {
    const opts = Comp[type];
    if (isArray(opts) && opts.includes(key) || isObject(opts) && key in opts) {
      return true;
    }
    if (Comp.extends && isKeyOfType(Comp.extends, key, type)) {
      return true;
    }
    if (Comp.mixins && Comp.mixins.some((m) => isKeyOfType(m, key, type))) {
      return true;
    }
  }
  function genRefFlag(v) {
    if (v._shallow) {
      return `ShallowRef`;
    }
    if (v.effect) {
      return `ComputedRef`;
    }
    return `Ref`;
  }
  if (window.devtoolsFormatters) {
    window.devtoolsFormatters.push(formatter);
  } else {
    window.devtoolsFormatters = [formatter];
  }
}
function withMemo(memo, render2, cache, index) {
  const cached = cache[index];
  if (cached && isMemoSame(cached, memo)) {
    return cached;
  }
  const ret = render2();
  ret.memo = memo.slice();
  return cache[index] = ret;
}
function isMemoSame(cached, memo) {
  const prev = cached.memo;
  if (prev.length != memo.length) {
    return false;
  }
  for (let i = 0; i < prev.length; i++) {
    if (prev[i] !== memo[i]) {
      return false;
    }
  }
  if (isBlockTreeEnabled > 0 && currentBlock) {
    currentBlock.push(cached);
  }
  return true;
}
function $ref() {
}
function $computed() {
}
function $fromRefs() {
  return null;
}
function $raw() {
  return null;
}
var isHmrUpdating, hmrDirtyComponents, map, devtools, devtoolsComponentAdded, devtoolsComponentUpdated, devtoolsComponentRemoved, devtoolsPerfStart, devtoolsPerfEnd, currentRenderingInstance, currentScopeId, withScopeId, accessedAttrs, getChildRoot, getFunctionalFallthrough, filterModelListeners, isElementRoot, isSuspense, SuspenseImpl, Suspense, hasWarned, TransitionHookValidator, BaseTransitionImpl, BaseTransition, isAsyncWrapper, isKeepAlive, KeepAliveImpl, KeepAlive, createHook, onBeforeMount, onMounted, onBeforeUpdate, onUpdated, onBeforeUnmount, onUnmounted, onServerPrefetch, onRenderTriggered, onRenderTracked, shouldCacheAccess, internalOptionMergeStrats, isSimpleType, isInternalKey, normalizeSlotValue, normalizeSlot, normalizeObjectSlots, normalizeVNodeSlots, initSlots, updateSlots, isBuiltInDirective, uid, hasMismatch, isSVGContainer, isComment, supported, perf, queuePostRenderEffect, isTeleport, isTeleportDisabled, isTargetSVG, resolveTarget, TeleportImpl, Teleport, COMPONENTS, DIRECTIVES, NULL_DYNAMIC_COMPONENT, Fragment, Text, Comment$1, Static, blockStack, currentBlock, isBlockTreeEnabled, vnodeArgsTransformer, createVNodeWithArgsTransform, InternalObjectKey, normalizeKey, normalizeRef, createVNode, getPublicInstance, publicPropertiesMap, PublicInstanceProxyHandlers, RuntimeCompiledPublicInstanceProxyHandlers, emptyAppContext, uid$1, currentInstance, getCurrentInstance, setCurrentInstance, unsetCurrentInstance, isBuiltInTag, isInSSRComponentSetup, compile, installWithProxy, isRuntimeOnly, classifyRE, classify, stack, ErrorTypeStrings, isFlushing, isFlushPending, queue, flushIndex, pendingPreFlushCbs, activePreFlushCbs, preFlushIndex, pendingPostFlushCbs, activePostFlushCbs, postFlushIndex, resolvedPromise, currentFlushPromise, currentPreFlushParentJob, RECURSION_LIMIT, getId, INITIAL_WATCHER_VALUE, isFunction2, isObject2, isPromise2, warnRuntimeUsage, ssrContextKey, useSSRContext, version, _ssrUtils, ssrUtils, resolveFilter, compatUtils;
var init_runtime_core_esm_bundler = __esm({
  "../../node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js"() {
    init_reactivity_esm_bundler();
    init_reactivity_esm_bundler();
    init_shared_esm_bundler();
    init_shared_esm_bundler();
    isHmrUpdating = false;
    hmrDirtyComponents = /* @__PURE__ */ new Set();
    if (true) {
      const globalObject = typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {};
      globalObject.__VUE_HMR_RUNTIME__ = {
        createRecord: tryWrap(createRecord),
        rerender: tryWrap(rerender),
        reload: tryWrap(reload)
      };
    }
    map = /* @__PURE__ */ new Map();
    devtoolsComponentAdded = createDevtoolsComponentHook(
      "component:added"
      /* COMPONENT_ADDED */
    );
    devtoolsComponentUpdated = createDevtoolsComponentHook(
      "component:updated"
      /* COMPONENT_UPDATED */
    );
    devtoolsComponentRemoved = createDevtoolsComponentHook(
      "component:removed"
      /* COMPONENT_REMOVED */
    );
    devtoolsPerfStart = createDevtoolsPerformanceHook(
      "perf:start"
      /* PERFORMANCE_START */
    );
    devtoolsPerfEnd = createDevtoolsPerformanceHook(
      "perf:end"
      /* PERFORMANCE_END */
    );
    currentRenderingInstance = null;
    currentScopeId = null;
    withScopeId = (_id) => withCtx;
    accessedAttrs = false;
    getChildRoot = (vnode) => {
      const rawChildren = vnode.children;
      const dynamicChildren = vnode.dynamicChildren;
      const childRoot = filterSingleRoot(rawChildren);
      if (!childRoot) {
        return [vnode, void 0];
      }
      const index = rawChildren.indexOf(childRoot);
      const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;
      const setRoot = (updatedRoot) => {
        rawChildren[index] = updatedRoot;
        if (dynamicChildren) {
          if (dynamicIndex > -1) {
            dynamicChildren[dynamicIndex] = updatedRoot;
          } else if (updatedRoot.patchFlag > 0) {
            vnode.dynamicChildren = [...dynamicChildren, updatedRoot];
          }
        }
      };
      return [normalizeVNode(childRoot), setRoot];
    };
    getFunctionalFallthrough = (attrs) => {
      let res;
      for (const key in attrs) {
        if (key === "class" || key === "style" || isOn(key)) {
          (res || (res = {}))[key] = attrs[key];
        }
      }
      return res;
    };
    filterModelListeners = (attrs, props) => {
      const res = {};
      for (const key in attrs) {
        if (!isModelListener(key) || !(key.slice(9) in props)) {
          res[key] = attrs[key];
        }
      }
      return res;
    };
    isElementRoot = (vnode) => {
      return vnode.shapeFlag & 6 || vnode.shapeFlag & 1 || vnode.type === Comment$1;
    };
    isSuspense = (type) => type.__isSuspense;
    SuspenseImpl = {
      name: "Suspense",
      // In order to make Suspense tree-shakable, we need to avoid importing it
      // directly in the renderer. The renderer checks for the __isSuspense flag
      // on a vnode's type and calls the `process` method, passing in renderer
      // internals.
      __isSuspense: true,
      process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals) {
        if (n1 == null) {
          mountSuspense(n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, rendererInternals);
        } else {
          patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, slotScopeIds, optimized, rendererInternals);
        }
      },
      hydrate: hydrateSuspense,
      create: createSuspenseBoundary,
      normalize: normalizeSuspenseChildren
    };
    Suspense = SuspenseImpl;
    hasWarned = false;
    TransitionHookValidator = [Function, Array];
    BaseTransitionImpl = {
      name: `BaseTransition`,
      props: {
        mode: String,
        appear: Boolean,
        persisted: Boolean,
        // enter
        onBeforeEnter: TransitionHookValidator,
        onEnter: TransitionHookValidator,
        onAfterEnter: TransitionHookValidator,
        onEnterCancelled: TransitionHookValidator,
        // leave
        onBeforeLeave: TransitionHookValidator,
        onLeave: TransitionHookValidator,
        onAfterLeave: TransitionHookValidator,
        onLeaveCancelled: TransitionHookValidator,
        // appear
        onBeforeAppear: TransitionHookValidator,
        onAppear: TransitionHookValidator,
        onAfterAppear: TransitionHookValidator,
        onAppearCancelled: TransitionHookValidator
      },
      setup(props, { slots }) {
        const instance = getCurrentInstance();
        const state = useTransitionState();
        let prevTransitionKey;
        return () => {
          const children = slots.default && getTransitionRawChildren(slots.default(), true);
          if (!children || !children.length) {
            return;
          }
          if (children.length > 1) {
            warn2("<transition> can only be used on a single element or component. Use <transition-group> for lists.");
          }
          const rawProps = toRaw(props);
          const { mode } = rawProps;
          if (mode && !["in-out", "out-in", "default"].includes(mode)) {
            warn2(`invalid <transition> mode: ${mode}`);
          }
          const child = children[0];
          if (state.isLeaving) {
            return emptyPlaceholder(child);
          }
          const innerChild = getKeepAliveChild(child);
          if (!innerChild) {
            return emptyPlaceholder(child);
          }
          const enterHooks = resolveTransitionHooks(innerChild, rawProps, state, instance);
          setTransitionHooks(innerChild, enterHooks);
          const oldChild = instance.subTree;
          const oldInnerChild = oldChild && getKeepAliveChild(oldChild);
          let transitionKeyChanged = false;
          const { getTransitionKey } = innerChild.type;
          if (getTransitionKey) {
            const key = getTransitionKey();
            if (prevTransitionKey === void 0) {
              prevTransitionKey = key;
            } else if (key !== prevTransitionKey) {
              prevTransitionKey = key;
              transitionKeyChanged = true;
            }
          }
          if (oldInnerChild && oldInnerChild.type !== Comment$1 && (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {
            const leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance);
            setTransitionHooks(oldInnerChild, leavingHooks);
            if (mode === "out-in") {
              state.isLeaving = true;
              leavingHooks.afterLeave = () => {
                state.isLeaving = false;
                instance.update();
              };
              return emptyPlaceholder(child);
            } else if (mode === "in-out" && innerChild.type !== Comment$1) {
              leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {
                const leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild);
                leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild;
                el._leaveCb = () => {
                  earlyRemove();
                  el._leaveCb = void 0;
                  delete enterHooks.delayedLeave;
                };
                enterHooks.delayedLeave = delayedLeave;
              };
            }
          }
          return child;
        };
      }
    };
    BaseTransition = BaseTransitionImpl;
    isAsyncWrapper = (i) => !!i.type.__asyncLoader;
    isKeepAlive = (vnode) => vnode.type.__isKeepAlive;
    KeepAliveImpl = {
      name: `KeepAlive`,
      // Marker for special handling inside the renderer. We are not using a ===
      // check directly on KeepAlive in the renderer, because importing it directly
      // would prevent it from being tree-shaken.
      __isKeepAlive: true,
      props: {
        include: [String, RegExp, Array],
        exclude: [String, RegExp, Array],
        max: [String, Number]
      },
      setup(props, { slots }) {
        const instance = getCurrentInstance();
        const sharedContext = instance.ctx;
        if (!sharedContext.renderer) {
          return slots.default;
        }
        const cache = /* @__PURE__ */ new Map();
        const keys = /* @__PURE__ */ new Set();
        let current = null;
        if (true) {
          instance.__v_cache = cache;
        }
        const parentSuspense = instance.suspense;
        const { renderer: { p: patch, m: move, um: _unmount, o: { createElement } } } = sharedContext;
        const storageContainer = createElement("div");
        sharedContext.activate = (vnode, container, anchor, isSVG, optimized) => {
          const instance2 = vnode.component;
          move(vnode, container, anchor, 0, parentSuspense);
          patch(instance2.vnode, vnode, container, anchor, instance2, parentSuspense, isSVG, vnode.slotScopeIds, optimized);
          queuePostRenderEffect(() => {
            instance2.isDeactivated = false;
            if (instance2.a) {
              invokeArrayFns(instance2.a);
            }
            const vnodeHook = vnode.props && vnode.props.onVnodeMounted;
            if (vnodeHook) {
              invokeVNodeHook(vnodeHook, instance2.parent, vnode);
            }
          }, parentSuspense);
          if (true) {
            devtoolsComponentAdded(instance2);
          }
        };
        sharedContext.deactivate = (vnode) => {
          const instance2 = vnode.component;
          move(vnode, storageContainer, null, 1, parentSuspense);
          queuePostRenderEffect(() => {
            if (instance2.da) {
              invokeArrayFns(instance2.da);
            }
            const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;
            if (vnodeHook) {
              invokeVNodeHook(vnodeHook, instance2.parent, vnode);
            }
            instance2.isDeactivated = true;
          }, parentSuspense);
          if (true) {
            devtoolsComponentAdded(instance2);
          }
        };
        function unmount(vnode) {
          resetShapeFlag(vnode);
          _unmount(vnode, instance, parentSuspense);
        }
        function pruneCache(filter) {
          cache.forEach((vnode, key) => {
            const name = getComponentName(vnode.type);
            if (name && (!filter || !filter(name))) {
              pruneCacheEntry(key);
            }
          });
        }
        function pruneCacheEntry(key) {
          const cached = cache.get(key);
          if (!current || cached.type !== current.type) {
            unmount(cached);
          } else if (current) {
            resetShapeFlag(current);
          }
          cache.delete(key);
          keys.delete(key);
        }
        watch(
          () => [props.include, props.exclude],
          ([include, exclude]) => {
            include && pruneCache((name) => matches(include, name));
            exclude && pruneCache((name) => !matches(exclude, name));
          },
          // prune post-render after `current` has been updated
          { flush: "post", deep: true }
        );
        let pendingCacheKey = null;
        const cacheSubtree = () => {
          if (pendingCacheKey != null) {
            cache.set(pendingCacheKey, getInnerChild(instance.subTree));
          }
        };
        onMounted(cacheSubtree);
        onUpdated(cacheSubtree);
        onBeforeUnmount(() => {
          cache.forEach((cached) => {
            const { subTree, suspense } = instance;
            const vnode = getInnerChild(subTree);
            if (cached.type === vnode.type) {
              resetShapeFlag(vnode);
              const da = vnode.component.da;
              da && queuePostRenderEffect(da, suspense);
              return;
            }
            unmount(cached);
          });
        });
        return () => {
          pendingCacheKey = null;
          if (!slots.default) {
            return null;
          }
          const children = slots.default();
          const rawVNode = children[0];
          if (children.length > 1) {
            if (true) {
              warn2(`KeepAlive should contain exactly one component child.`);
            }
            current = null;
            return children;
          } else if (!isVNode(rawVNode) || !(rawVNode.shapeFlag & 4) && !(rawVNode.shapeFlag & 128)) {
            current = null;
            return rawVNode;
          }
          let vnode = getInnerChild(rawVNode);
          const comp = vnode.type;
          const name = getComponentName(isAsyncWrapper(vnode) ? vnode.type.__asyncResolved || {} : comp);
          const { include, exclude, max } = props;
          if (include && (!name || !matches(include, name)) || exclude && name && matches(exclude, name)) {
            current = vnode;
            return rawVNode;
          }
          const key = vnode.key == null ? comp : vnode.key;
          const cachedVNode = cache.get(key);
          if (vnode.el) {
            vnode = cloneVNode(vnode);
            if (rawVNode.shapeFlag & 128) {
              rawVNode.ssContent = vnode;
            }
          }
          pendingCacheKey = key;
          if (cachedVNode) {
            vnode.el = cachedVNode.el;
            vnode.component = cachedVNode.component;
            if (vnode.transition) {
              setTransitionHooks(vnode, vnode.transition);
            }
            vnode.shapeFlag |= 512;
            keys.delete(key);
            keys.add(key);
          } else {
            keys.add(key);
            if (max && keys.size > parseInt(max, 10)) {
              pruneCacheEntry(keys.values().next().value);
            }
          }
          vnode.shapeFlag |= 256;
          current = vnode;
          return rawVNode;
        };
      }
    };
    KeepAlive = KeepAliveImpl;
    createHook = (lifecycle) => (hook, target = currentInstance) => (
      // post-create lifecycle registrations are noops during SSR (except for serverPrefetch)
      (!isInSSRComponentSetup || lifecycle === "sp") && injectHook(lifecycle, hook, target)
    );
    onBeforeMount = createHook(
      "bm"
      /* BEFORE_MOUNT */
    );
    onMounted = createHook(
      "m"
      /* MOUNTED */
    );
    onBeforeUpdate = createHook(
      "bu"
      /* BEFORE_UPDATE */
    );
    onUpdated = createHook(
      "u"
      /* UPDATED */
    );
    onBeforeUnmount = createHook(
      "bum"
      /* BEFORE_UNMOUNT */
    );
    onUnmounted = createHook(
      "um"
      /* UNMOUNTED */
    );
    onServerPrefetch = createHook(
      "sp"
      /* SERVER_PREFETCH */
    );
    onRenderTriggered = createHook(
      "rtg"
      /* RENDER_TRIGGERED */
    );
    onRenderTracked = createHook(
      "rtc"
      /* RENDER_TRACKED */
    );
    shouldCacheAccess = true;
    internalOptionMergeStrats = {
      data: mergeDataFn,
      props: mergeObjectOptions,
      emits: mergeObjectOptions,
      // objects
      methods: mergeObjectOptions,
      computed: mergeObjectOptions,
      // lifecycle
      beforeCreate: mergeAsArray,
      created: mergeAsArray,
      beforeMount: mergeAsArray,
      mounted: mergeAsArray,
      beforeUpdate: mergeAsArray,
      updated: mergeAsArray,
      beforeDestroy: mergeAsArray,
      destroyed: mergeAsArray,
      activated: mergeAsArray,
      deactivated: mergeAsArray,
      errorCaptured: mergeAsArray,
      serverPrefetch: mergeAsArray,
      // assets
      components: mergeObjectOptions,
      directives: mergeObjectOptions,
      // watch
      watch: mergeWatchOptions,
      // provide / inject
      provide: mergeDataFn,
      inject: mergeInject
    };
    isSimpleType = makeMap("String,Number,Boolean,Function,Symbol,BigInt");
    isInternalKey = (key) => key[0] === "_" || key === "$stable";
    normalizeSlotValue = (value) => isArray(value) ? value.map(normalizeVNode) : [normalizeVNode(value)];
    normalizeSlot = (key, rawSlot, ctx) => {
      const normalized = withCtx((props) => {
        if (currentInstance) {
          warn2(`Slot "${key}" invoked outside of the render function: this will not track dependencies used in the slot. Invoke the slot function inside the render function instead.`);
        }
        return normalizeSlotValue(rawSlot(props));
      }, ctx);
      normalized._c = false;
      return normalized;
    };
    normalizeObjectSlots = (rawSlots, slots, instance) => {
      const ctx = rawSlots._ctx;
      for (const key in rawSlots) {
        if (isInternalKey(key))
          continue;
        const value = rawSlots[key];
        if (isFunction(value)) {
          slots[key] = normalizeSlot(key, value, ctx);
        } else if (value != null) {
          if (true) {
            warn2(`Non-function value encountered for slot "${key}". Prefer function slots for better performance.`);
          }
          const normalized = normalizeSlotValue(value);
          slots[key] = () => normalized;
        }
      }
    };
    normalizeVNodeSlots = (instance, children) => {
      if (!isKeepAlive(instance.vnode) && true) {
        warn2(`Non-function value encountered for default slot. Prefer function slots for better performance.`);
      }
      const normalized = normalizeSlotValue(children);
      instance.slots.default = () => normalized;
    };
    initSlots = (instance, children) => {
      if (instance.vnode.shapeFlag & 32) {
        const type = children._;
        if (type) {
          instance.slots = toRaw(children);
          def(children, "_", type);
        } else {
          normalizeObjectSlots(children, instance.slots = {});
        }
      } else {
        instance.slots = {};
        if (children) {
          normalizeVNodeSlots(instance, children);
        }
      }
      def(instance.slots, InternalObjectKey, 1);
    };
    updateSlots = (instance, children, optimized) => {
      const { vnode, slots } = instance;
      let needDeletionCheck = true;
      let deletionComparisonTarget = EMPTY_OBJ;
      if (vnode.shapeFlag & 32) {
        const type = children._;
        if (type) {
          if (isHmrUpdating) {
            extend(slots, children);
          } else if (optimized && type === 1) {
            needDeletionCheck = false;
          } else {
            extend(slots, children);
            if (!optimized && type === 1) {
              delete slots._;
            }
          }
        } else {
          needDeletionCheck = !children.$stable;
          normalizeObjectSlots(children, slots);
        }
        deletionComparisonTarget = children;
      } else if (children) {
        normalizeVNodeSlots(instance, children);
        deletionComparisonTarget = { default: 1 };
      }
      if (needDeletionCheck) {
        for (const key in slots) {
          if (!isInternalKey(key) && !(key in deletionComparisonTarget)) {
            delete slots[key];
          }
        }
      }
    };
    isBuiltInDirective = makeMap("bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text");
    uid = 0;
    hasMismatch = false;
    isSVGContainer = (container) => /svg/.test(container.namespaceURI) && container.tagName !== "foreignObject";
    isComment = (node) => node.nodeType === 8;
    queuePostRenderEffect = queueEffectWithSuspense;
    isTeleport = (type) => type.__isTeleport;
    isTeleportDisabled = (props) => props && (props.disabled || props.disabled === "");
    isTargetSVG = (target) => typeof SVGElement !== "undefined" && target instanceof SVGElement;
    resolveTarget = (props, select) => {
      const targetSelector = props && props.to;
      if (isString(targetSelector)) {
        if (!select) {
          warn2(`Current renderer does not support string target for Teleports. (missing querySelector renderer option)`);
          return null;
        } else {
          const target = select(targetSelector);
          if (!target) {
            warn2(`Failed to locate Teleport target with selector "${targetSelector}". Note the target element must exist before the component is mounted - i.e. the target cannot be rendered by the component itself, and ideally should be outside of the entire Vue component tree.`);
          }
          return target;
        }
      } else {
        if (!targetSelector && !isTeleportDisabled(props)) {
          warn2(`Invalid Teleport target: ${targetSelector}`);
        }
        return targetSelector;
      }
    };
    TeleportImpl = {
      __isTeleport: true,
      process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized, internals) {
        const { mc: mountChildren, pc: patchChildren, pbc: patchBlockChildren, o: { insert, querySelector, createText, createComment } } = internals;
        const disabled = isTeleportDisabled(n2.props);
        let { shapeFlag, children, dynamicChildren } = n2;
        if (isHmrUpdating) {
          optimized = false;
          dynamicChildren = null;
        }
        if (n1 == null) {
          const placeholder = n2.el = true ? createComment("teleport start") : createText("");
          const mainAnchor = n2.anchor = true ? createComment("teleport end") : createText("");
          insert(placeholder, container, anchor);
          insert(mainAnchor, container, anchor);
          const target = n2.target = resolveTarget(n2.props, querySelector);
          const targetAnchor = n2.targetAnchor = createText("");
          if (target) {
            insert(targetAnchor, target);
            isSVG = isSVG || isTargetSVG(target);
          } else if (!disabled) {
            warn2("Invalid Teleport target on mount:", target, `(${typeof target})`);
          }
          const mount = (container2, anchor2) => {
            if (shapeFlag & 16) {
              mountChildren(children, container2, anchor2, parentComponent, parentSuspense, isSVG, slotScopeIds, optimized);
            }
          };
          if (disabled) {
            mount(container, mainAnchor);
          } else if (target) {
            mount(target, targetAnchor);
          }
        } else {
          n2.el = n1.el;
          const mainAnchor = n2.anchor = n1.anchor;
          const target = n2.target = n1.target;
          const targetAnchor = n2.targetAnchor = n1.targetAnchor;
          const wasDisabled = isTeleportDisabled(n1.props);
          const currentContainer = wasDisabled ? container : target;
          const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;
          isSVG = isSVG || isTargetSVG(target);
          if (dynamicChildren) {
            patchBlockChildren(n1.dynamicChildren, dynamicChildren, currentContainer, parentComponent, parentSuspense, isSVG, slotScopeIds);
            traverseStaticChildren(n1, n2, true);
          } else if (!optimized) {
            patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, isSVG, slotScopeIds, false);
          }
          if (disabled) {
            if (!wasDisabled) {
              moveTeleport(
                n2,
                container,
                mainAnchor,
                internals,
                1
                /* TOGGLE */
              );
            }
          } else {
            if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {
              const nextTarget = n2.target = resolveTarget(n2.props, querySelector);
              if (nextTarget) {
                moveTeleport(
                  n2,
                  nextTarget,
                  null,
                  internals,
                  0
                  /* TARGET_CHANGE */
                );
              } else if (true) {
                warn2("Invalid Teleport target on update:", target, `(${typeof target})`);
              }
            } else if (wasDisabled) {
              moveTeleport(
                n2,
                target,
                targetAnchor,
                internals,
                1
                /* TOGGLE */
              );
            }
          }
        }
      },
      remove(vnode, parentComponent, parentSuspense, optimized, { um: unmount, o: { remove: hostRemove } }, doRemove) {
        const { shapeFlag, children, anchor, targetAnchor, target, props } = vnode;
        if (target) {
          hostRemove(targetAnchor);
        }
        if (doRemove || !isTeleportDisabled(props)) {
          hostRemove(anchor);
          if (shapeFlag & 16) {
            for (let i = 0; i < children.length; i++) {
              const child = children[i];
              unmount(child, parentComponent, parentSuspense, true, !!child.dynamicChildren);
            }
          }
        }
      },
      move: moveTeleport,
      hydrate: hydrateTeleport
    };
    Teleport = TeleportImpl;
    COMPONENTS = "components";
    DIRECTIVES = "directives";
    NULL_DYNAMIC_COMPONENT = Symbol();
    Fragment = Symbol(true ? "Fragment" : void 0);
    Text = Symbol(true ? "Text" : void 0);
    Comment$1 = Symbol(true ? "Comment" : void 0);
    Static = Symbol(true ? "Static" : void 0);
    blockStack = [];
    currentBlock = null;
    isBlockTreeEnabled = 1;
    createVNodeWithArgsTransform = (...args) => {
      return _createVNode(...vnodeArgsTransformer ? vnodeArgsTransformer(args, currentRenderingInstance) : args);
    };
    InternalObjectKey = `__vInternal`;
    normalizeKey = ({ key }) => key != null ? key : null;
    normalizeRef = ({ ref: ref2 }) => {
      return ref2 != null ? isString(ref2) || isRef(ref2) || isFunction(ref2) ? { i: currentRenderingInstance, r: ref2 } : ref2 : null;
    };
    createVNode = true ? createVNodeWithArgsTransform : _createVNode;
    getPublicInstance = (i) => {
      if (!i)
        return null;
      if (isStatefulComponent(i))
        return getExposeProxy(i) || i.proxy;
      return getPublicInstance(i.parent);
    };
    publicPropertiesMap = extend(/* @__PURE__ */ Object.create(null), {
      $: (i) => i,
      $el: (i) => i.vnode.el,
      $data: (i) => i.data,
      $props: (i) => true ? shallowReadonly(i.props) : i.props,
      $attrs: (i) => true ? shallowReadonly(i.attrs) : i.attrs,
      $slots: (i) => true ? shallowReadonly(i.slots) : i.slots,
      $refs: (i) => true ? shallowReadonly(i.refs) : i.refs,
      $parent: (i) => getPublicInstance(i.parent),
      $root: (i) => getPublicInstance(i.root),
      $emit: (i) => i.emit,
      $options: (i) => __VUE_OPTIONS_API__ ? resolveMergedOptions(i) : i.type,
      $forceUpdate: (i) => () => queueJob(i.update),
      $nextTick: (i) => nextTick.bind(i.proxy),
      $watch: (i) => __VUE_OPTIONS_API__ ? instanceWatch.bind(i) : NOOP
    });
    PublicInstanceProxyHandlers = {
      get({ _: instance }, key) {
        const { ctx, setupState, data, props, accessCache, type, appContext } = instance;
        if (key === "__isVue") {
          return true;
        }
        if (setupState !== EMPTY_OBJ && setupState.__isScriptSetup && hasOwn(setupState, key)) {
          return setupState[key];
        }
        let normalizedProps;
        if (key[0] !== "$") {
          const n = accessCache[key];
          if (n !== void 0) {
            switch (n) {
              case 0:
                return setupState[key];
              case 1:
                return data[key];
              case 3:
                return ctx[key];
              case 2:
                return props[key];
            }
          } else if (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) {
            accessCache[key] = 0;
            return setupState[key];
          } else if (data !== EMPTY_OBJ && hasOwn(data, key)) {
            accessCache[key] = 1;
            return data[key];
          } else if (
            // only cache other properties when instance has declared (thus stable)
            // props
            (normalizedProps = instance.propsOptions[0]) && hasOwn(normalizedProps, key)
          ) {
            accessCache[key] = 2;
            return props[key];
          } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
            accessCache[key] = 3;
            return ctx[key];
          } else if (!__VUE_OPTIONS_API__ || shouldCacheAccess) {
            accessCache[key] = 4;
          }
        }
        const publicGetter = publicPropertiesMap[key];
        let cssModule, globalProperties;
        if (publicGetter) {
          if (key === "$attrs") {
            track(instance, "get", key);
            markAttrsAccessed();
          }
          return publicGetter(instance);
        } else if (
          // css module (injected by vue-loader)
          (cssModule = type.__cssModules) && (cssModule = cssModule[key])
        ) {
          return cssModule;
        } else if (ctx !== EMPTY_OBJ && hasOwn(ctx, key)) {
          accessCache[key] = 3;
          return ctx[key];
        } else if (
          // global properties
          globalProperties = appContext.config.globalProperties, hasOwn(globalProperties, key)
        ) {
          {
            return globalProperties[key];
          }
        } else if (currentRenderingInstance && (!isString(key) || // #1091 avoid internal isRef/isVNode checks on component instance leading
        // to infinite warning loop
        key.indexOf("__v") !== 0)) {
          if (data !== EMPTY_OBJ && (key[0] === "$" || key[0] === "_") && hasOwn(data, key)) {
            warn2(`Property ${JSON.stringify(key)} must be accessed via $data because it starts with a reserved character ("$" or "_") and is not proxied on the render context.`);
          } else if (instance === currentRenderingInstance) {
            warn2(`Property ${JSON.stringify(key)} was accessed during render but is not defined on instance.`);
          }
        }
      },
      set({ _: instance }, key, value) {
        const { data, setupState, ctx } = instance;
        if (setupState !== EMPTY_OBJ && hasOwn(setupState, key)) {
          setupState[key] = value;
        } else if (data !== EMPTY_OBJ && hasOwn(data, key)) {
          data[key] = value;
        } else if (hasOwn(instance.props, key)) {
          warn2(`Attempting to mutate prop "${key}". Props are readonly.`, instance);
          return false;
        }
        if (key[0] === "$" && key.slice(1) in instance) {
          warn2(`Attempting to mutate public property "${key}". Properties starting with $ are reserved and readonly.`, instance);
          return false;
        } else {
          if (key in instance.appContext.config.globalProperties) {
            Object.defineProperty(ctx, key, {
              enumerable: true,
              configurable: true,
              value
            });
          } else {
            ctx[key] = value;
          }
        }
        return true;
      },
      has({ _: { data, setupState, accessCache, ctx, appContext, propsOptions } }, key) {
        let normalizedProps;
        return accessCache[key] !== void 0 || data !== EMPTY_OBJ && hasOwn(data, key) || setupState !== EMPTY_OBJ && hasOwn(setupState, key) || (normalizedProps = propsOptions[0]) && hasOwn(normalizedProps, key) || hasOwn(ctx, key) || hasOwn(publicPropertiesMap, key) || hasOwn(appContext.config.globalProperties, key);
      }
    };
    if (true) {
      PublicInstanceProxyHandlers.ownKeys = (target) => {
        warn2(`Avoid app logic that relies on enumerating keys on a component instance. The keys will be empty in production mode to avoid performance overhead.`);
        return Reflect.ownKeys(target);
      };
    }
    RuntimeCompiledPublicInstanceProxyHandlers = extend({}, PublicInstanceProxyHandlers, {
      get(target, key) {
        if (key === Symbol.unscopables) {
          return;
        }
        return PublicInstanceProxyHandlers.get(target, key, target);
      },
      has(_, key) {
        const has2 = key[0] !== "_" && !isGloballyWhitelisted(key);
        if (!has2 && PublicInstanceProxyHandlers.has(_, key)) {
          warn2(`Property ${JSON.stringify(key)} should not start with _ which is a reserved prefix for Vue internals.`);
        }
        return has2;
      }
    });
    emptyAppContext = createAppContext();
    uid$1 = 0;
    currentInstance = null;
    getCurrentInstance = () => currentInstance || currentRenderingInstance;
    setCurrentInstance = (instance) => {
      currentInstance = instance;
      instance.scope.on();
    };
    unsetCurrentInstance = () => {
      currentInstance && currentInstance.scope.off();
      currentInstance = null;
    };
    isBuiltInTag = makeMap("slot,component");
    isInSSRComponentSetup = false;
    isRuntimeOnly = () => !compile;
    classifyRE = /(?:^|[-_])(\w)/g;
    classify = (str) => str.replace(classifyRE, (c) => c.toUpperCase()).replace(/[-_]/g, "");
    stack = [];
    ErrorTypeStrings = {
      [
        "sp"
        /* SERVER_PREFETCH */
      ]: "serverPrefetch hook",
      [
        "bc"
        /* BEFORE_CREATE */
      ]: "beforeCreate hook",
      [
        "c"
        /* CREATED */
      ]: "created hook",
      [
        "bm"
        /* BEFORE_MOUNT */
      ]: "beforeMount hook",
      [
        "m"
        /* MOUNTED */
      ]: "mounted hook",
      [
        "bu"
        /* BEFORE_UPDATE */
      ]: "beforeUpdate hook",
      [
        "u"
        /* UPDATED */
      ]: "updated",
      [
        "bum"
        /* BEFORE_UNMOUNT */
      ]: "beforeUnmount hook",
      [
        "um"
        /* UNMOUNTED */
      ]: "unmounted hook",
      [
        "a"
        /* ACTIVATED */
      ]: "activated hook",
      [
        "da"
        /* DEACTIVATED */
      ]: "deactivated hook",
      [
        "ec"
        /* ERROR_CAPTURED */
      ]: "errorCaptured hook",
      [
        "rtc"
        /* RENDER_TRACKED */
      ]: "renderTracked hook",
      [
        "rtg"
        /* RENDER_TRIGGERED */
      ]: "renderTriggered hook",
      [
        0
        /* SETUP_FUNCTION */
      ]: "setup function",
      [
        1
        /* RENDER_FUNCTION */
      ]: "render function",
      [
        2
        /* WATCH_GETTER */
      ]: "watcher getter",
      [
        3
        /* WATCH_CALLBACK */
      ]: "watcher callback",
      [
        4
        /* WATCH_CLEANUP */
      ]: "watcher cleanup function",
      [
        5
        /* NATIVE_EVENT_HANDLER */
      ]: "native event handler",
      [
        6
        /* COMPONENT_EVENT_HANDLER */
      ]: "component event handler",
      [
        7
        /* VNODE_HOOK */
      ]: "vnode hook",
      [
        8
        /* DIRECTIVE_HOOK */
      ]: "directive hook",
      [
        9
        /* TRANSITION_HOOK */
      ]: "transition hook",
      [
        10
        /* APP_ERROR_HANDLER */
      ]: "app errorHandler",
      [
        11
        /* APP_WARN_HANDLER */
      ]: "app warnHandler",
      [
        12
        /* FUNCTION_REF */
      ]: "ref function",
      [
        13
        /* ASYNC_COMPONENT_LOADER */
      ]: "async component loader",
      [
        14
        /* SCHEDULER */
      ]: "scheduler flush. This is likely a Vue internals bug. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/vue-next"
    };
    isFlushing = false;
    isFlushPending = false;
    queue = [];
    flushIndex = 0;
    pendingPreFlushCbs = [];
    activePreFlushCbs = null;
    preFlushIndex = 0;
    pendingPostFlushCbs = [];
    activePostFlushCbs = null;
    postFlushIndex = 0;
    resolvedPromise = Promise.resolve();
    currentFlushPromise = null;
    currentPreFlushParentJob = null;
    RECURSION_LIMIT = 100;
    getId = (job) => job.id == null ? Infinity : job.id;
    INITIAL_WATCHER_VALUE = {};
    true ? Object.freeze({}) : {};
    true ? Object.freeze([]) : [];
    isFunction2 = (val) => typeof val === "function";
    isObject2 = (val) => val !== null && typeof val === "object";
    isPromise2 = (val) => {
      return isObject2(val) && isFunction2(val.then) && isFunction2(val.catch);
    };
    warnRuntimeUsage = (method) => warn2(`${method}() is a compiler-hint helper that is only usable inside <script setup> of a single file component. Its arguments should be compiled away and passing it at runtime has no effect.`);
    ssrContextKey = Symbol(true ? `ssrContext` : ``);
    useSSRContext = () => {
      {
        const ctx = inject(ssrContextKey);
        if (!ctx) {
          warn2(`Server rendering context not provided. Make sure to only call useSSRContext() conditionally in the server build.`);
        }
        return ctx;
      }
    };
    version = "3.2.0";
    _ssrUtils = {
      createComponentInstance,
      setupComponent,
      renderComponentRoot,
      setCurrentRenderingInstance,
      isVNode,
      normalizeVNode
    };
    ssrUtils = _ssrUtils;
    resolveFilter = null;
    compatUtils = null;
  }
});

// ../../node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js
function patchClass(el, value, isSVG) {
  const transitionClasses = el._vtc;
  if (transitionClasses) {
    value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(" ");
  }
  if (value == null) {
    el.removeAttribute("class");
  } else if (isSVG) {
    el.setAttribute("class", value);
  } else {
    el.className = value;
  }
}
function patchStyle(el, prev, next) {
  const style = el.style;
  if (!next) {
    el.removeAttribute("style");
  } else if (isString(next)) {
    if (prev !== next) {
      const current = style.display;
      style.cssText = next;
      if ("_vod" in el) {
        style.display = current;
      }
    }
  } else {
    for (const key in next) {
      setStyle(style, key, next[key]);
    }
    if (prev && !isString(prev)) {
      for (const key in prev) {
        if (next[key] == null) {
          setStyle(style, key, "");
        }
      }
    }
  }
}
function setStyle(style, name, val) {
  if (isArray(val)) {
    val.forEach((v) => setStyle(style, name, v));
  } else {
    if (name.startsWith("--")) {
      style.setProperty(name, val);
    } else {
      const prefixed = autoPrefix(style, name);
      if (importantRE.test(val)) {
        style.setProperty(hyphenate(prefixed), val.replace(importantRE, ""), "important");
      } else {
        style[prefixed] = val;
      }
    }
  }
}
function autoPrefix(style, rawName) {
  const cached = prefixCache[rawName];
  if (cached) {
    return cached;
  }
  let name = camelize(rawName);
  if (name !== "filter" && name in style) {
    return prefixCache[rawName] = name;
  }
  name = capitalize(name);
  for (let i = 0; i < prefixes.length; i++) {
    const prefixed = prefixes[i] + name;
    if (prefixed in style) {
      return prefixCache[rawName] = prefixed;
    }
  }
  return rawName;
}
function patchAttr(el, key, value, isSVG, instance) {
  if (isSVG && key.startsWith("xlink:")) {
    if (value == null) {
      el.removeAttributeNS(xlinkNS, key.slice(6, key.length));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    const isBoolean2 = isSpecialBooleanAttr(key);
    if (value == null || isBoolean2 && value === false) {
      el.removeAttribute(key);
    } else {
      el.setAttribute(key, isBoolean2 ? "" : value);
    }
  }
}
function patchDOMProp(el, key, value, prevChildren, parentComponent, parentSuspense, unmountChildren) {
  if (key === "innerHTML" || key === "textContent") {
    if (prevChildren) {
      unmountChildren(prevChildren, parentComponent, parentSuspense);
    }
    el[key] = value == null ? "" : value;
    return;
  }
  if (key === "value" && el.tagName !== "PROGRESS") {
    el._value = value;
    const newValue = value == null ? "" : value;
    if (el.value !== newValue) {
      el.value = newValue;
    }
    if (value == null) {
      el.removeAttribute(key);
    }
    return;
  }
  if (value === "" || value == null) {
    const type = typeof el[key];
    if (value === "" && type === "boolean") {
      el[key] = true;
      return;
    } else if (value == null && type === "string") {
      el[key] = "";
      el.removeAttribute(key);
      return;
    } else if (type === "number") {
      try {
        el[key] = 0;
      } catch (_a2) {
      }
      el.removeAttribute(key);
      return;
    }
  }
  try {
    el[key] = value;
  } catch (e) {
    if (true) {
      warn2(`Failed setting prop "${key}" on <${el.tagName.toLowerCase()}>: value ${value} is invalid.`, e);
    }
  }
}
function addEventListener(el, event, handler, options) {
  el.addEventListener(event, handler, options);
}
function removeEventListener(el, event, handler, options) {
  el.removeEventListener(event, handler, options);
}
function patchEvent(el, rawName, prevValue, nextValue, instance = null) {
  const invokers = el._vei || (el._vei = {});
  const existingInvoker = invokers[rawName];
  if (nextValue && existingInvoker) {
    existingInvoker.value = nextValue;
  } else {
    const [name, options] = parseName(rawName);
    if (nextValue) {
      const invoker = invokers[rawName] = createInvoker(nextValue, instance);
      addEventListener(el, name, invoker, options);
    } else if (existingInvoker) {
      removeEventListener(el, name, existingInvoker, options);
      invokers[rawName] = void 0;
    }
  }
}
function parseName(name) {
  let options;
  if (optionsModifierRE.test(name)) {
    options = {};
    let m;
    while (m = name.match(optionsModifierRE)) {
      name = name.slice(0, name.length - m[0].length);
      options[m[0].toLowerCase()] = true;
    }
  }
  return [hyphenate(name.slice(2)), options];
}
function createInvoker(initialValue, instance) {
  const invoker = (e) => {
    const timeStamp = e.timeStamp || _getNow();
    if (skipTimestampCheck || timeStamp >= invoker.attached - 1) {
      callWithAsyncErrorHandling(patchStopImmediatePropagation(e, invoker.value), instance, 5, [e]);
    }
  };
  invoker.value = initialValue;
  invoker.attached = getNow();
  return invoker;
}
function patchStopImmediatePropagation(e, value) {
  if (isArray(value)) {
    const originalStop = e.stopImmediatePropagation;
    e.stopImmediatePropagation = () => {
      originalStop.call(e);
      e._stopped = true;
    };
    return value.map((fn) => (e2) => !e2._stopped && fn(e2));
  } else {
    return value;
  }
}
function shouldSetAsProp(el, key, value, isSVG) {
  if (isSVG) {
    if (key === "innerHTML") {
      return true;
    }
    if (key in el && nativeOnRE.test(key) && isFunction(value)) {
      return true;
    }
    return false;
  }
  if (key === "spellcheck" || key === "draggable") {
    return false;
  }
  if (key === "form") {
    return false;
  }
  if (key === "list" && el.tagName === "INPUT") {
    return false;
  }
  if (key === "type" && el.tagName === "TEXTAREA") {
    return false;
  }
  if (nativeOnRE.test(key) && isString(value)) {
    return false;
  }
  return key in el;
}
function defineCustomElement(options, hydate) {
  const Comp = defineComponent(options);
  class VueCustomElement extends VueElement {
    constructor(initialProps) {
      super(Comp, initialProps, hydate);
    }
  }
  VueCustomElement.def = Comp;
  return VueCustomElement;
}
function useCssModule(name = "$style") {
  {
    const instance = getCurrentInstance();
    if (!instance) {
      warn2(`useCssModule must be called inside setup()`);
      return EMPTY_OBJ;
    }
    const modules = instance.type.__cssModules;
    if (!modules) {
      warn2(`Current instance does not have CSS modules injected.`);
      return EMPTY_OBJ;
    }
    const mod = modules[name];
    if (!mod) {
      warn2(`Current instance does not have CSS module named "${name}".`);
      return EMPTY_OBJ;
    }
    return mod;
  }
}
function useCssVars(getter) {
  const instance = getCurrentInstance();
  if (!instance) {
    warn2(`useCssVars is called without current active component instance.`);
    return;
  }
  const setVars = () => setVarsOnVNode(instance.subTree, getter(instance.proxy));
  watchPostEffect(setVars);
  onMounted(() => {
    const ob = new MutationObserver(setVars);
    ob.observe(instance.subTree.el.parentNode, { childList: true });
    onUnmounted(() => ob.disconnect());
  });
}
function setVarsOnVNode(vnode, vars) {
  if (vnode.shapeFlag & 128) {
    const suspense = vnode.suspense;
    vnode = suspense.activeBranch;
    if (suspense.pendingBranch && !suspense.isHydrating) {
      suspense.effects.push(() => {
        setVarsOnVNode(suspense.activeBranch, vars);
      });
    }
  }
  while (vnode.component) {
    vnode = vnode.component.subTree;
  }
  if (vnode.shapeFlag & 1 && vnode.el) {
    setVarsOnNode(vnode.el, vars);
  } else if (vnode.type === Fragment) {
    vnode.children.forEach((c) => setVarsOnVNode(c, vars));
  } else if (vnode.type === Static) {
    let { el, anchor } = vnode;
    while (el) {
      setVarsOnNode(el, vars);
      if (el === anchor)
        break;
      el = el.nextSibling;
    }
  }
}
function setVarsOnNode(el, vars) {
  if (el.nodeType === 1) {
    const style = el.style;
    for (const key in vars) {
      style.setProperty(`--${key}`, vars[key]);
    }
  }
}
function resolveTransitionProps(rawProps) {
  const baseProps = {};
  for (const key in rawProps) {
    if (!(key in DOMTransitionPropsValidators)) {
      baseProps[key] = rawProps[key];
    }
  }
  if (rawProps.css === false) {
    return baseProps;
  }
  const { name = "v", type, duration, enterFromClass = `${name}-enter-from`, enterActiveClass = `${name}-enter-active`, enterToClass = `${name}-enter-to`, appearFromClass = enterFromClass, appearActiveClass = enterActiveClass, appearToClass = enterToClass, leaveFromClass = `${name}-leave-from`, leaveActiveClass = `${name}-leave-active`, leaveToClass = `${name}-leave-to` } = rawProps;
  const durations = normalizeDuration(duration);
  const enterDuration = durations && durations[0];
  const leaveDuration = durations && durations[1];
  const { onBeforeEnter, onEnter, onEnterCancelled, onLeave, onLeaveCancelled, onBeforeAppear = onBeforeEnter, onAppear = onEnter, onAppearCancelled = onEnterCancelled } = baseProps;
  const finishEnter = (el, isAppear, done) => {
    removeTransitionClass(el, isAppear ? appearToClass : enterToClass);
    removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);
    done && done();
  };
  const finishLeave = (el, done) => {
    removeTransitionClass(el, leaveToClass);
    removeTransitionClass(el, leaveActiveClass);
    done && done();
  };
  const makeEnterHook = (isAppear) => {
    return (el, done) => {
      const hook = isAppear ? onAppear : onEnter;
      const resolve2 = () => finishEnter(el, isAppear, done);
      callHook2(hook, [el, resolve2]);
      nextFrame(() => {
        removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);
        addTransitionClass(el, isAppear ? appearToClass : enterToClass);
        if (!hasExplicitCallback(hook)) {
          whenTransitionEnds(el, type, enterDuration, resolve2);
        }
      });
    };
  };
  return extend(baseProps, {
    onBeforeEnter(el) {
      callHook2(onBeforeEnter, [el]);
      addTransitionClass(el, enterFromClass);
      addTransitionClass(el, enterActiveClass);
    },
    onBeforeAppear(el) {
      callHook2(onBeforeAppear, [el]);
      addTransitionClass(el, appearFromClass);
      addTransitionClass(el, appearActiveClass);
    },
    onEnter: makeEnterHook(false),
    onAppear: makeEnterHook(true),
    onLeave(el, done) {
      const resolve2 = () => finishLeave(el, done);
      addTransitionClass(el, leaveFromClass);
      forceReflow();
      addTransitionClass(el, leaveActiveClass);
      nextFrame(() => {
        removeTransitionClass(el, leaveFromClass);
        addTransitionClass(el, leaveToClass);
        if (!hasExplicitCallback(onLeave)) {
          whenTransitionEnds(el, type, leaveDuration, resolve2);
        }
      });
      callHook2(onLeave, [el, resolve2]);
    },
    onEnterCancelled(el) {
      finishEnter(el, false);
      callHook2(onEnterCancelled, [el]);
    },
    onAppearCancelled(el) {
      finishEnter(el, true);
      callHook2(onAppearCancelled, [el]);
    },
    onLeaveCancelled(el) {
      finishLeave(el);
      callHook2(onLeaveCancelled, [el]);
    }
  });
}
function normalizeDuration(duration) {
  if (duration == null) {
    return null;
  } else if (isObject(duration)) {
    return [NumberOf(duration.enter), NumberOf(duration.leave)];
  } else {
    const n = NumberOf(duration);
    return [n, n];
  }
}
function NumberOf(val) {
  const res = toNumber(val);
  if (true)
    validateDuration(res);
  return res;
}
function validateDuration(val) {
  if (typeof val !== "number") {
    warn2(`<transition> explicit duration is not a valid number - got ${JSON.stringify(val)}.`);
  } else if (isNaN(val)) {
    warn2(`<transition> explicit duration is NaN - the duration expression might be incorrect.`);
  }
}
function addTransitionClass(el, cls) {
  cls.split(/\s+/).forEach((c) => c && el.classList.add(c));
  (el._vtc || (el._vtc = /* @__PURE__ */ new Set())).add(cls);
}
function removeTransitionClass(el, cls) {
  cls.split(/\s+/).forEach((c) => c && el.classList.remove(c));
  const { _vtc } = el;
  if (_vtc) {
    _vtc.delete(cls);
    if (!_vtc.size) {
      el._vtc = void 0;
    }
  }
}
function nextFrame(cb) {
  requestAnimationFrame(() => {
    requestAnimationFrame(cb);
  });
}
function whenTransitionEnds(el, expectedType, explicitTimeout, resolve2) {
  const id = el._endId = ++endId;
  const resolveIfNotStale = () => {
    if (id === el._endId) {
      resolve2();
    }
  };
  if (explicitTimeout) {
    return setTimeout(resolveIfNotStale, explicitTimeout);
  }
  const { type, timeout, propCount } = getTransitionInfo(el, expectedType);
  if (!type) {
    return resolve2();
  }
  const endEvent = type + "end";
  let ended = 0;
  const end = () => {
    el.removeEventListener(endEvent, onEnd);
    resolveIfNotStale();
  };
  const onEnd = (e) => {
    if (e.target === el && ++ended >= propCount) {
      end();
    }
  };
  setTimeout(() => {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(endEvent, onEnd);
}
function getTransitionInfo(el, expectedType) {
  const styles = window.getComputedStyle(el);
  const getStyleProperties = (key) => (styles[key] || "").split(", ");
  const transitionDelays = getStyleProperties(TRANSITION + "Delay");
  const transitionDurations = getStyleProperties(TRANSITION + "Duration");
  const transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  const animationDelays = getStyleProperties(ANIMATION + "Delay");
  const animationDurations = getStyleProperties(ANIMATION + "Duration");
  const animationTimeout = getTimeout(animationDelays, animationDurations);
  let type = null;
  let timeout = 0;
  let propCount = 0;
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }
  const hasTransform = type === TRANSITION && /\b(transform|all)(,|$)/.test(styles[TRANSITION + "Property"]);
  return {
    type,
    timeout,
    propCount,
    hasTransform
  };
}
function getTimeout(delays, durations) {
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }
  return Math.max(...durations.map((d, i) => toMs(d) + toMs(delays[i])));
}
function toMs(s) {
  return Number(s.slice(0, -1).replace(",", ".")) * 1e3;
}
function forceReflow() {
  return document.body.offsetHeight;
}
function callPendingCbs(c) {
  const el = c.el;
  if (el._moveCb) {
    el._moveCb();
  }
  if (el._enterCb) {
    el._enterCb();
  }
}
function recordPosition(c) {
  newPositionMap.set(c, c.el.getBoundingClientRect());
}
function applyTranslation(c) {
  const oldPos = positionMap.get(c);
  const newPos = newPositionMap.get(c);
  const dx = oldPos.left - newPos.left;
  const dy = oldPos.top - newPos.top;
  if (dx || dy) {
    const s = c.el.style;
    s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;
    s.transitionDuration = "0s";
    return c;
  }
}
function hasCSSTransform(el, root, moveClass) {
  const clone = el.cloneNode();
  if (el._vtc) {
    el._vtc.forEach((cls) => {
      cls.split(/\s+/).forEach((c) => c && clone.classList.remove(c));
    });
  }
  moveClass.split(/\s+/).forEach((c) => c && clone.classList.add(c));
  clone.style.display = "none";
  const container = root.nodeType === 1 ? root : root.parentNode;
  container.appendChild(clone);
  const { hasTransform } = getTransitionInfo(clone);
  container.removeChild(clone);
  return hasTransform;
}
function onCompositionStart(e) {
  e.target.composing = true;
}
function onCompositionEnd(e) {
  const target = e.target;
  if (target.composing) {
    target.composing = false;
    trigger2(target, "input");
  }
}
function trigger2(el, type) {
  const e = document.createEvent("HTMLEvents");
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}
function setChecked(el, { value, oldValue }, vnode) {
  el._modelValue = value;
  if (isArray(value)) {
    el.checked = looseIndexOf(value, vnode.props.value) > -1;
  } else if (isSet(value)) {
    el.checked = value.has(vnode.props.value);
  } else if (value !== oldValue) {
    el.checked = looseEqual(value, getCheckboxValue(el, true));
  }
}
function setSelected(el, value) {
  const isMultiple = el.multiple;
  if (isMultiple && !isArray(value) && !isSet(value)) {
    warn2(`<select multiple v-model> expects an Array or Set value for its binding, but got ${Object.prototype.toString.call(value).slice(8, -1)}.`);
    return;
  }
  for (let i = 0, l = el.options.length; i < l; i++) {
    const option = el.options[i];
    const optionValue = getValue(option);
    if (isMultiple) {
      if (isArray(value)) {
        option.selected = looseIndexOf(value, optionValue) > -1;
      } else {
        option.selected = value.has(optionValue);
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i)
          el.selectedIndex = i;
        return;
      }
    }
  }
  if (!isMultiple && el.selectedIndex !== -1) {
    el.selectedIndex = -1;
  }
}
function getValue(el) {
  return "_value" in el ? el._value : el.value;
}
function getCheckboxValue(el, checked) {
  const key = checked ? "_trueValue" : "_falseValue";
  return key in el ? el[key] : checked;
}
function callModelHook(el, binding, vnode, prevVNode, hook) {
  let modelToUse;
  switch (el.tagName) {
    case "SELECT":
      modelToUse = vModelSelect;
      break;
    case "TEXTAREA":
      modelToUse = vModelText;
      break;
    default:
      switch (vnode.props && vnode.props.type) {
        case "checkbox":
          modelToUse = vModelCheckbox;
          break;
        case "radio":
          modelToUse = vModelRadio;
          break;
        default:
          modelToUse = vModelText;
      }
  }
  const fn = modelToUse[hook];
  fn && fn(el, binding, vnode, prevVNode);
}
function setDisplay(el, value) {
  el.style.display = value ? el._vod : "none";
}
function ensureRenderer() {
  return renderer || (renderer = createRenderer(rendererOptions));
}
function ensureHydrationRenderer() {
  renderer = enabledHydration ? renderer : createHydrationRenderer(rendererOptions);
  enabledHydration = true;
  return renderer;
}
function injectNativeTagCheck(app) {
  Object.defineProperty(app.config, "isNativeTag", {
    value: (tag) => isHTMLTag(tag) || isSVGTag(tag),
    writable: false
  });
}
function injectCompilerOptionsCheck(app) {
  if (isRuntimeOnly()) {
    const isCustomElement = app.config.isCustomElement;
    Object.defineProperty(app.config, "isCustomElement", {
      get() {
        return isCustomElement;
      },
      set() {
        warn2(`The \`isCustomElement\` config option is deprecated. Use \`compilerOptions.isCustomElement\` instead.`);
      }
    });
    const compilerOptions = app.config.compilerOptions;
    const msg = `The \`compilerOptions\` config option is only respected when using a build of Vue.js that includes the runtime compiler (aka "full build"). Since you are using the runtime-only build, \`compilerOptions\` must be passed to \`@vue/compiler-dom\` in the build setup instead.
- For vue-loader: pass it via vue-loader's \`compilerOptions\` loader option.
- For vue-cli: see https://cli.vuejs.org/guide/webpack.html#modifying-options-of-a-loader
- For vite: pass it via @vitejs/plugin-vue options. See https://github.com/vitejs/vite/tree/main/packages/plugin-vue#example-for-passing-options-to-vuecompiler-dom`;
    Object.defineProperty(app.config, "compilerOptions", {
      get() {
        warn2(msg);
        return compilerOptions;
      },
      set() {
        warn2(msg);
      }
    });
  }
}
function normalizeContainer(container) {
  if (isString(container)) {
    const res = document.querySelector(container);
    if (!res) {
      warn2(`Failed to mount app: mount target selector "${container}" returned null.`);
    }
    return res;
  }
  if (window.ShadowRoot && container instanceof window.ShadowRoot && container.mode === "closed") {
    warn2(`mounting on a ShadowRoot with \`{mode: "closed"}\` may lead to unpredictable bugs`);
  }
  return container;
}
var svgNS, doc, staticTemplateCache, nodeOps, importantRE, prefixes, prefixCache, xlinkNS, _getNow, skipTimestampCheck, cachedNow, p, reset, getNow, optionsModifierRE, nativeOnRE, patchProp, defineSSRCustomElement, BaseClass, VueElement, TRANSITION, ANIMATION, Transition, DOMTransitionPropsValidators, TransitionPropsValidators, callHook2, hasExplicitCallback, endId, positionMap, newPositionMap, TransitionGroupImpl, TransitionGroup, getModelAssigner, vModelText, vModelCheckbox, vModelRadio, vModelSelect, vModelDynamic, systemModifiers, modifierGuards, withModifiers, keyNames, withKeys, vShow, rendererOptions, renderer, enabledHydration, render, hydrate, createApp, createSSRApp;
var init_runtime_dom_esm_bundler = __esm({
  "../../node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js"() {
    init_runtime_core_esm_bundler();
    init_runtime_core_esm_bundler();
    init_shared_esm_bundler();
    svgNS = "http://www.w3.org/2000/svg";
    doc = typeof document !== "undefined" ? document : null;
    staticTemplateCache = /* @__PURE__ */ new Map();
    nodeOps = {
      insert: (child, parent, anchor) => {
        parent.insertBefore(child, anchor || null);
      },
      remove: (child) => {
        const parent = child.parentNode;
        if (parent) {
          parent.removeChild(child);
        }
      },
      createElement: (tag, isSVG, is, props) => {
        const el = isSVG ? doc.createElementNS(svgNS, tag) : doc.createElement(tag, is ? { is } : void 0);
        if (tag === "select" && props && props.multiple != null) {
          el.setAttribute("multiple", props.multiple);
        }
        return el;
      },
      createText: (text) => doc.createTextNode(text),
      createComment: (text) => doc.createComment(text),
      setText: (node, text) => {
        node.nodeValue = text;
      },
      setElementText: (el, text) => {
        el.textContent = text;
      },
      parentNode: (node) => node.parentNode,
      nextSibling: (node) => node.nextSibling,
      querySelector: (selector) => doc.querySelector(selector),
      setScopeId(el, id) {
        el.setAttribute(id, "");
      },
      cloneNode(el) {
        const cloned = el.cloneNode(true);
        if (`_value` in el) {
          cloned._value = el._value;
        }
        return cloned;
      },
      // __UNSAFE__
      // Reason: innerHTML.
      // Static content here can only come from compiled templates.
      // As long as the user only uses trusted templates, this is safe.
      insertStaticContent(content, parent, anchor, isSVG) {
        const before = anchor ? anchor.previousSibling : parent.lastChild;
        let template = staticTemplateCache.get(content);
        if (!template) {
          const t = doc.createElement("template");
          t.innerHTML = isSVG ? `<svg>${content}</svg>` : content;
          template = t.content;
          if (isSVG) {
            const wrapper = template.firstChild;
            while (wrapper.firstChild) {
              template.appendChild(wrapper.firstChild);
            }
            template.removeChild(wrapper);
          }
          staticTemplateCache.set(content, template);
        }
        parent.insertBefore(template.cloneNode(true), anchor);
        return [
          // first
          before ? before.nextSibling : parent.firstChild,
          // last
          anchor ? anchor.previousSibling : parent.lastChild
        ];
      }
    };
    importantRE = /\s*!important$/;
    prefixes = ["Webkit", "Moz", "ms"];
    prefixCache = {};
    xlinkNS = "http://www.w3.org/1999/xlink";
    _getNow = Date.now;
    skipTimestampCheck = false;
    if (typeof window !== "undefined") {
      if (_getNow() > document.createEvent("Event").timeStamp) {
        _getNow = () => performance.now();
      }
      const ffMatch = navigator.userAgent.match(/firefox\/(\d+)/i);
      skipTimestampCheck = !!(ffMatch && Number(ffMatch[1]) <= 53);
    }
    cachedNow = 0;
    p = Promise.resolve();
    reset = () => {
      cachedNow = 0;
    };
    getNow = () => cachedNow || (p.then(reset), cachedNow = _getNow());
    optionsModifierRE = /(?:Once|Passive|Capture)$/;
    nativeOnRE = /^on[a-z]/;
    patchProp = (el, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {
      if (key === "class") {
        patchClass(el, nextValue, isSVG);
      } else if (key === "style") {
        patchStyle(el, prevValue, nextValue);
      } else if (isOn(key)) {
        if (!isModelListener(key)) {
          patchEvent(el, key, prevValue, nextValue, parentComponent);
        }
      } else if (key[0] === "." ? (key = key.slice(1), true) : key[0] === "^" ? (key = key.slice(1), false) : shouldSetAsProp(el, key, nextValue, isSVG)) {
        patchDOMProp(el, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);
      } else {
        if (key === "true-value") {
          el._trueValue = nextValue;
        } else if (key === "false-value") {
          el._falseValue = nextValue;
        }
        patchAttr(el, key, nextValue, isSVG);
      }
    };
    defineSSRCustomElement = (options) => {
      return defineCustomElement(options, hydrate);
    };
    BaseClass = typeof HTMLElement !== "undefined" ? HTMLElement : class {
    };
    VueElement = class _VueElement extends BaseClass {
      constructor(_def, _props = {}, hydrate2) {
        super();
        this._def = _def;
        this._props = _props;
        this._instance = null;
        this._connected = false;
        this._resolved = false;
        if (this.shadowRoot && hydrate2) {
          hydrate2(this._createVNode(), this.shadowRoot);
        } else {
          if (this.shadowRoot) {
            warn2(`Custom element has pre-rendered declarative shadow root but is not defined as hydratable. Use \`defineSSRCustomElement\`.`);
          }
          this.attachShadow({ mode: "open" });
        }
        for (let i = 0; i < this.attributes.length; i++) {
          this._setAttr(this.attributes[i].name);
        }
        const observer = new MutationObserver((mutations) => {
          for (const m of mutations) {
            this._setAttr(m.attributeName);
          }
        });
        observer.observe(this, { attributes: true });
      }
      connectedCallback() {
        this._connected = true;
        if (!this._instance) {
          this._resolveDef();
          render(this._createVNode(), this.shadowRoot);
        }
      }
      disconnectedCallback() {
        this._connected = false;
        nextTick(() => {
          if (!this._connected) {
            render(null, this.shadowRoot);
            this._instance = null;
          }
        });
      }
      /**
       * resolve inner component definition (handle possible async component)
       */
      _resolveDef() {
        if (this._resolved) {
          return;
        }
        const resolve2 = (def2) => {
          this._resolved = true;
          for (const key of Object.keys(this)) {
            if (key[0] !== "_") {
              this._setProp(key, this[key]);
            }
          }
          const { props, styles } = def2;
          const rawKeys = props ? isArray(props) ? props : Object.keys(props) : [];
          for (const key of rawKeys.map(camelize)) {
            Object.defineProperty(this, key, {
              get() {
                return this._getProp(key);
              },
              set(val) {
                this._setProp(key, val);
              }
            });
          }
          this._applyStyles(styles);
        };
        const asyncDef = this._def.__asyncLoader;
        if (asyncDef) {
          asyncDef().then(resolve2);
        } else {
          resolve2(this._def);
        }
      }
      _setAttr(key) {
        this._setProp(camelize(key), toNumber(this.getAttribute(key)), false);
      }
      /**
       * @internal
       */
      _getProp(key) {
        return this._props[key];
      }
      /**
       * @internal
       */
      _setProp(key, val, shouldReflect = true) {
        if (val !== this._props[key]) {
          this._props[key] = val;
          if (this._instance) {
            render(this._createVNode(), this.shadowRoot);
          }
          if (shouldReflect) {
            if (val === true) {
              this.setAttribute(hyphenate(key), "");
            } else if (typeof val === "string" || typeof val === "number") {
              this.setAttribute(hyphenate(key), val + "");
            } else if (!val) {
              this.removeAttribute(hyphenate(key));
            }
          }
        }
      }
      _createVNode() {
        const vnode = createVNode(this._def, extend({}, this._props));
        if (!this._instance) {
          vnode.ce = (instance) => {
            this._instance = instance;
            instance.isCE = true;
            if (true) {
              instance.ceReload = (newStyles) => {
                if (this._styles) {
                  this._styles.forEach((s) => this.shadowRoot.removeChild(s));
                  this._styles.length = 0;
                }
                this._applyStyles(newStyles);
                if (!this._def.__asyncLoader) {
                  this._instance = null;
                  render(this._createVNode(), this.shadowRoot);
                }
              };
            }
            instance.emit = (event, ...args) => {
              this.dispatchEvent(new CustomEvent(event, {
                detail: args
              }));
            };
            let parent = this;
            while (parent = parent && (parent.parentNode || parent.host)) {
              if (parent instanceof _VueElement) {
                instance.parent = parent._instance;
                break;
              }
            }
          };
        }
        return vnode;
      }
      _applyStyles(styles) {
        if (styles) {
          styles.forEach((css) => {
            const s = document.createElement("style");
            s.textContent = css;
            this.shadowRoot.appendChild(s);
            if (true) {
              (this._styles || (this._styles = [])).push(s);
            }
          });
        }
      }
    };
    TRANSITION = "transition";
    ANIMATION = "animation";
    Transition = (props, { slots }) => h(BaseTransition, resolveTransitionProps(props), slots);
    Transition.displayName = "Transition";
    DOMTransitionPropsValidators = {
      name: String,
      type: String,
      css: {
        type: Boolean,
        default: true
      },
      duration: [String, Number, Object],
      enterFromClass: String,
      enterActiveClass: String,
      enterToClass: String,
      appearFromClass: String,
      appearActiveClass: String,
      appearToClass: String,
      leaveFromClass: String,
      leaveActiveClass: String,
      leaveToClass: String
    };
    TransitionPropsValidators = Transition.props = extend({}, BaseTransition.props, DOMTransitionPropsValidators);
    callHook2 = (hook, args = []) => {
      if (isArray(hook)) {
        hook.forEach((h2) => h2(...args));
      } else if (hook) {
        hook(...args);
      }
    };
    hasExplicitCallback = (hook) => {
      return hook ? isArray(hook) ? hook.some((h2) => h2.length > 1) : hook.length > 1 : false;
    };
    endId = 0;
    positionMap = /* @__PURE__ */ new WeakMap();
    newPositionMap = /* @__PURE__ */ new WeakMap();
    TransitionGroupImpl = {
      name: "TransitionGroup",
      props: extend({}, TransitionPropsValidators, {
        tag: String,
        moveClass: String
      }),
      setup(props, { slots }) {
        const instance = getCurrentInstance();
        const state = useTransitionState();
        let prevChildren;
        let children;
        onUpdated(() => {
          if (!prevChildren.length) {
            return;
          }
          const moveClass = props.moveClass || `${props.name || "v"}-move`;
          if (!hasCSSTransform(prevChildren[0].el, instance.vnode.el, moveClass)) {
            return;
          }
          prevChildren.forEach(callPendingCbs);
          prevChildren.forEach(recordPosition);
          const movedChildren = prevChildren.filter(applyTranslation);
          forceReflow();
          movedChildren.forEach((c) => {
            const el = c.el;
            const style = el.style;
            addTransitionClass(el, moveClass);
            style.transform = style.webkitTransform = style.transitionDuration = "";
            const cb = el._moveCb = (e) => {
              if (e && e.target !== el) {
                return;
              }
              if (!e || /transform$/.test(e.propertyName)) {
                el.removeEventListener("transitionend", cb);
                el._moveCb = null;
                removeTransitionClass(el, moveClass);
              }
            };
            el.addEventListener("transitionend", cb);
          });
        });
        return () => {
          const rawProps = toRaw(props);
          const cssTransitionProps = resolveTransitionProps(rawProps);
          let tag = rawProps.tag || Fragment;
          prevChildren = children;
          children = slots.default ? getTransitionRawChildren(slots.default()) : [];
          for (let i = 0; i < children.length; i++) {
            const child = children[i];
            if (child.key != null) {
              setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));
            } else if (true) {
              warn2(`<TransitionGroup> children must be keyed.`);
            }
          }
          if (prevChildren) {
            for (let i = 0; i < prevChildren.length; i++) {
              const child = prevChildren[i];
              setTransitionHooks(child, resolveTransitionHooks(child, cssTransitionProps, state, instance));
              positionMap.set(child, child.el.getBoundingClientRect());
            }
          }
          return createVNode(tag, null, children);
        };
      }
    };
    TransitionGroup = TransitionGroupImpl;
    getModelAssigner = (vnode) => {
      const fn = vnode.props["onUpdate:modelValue"];
      return isArray(fn) ? (value) => invokeArrayFns(fn, value) : fn;
    };
    vModelText = {
      created(el, { modifiers: { lazy, trim, number } }, vnode) {
        el._assign = getModelAssigner(vnode);
        const castToNumber = number || vnode.props && vnode.props.type === "number";
        addEventListener(el, lazy ? "change" : "input", (e) => {
          if (e.target.composing)
            return;
          let domValue = el.value;
          if (trim) {
            domValue = domValue.trim();
          } else if (castToNumber) {
            domValue = toNumber(domValue);
          }
          el._assign(domValue);
        });
        if (trim) {
          addEventListener(el, "change", () => {
            el.value = el.value.trim();
          });
        }
        if (!lazy) {
          addEventListener(el, "compositionstart", onCompositionStart);
          addEventListener(el, "compositionend", onCompositionEnd);
          addEventListener(el, "change", onCompositionEnd);
        }
      },
      // set value on mounted so it's after min/max for type="range"
      mounted(el, { value }) {
        el.value = value == null ? "" : value;
      },
      beforeUpdate(el, { value, modifiers: { lazy, trim, number } }, vnode) {
        el._assign = getModelAssigner(vnode);
        if (el.composing)
          return;
        if (document.activeElement === el) {
          if (lazy) {
            return;
          }
          if (trim && el.value.trim() === value) {
            return;
          }
          if ((number || el.type === "number") && toNumber(el.value) === value) {
            return;
          }
        }
        const newValue = value == null ? "" : value;
        if (el.value !== newValue) {
          el.value = newValue;
        }
      }
    };
    vModelCheckbox = {
      // #4096 array checkboxes need to be deep traversed
      deep: true,
      created(el, _, vnode) {
        el._assign = getModelAssigner(vnode);
        addEventListener(el, "change", () => {
          const modelValue = el._modelValue;
          const elementValue = getValue(el);
          const checked = el.checked;
          const assign = el._assign;
          if (isArray(modelValue)) {
            const index = looseIndexOf(modelValue, elementValue);
            const found = index !== -1;
            if (checked && !found) {
              assign(modelValue.concat(elementValue));
            } else if (!checked && found) {
              const filtered = [...modelValue];
              filtered.splice(index, 1);
              assign(filtered);
            }
          } else if (isSet(modelValue)) {
            const cloned = new Set(modelValue);
            if (checked) {
              cloned.add(elementValue);
            } else {
              cloned.delete(elementValue);
            }
            assign(cloned);
          } else {
            assign(getCheckboxValue(el, checked));
          }
        });
      },
      // set initial checked on mount to wait for true-value/false-value
      mounted: setChecked,
      beforeUpdate(el, binding, vnode) {
        el._assign = getModelAssigner(vnode);
        setChecked(el, binding, vnode);
      }
    };
    vModelRadio = {
      created(el, { value }, vnode) {
        el.checked = looseEqual(value, vnode.props.value);
        el._assign = getModelAssigner(vnode);
        addEventListener(el, "change", () => {
          el._assign(getValue(el));
        });
      },
      beforeUpdate(el, { value, oldValue }, vnode) {
        el._assign = getModelAssigner(vnode);
        if (value !== oldValue) {
          el.checked = looseEqual(value, vnode.props.value);
        }
      }
    };
    vModelSelect = {
      // <select multiple> value need to be deep traversed
      deep: true,
      created(el, { value, modifiers: { number } }, vnode) {
        const isSetModel = isSet(value);
        addEventListener(el, "change", () => {
          const selectedVal = Array.prototype.filter.call(el.options, (o) => o.selected).map((o) => number ? toNumber(getValue(o)) : getValue(o));
          el._assign(el.multiple ? isSetModel ? new Set(selectedVal) : selectedVal : selectedVal[0]);
        });
        el._assign = getModelAssigner(vnode);
      },
      // set value in mounted & updated because <select> relies on its children
      // <option>s.
      mounted(el, { value }) {
        setSelected(el, value);
      },
      beforeUpdate(el, _binding, vnode) {
        el._assign = getModelAssigner(vnode);
      },
      updated(el, { value }) {
        setSelected(el, value);
      }
    };
    vModelDynamic = {
      created(el, binding, vnode) {
        callModelHook(el, binding, vnode, null, "created");
      },
      mounted(el, binding, vnode) {
        callModelHook(el, binding, vnode, null, "mounted");
      },
      beforeUpdate(el, binding, vnode, prevVNode) {
        callModelHook(el, binding, vnode, prevVNode, "beforeUpdate");
      },
      updated(el, binding, vnode, prevVNode) {
        callModelHook(el, binding, vnode, prevVNode, "updated");
      }
    };
    systemModifiers = ["ctrl", "shift", "alt", "meta"];
    modifierGuards = {
      stop: (e) => e.stopPropagation(),
      prevent: (e) => e.preventDefault(),
      self: (e) => e.target !== e.currentTarget,
      ctrl: (e) => !e.ctrlKey,
      shift: (e) => !e.shiftKey,
      alt: (e) => !e.altKey,
      meta: (e) => !e.metaKey,
      left: (e) => "button" in e && e.button !== 0,
      middle: (e) => "button" in e && e.button !== 1,
      right: (e) => "button" in e && e.button !== 2,
      exact: (e, modifiers) => systemModifiers.some((m) => e[`${m}Key`] && !modifiers.includes(m))
    };
    withModifiers = (fn, modifiers) => {
      return (event, ...args) => {
        for (let i = 0; i < modifiers.length; i++) {
          const guard = modifierGuards[modifiers[i]];
          if (guard && guard(event, modifiers))
            return;
        }
        return fn(event, ...args);
      };
    };
    keyNames = {
      esc: "escape",
      space: " ",
      up: "arrow-up",
      left: "arrow-left",
      right: "arrow-right",
      down: "arrow-down",
      delete: "backspace"
    };
    withKeys = (fn, modifiers) => {
      return (event) => {
        if (!("key" in event)) {
          return;
        }
        const eventKey = hyphenate(event.key);
        if (modifiers.some((k) => k === eventKey || keyNames[k] === eventKey)) {
          return fn(event);
        }
      };
    };
    vShow = {
      beforeMount(el, { value }, { transition }) {
        el._vod = el.style.display === "none" ? "" : el.style.display;
        if (transition && value) {
          transition.beforeEnter(el);
        } else {
          setDisplay(el, value);
        }
      },
      mounted(el, { value }, { transition }) {
        if (transition && value) {
          transition.enter(el);
        }
      },
      updated(el, { value, oldValue }, { transition }) {
        if (!value === !oldValue)
          return;
        if (transition) {
          if (value) {
            transition.beforeEnter(el);
            setDisplay(el, true);
            transition.enter(el);
          } else {
            transition.leave(el, () => {
              setDisplay(el, false);
            });
          }
        } else {
          setDisplay(el, value);
        }
      },
      beforeUnmount(el, { value }) {
        setDisplay(el, value);
      }
    };
    rendererOptions = extend({ patchProp }, nodeOps);
    enabledHydration = false;
    render = (...args) => {
      ensureRenderer().render(...args);
    };
    hydrate = (...args) => {
      ensureHydrationRenderer().hydrate(...args);
    };
    createApp = (...args) => {
      const app = ensureRenderer().createApp(...args);
      if (true) {
        injectNativeTagCheck(app);
        injectCompilerOptionsCheck(app);
      }
      const { mount } = app;
      app.mount = (containerOrSelector) => {
        const container = normalizeContainer(containerOrSelector);
        if (!container)
          return;
        const component = app._component;
        if (!isFunction(component) && !component.render && !component.template) {
          component.template = container.innerHTML;
        }
        container.innerHTML = "";
        const proxy = mount(container, false, container instanceof SVGElement);
        if (container instanceof Element) {
          container.removeAttribute("v-cloak");
          container.setAttribute("data-v-app", "");
        }
        return proxy;
      };
      return app;
    };
    createSSRApp = (...args) => {
      const app = ensureHydrationRenderer().createApp(...args);
      if (true) {
        injectNativeTagCheck(app);
        injectCompilerOptionsCheck(app);
      }
      const { mount } = app;
      app.mount = (containerOrSelector) => {
        const container = normalizeContainer(containerOrSelector);
        if (container) {
          return mount(container, true, container instanceof SVGElement);
        }
      };
      return app;
    };
  }
});

// ../../node_modules/vue/dist/vue.runtime.esm-bundler.js
var vue_runtime_esm_bundler_exports = {};
__export(vue_runtime_esm_bundler_exports, {
  $computed: () => $computed,
  $fromRefs: () => $fromRefs,
  $raw: () => $raw,
  $ref: () => $ref,
  BaseTransition: () => BaseTransition,
  Comment: () => Comment$1,
  EffectScope: () => EffectScope,
  Fragment: () => Fragment,
  KeepAlive: () => KeepAlive,
  ReactiveEffect: () => ReactiveEffect,
  Static: () => Static,
  Suspense: () => Suspense,
  Teleport: () => Teleport,
  Text: () => Text,
  Transition: () => Transition,
  TransitionGroup: () => TransitionGroup,
  VueElement: () => VueElement,
  callWithAsyncErrorHandling: () => callWithAsyncErrorHandling,
  callWithErrorHandling: () => callWithErrorHandling,
  camelize: () => camelize,
  capitalize: () => capitalize,
  cloneVNode: () => cloneVNode,
  compatUtils: () => compatUtils,
  compile: () => compile2,
  computed: () => computed,
  createApp: () => createApp,
  createBlock: () => createBlock,
  createCommentVNode: () => createCommentVNode,
  createElementBlock: () => createElementBlock,
  createElementVNode: () => createBaseVNode,
  createHydrationRenderer: () => createHydrationRenderer,
  createRenderer: () => createRenderer,
  createSSRApp: () => createSSRApp,
  createSlots: () => createSlots,
  createStaticVNode: () => createStaticVNode,
  createTextVNode: () => createTextVNode,
  createVNode: () => createVNode,
  customRef: () => customRef,
  defineAsyncComponent: () => defineAsyncComponent,
  defineComponent: () => defineComponent,
  defineCustomElement: () => defineCustomElement,
  defineEmits: () => defineEmits,
  defineExpose: () => defineExpose,
  defineProps: () => defineProps,
  defineSSRCustomElement: () => defineSSRCustomElement,
  devtools: () => devtools,
  effect: () => effect,
  effectScope: () => effectScope,
  getCurrentInstance: () => getCurrentInstance,
  getCurrentScope: () => getCurrentScope,
  getTransitionRawChildren: () => getTransitionRawChildren,
  guardReactiveProps: () => guardReactiveProps,
  h: () => h,
  handleError: () => handleError,
  hydrate: () => hydrate,
  initCustomFormatter: () => initCustomFormatter,
  inject: () => inject,
  isMemoSame: () => isMemoSame,
  isProxy: () => isProxy,
  isReactive: () => isReactive,
  isReadonly: () => isReadonly,
  isRef: () => isRef,
  isRuntimeOnly: () => isRuntimeOnly,
  isVNode: () => isVNode,
  markRaw: () => markRaw,
  mergeDefaults: () => mergeDefaults,
  mergeProps: () => mergeProps,
  nextTick: () => nextTick,
  normalizeClass: () => normalizeClass,
  normalizeProps: () => normalizeProps,
  normalizeStyle: () => normalizeStyle,
  onActivated: () => onActivated,
  onBeforeMount: () => onBeforeMount,
  onBeforeUnmount: () => onBeforeUnmount,
  onBeforeUpdate: () => onBeforeUpdate,
  onDeactivated: () => onDeactivated,
  onErrorCaptured: () => onErrorCaptured,
  onMounted: () => onMounted,
  onRenderTracked: () => onRenderTracked,
  onRenderTriggered: () => onRenderTriggered,
  onScopeDispose: () => onScopeDispose,
  onServerPrefetch: () => onServerPrefetch,
  onUnmounted: () => onUnmounted,
  onUpdated: () => onUpdated,
  openBlock: () => openBlock,
  popScopeId: () => popScopeId,
  provide: () => provide,
  proxyRefs: () => proxyRefs,
  pushScopeId: () => pushScopeId,
  queuePostFlushCb: () => queuePostFlushCb,
  reactive: () => reactive,
  readonly: () => readonly,
  ref: () => ref,
  registerRuntimeCompiler: () => registerRuntimeCompiler,
  render: () => render,
  renderList: () => renderList,
  renderSlot: () => renderSlot,
  resolveComponent: () => resolveComponent,
  resolveDirective: () => resolveDirective,
  resolveDynamicComponent: () => resolveDynamicComponent,
  resolveFilter: () => resolveFilter,
  resolveTransitionHooks: () => resolveTransitionHooks,
  setBlockTracking: () => setBlockTracking,
  setDevtoolsHook: () => setDevtoolsHook,
  setTransitionHooks: () => setTransitionHooks,
  shallowReactive: () => shallowReactive,
  shallowReadonly: () => shallowReadonly,
  shallowRef: () => shallowRef,
  ssrContextKey: () => ssrContextKey,
  ssrUtils: () => ssrUtils,
  stop: () => stop,
  toDisplayString: () => toDisplayString,
  toHandlerKey: () => toHandlerKey,
  toHandlers: () => toHandlers,
  toRaw: () => toRaw,
  toRef: () => toRef,
  toRefs: () => toRefs,
  transformVNodeArgs: () => transformVNodeArgs,
  triggerRef: () => triggerRef,
  unref: () => unref,
  useAttrs: () => useAttrs,
  useCssModule: () => useCssModule,
  useCssVars: () => useCssVars,
  useSSRContext: () => useSSRContext,
  useSlots: () => useSlots,
  useTransitionState: () => useTransitionState,
  vModelCheckbox: () => vModelCheckbox,
  vModelDynamic: () => vModelDynamic,
  vModelRadio: () => vModelRadio,
  vModelSelect: () => vModelSelect,
  vModelText: () => vModelText,
  vShow: () => vShow,
  version: () => version,
  warn: () => warn2,
  watch: () => watch,
  watchEffect: () => watchEffect,
  watchPostEffect: () => watchPostEffect,
  watchSyncEffect: () => watchSyncEffect,
  withAsyncContext: () => withAsyncContext,
  withCtx: () => withCtx,
  withDefaults: () => withDefaults,
  withDirectives: () => withDirectives,
  withKeys: () => withKeys,
  withMemo: () => withMemo,
  withModifiers: () => withModifiers,
  withScopeId: () => withScopeId
});
function initDev() {
  {
    initCustomFormatter();
  }
}
var compile2;
var init_vue_runtime_esm_bundler = __esm({
  "../../node_modules/vue/dist/vue.runtime.esm-bundler.js"() {
    init_runtime_dom_esm_bundler();
    init_runtime_dom_esm_bundler();
    if (true) {
      initDev();
    }
    compile2 = () => {
      if (true) {
        warn2(
          `Runtime compilation is not supported in this build of Vue. Configure your bundler to alias "vue" to "vue/dist/vue.esm-bundler.js".`
          /* should not happen */
        );
      }
    };
  }
});

// ../../node_modules/@kangc/v-md-editor/lib/base-editor.js
var require_base_editor = __commonJS({
  "../../node_modules/@kangc/v-md-editor/lib/base-editor.js"(exports, module) {
    (function webpackUniversalModuleDefinition(root, factory) {
      if (typeof exports === "object" && typeof module === "object")
        module.exports = factory((init_vue_runtime_esm_bundler(), __toCommonJS(vue_runtime_esm_bundler_exports)));
      else if (typeof define === "function" && define.amd)
        define("VMdEditor", ["vue"], factory);
      else if (typeof exports === "object")
        exports["VMdEditor"] = factory((init_vue_runtime_esm_bundler(), __toCommonJS(vue_runtime_esm_bundler_exports)));
      else
        root["VMdEditor"] = factory(root["Vue"]);
    })(typeof self !== "undefined" ? self : exports, function(__WEBPACK_EXTERNAL_MODULE__0__) {
      return (
        /******/
        function(modules) {
          var installedModules = {};
          function __webpack_require__(moduleId) {
            if (installedModules[moduleId]) {
              return installedModules[moduleId].exports;
            }
            var module2 = installedModules[moduleId] = {
              /******/
              i: moduleId,
              /******/
              l: false,
              /******/
              exports: {}
              /******/
            };
            modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
            module2.l = true;
            return module2.exports;
          }
          __webpack_require__.m = modules;
          __webpack_require__.c = installedModules;
          __webpack_require__.d = function(exports2, name, getter) {
            if (!__webpack_require__.o(exports2, name)) {
              Object.defineProperty(exports2, name, { enumerable: true, get: getter });
            }
          };
          __webpack_require__.r = function(exports2) {
            if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
              Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
            }
            Object.defineProperty(exports2, "__esModule", { value: true });
          };
          __webpack_require__.t = function(value, mode) {
            if (mode & 1)
              value = __webpack_require__(value);
            if (mode & 8)
              return value;
            if (mode & 4 && typeof value === "object" && value && value.__esModule)
              return value;
            var ns = /* @__PURE__ */ Object.create(null);
            __webpack_require__.r(ns);
            Object.defineProperty(ns, "default", { enumerable: true, value });
            if (mode & 2 && typeof value != "string")
              for (var key in value)
                __webpack_require__.d(ns, key, (function(key2) {
                  return value[key2];
                }).bind(null, key));
            return ns;
          };
          __webpack_require__.n = function(module2) {
            var getter = module2 && module2.__esModule ? (
              /******/
              function getDefault() {
                return module2["default"];
              }
            ) : (
              /******/
              function getModuleExports() {
                return module2;
              }
            );
            __webpack_require__.d(getter, "a", getter);
            return getter;
          };
          __webpack_require__.o = function(object, property) {
            return Object.prototype.hasOwnProperty.call(object, property);
          };
          __webpack_require__.p = "";
          return __webpack_require__(__webpack_require__.s = 108);
        }([
          /* 0 */
          /***/
          function(module2, exports2) {
            module2.exports = __WEBPACK_EXTERNAL_MODULE__0__;
          },
          /* 1 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return bold;
            });
            __webpack_require__.d(__webpack_exports__, "b", function() {
              return clear2;
            });
            __webpack_require__.d(__webpack_exports__, "c", function() {
              return code;
            });
            __webpack_require__.d(__webpack_exports__, "d", function() {
              return fullscreen;
            });
            __webpack_require__.d(__webpack_exports__, "e", function() {
              return h1;
            });
            __webpack_require__.d(__webpack_exports__, "f", function() {
              return h2;
            });
            __webpack_require__.d(__webpack_exports__, "g", function() {
              return h3;
            });
            __webpack_require__.d(__webpack_exports__, "h", function() {
              return h4;
            });
            __webpack_require__.d(__webpack_exports__, "i", function() {
              return h5;
            });
            __webpack_require__.d(__webpack_exports__, "j", function() {
              return h6;
            });
            __webpack_require__.d(__webpack_exports__, "k", function() {
              return hr;
            });
            __webpack_require__.d(__webpack_exports__, "l", function() {
              return image;
            });
            __webpack_require__.d(__webpack_exports__, "m", function() {
              return italic;
            });
            __webpack_require__.d(__webpack_exports__, "n", function() {
              return link;
            });
            __webpack_require__.d(__webpack_exports__, "o", function() {
              return ol;
            });
            __webpack_require__.d(__webpack_exports__, "p", function() {
              return quote;
            });
            __webpack_require__.d(__webpack_exports__, "q", function() {
              return redo;
            });
            __webpack_require__.d(__webpack_exports__, "r", function() {
              return strikethrough;
            });
            __webpack_require__.d(__webpack_exports__, "s", function() {
              return syncScroll;
            });
            __webpack_require__.d(__webpack_exports__, "t", function() {
              return table;
            });
            __webpack_require__.d(__webpack_exports__, "u", function() {
              return ul;
            });
            __webpack_require__.d(__webpack_exports__, "v", function() {
              return undo;
            });
            var bold = "bold";
            var clear2 = "clear";
            var code = "code";
            var fullscreen = "fullscreen";
            var h1 = "h1";
            var h2 = "h2";
            var h3 = "h3";
            var h4 = "h4";
            var h5 = "h5";
            var h6 = "h6";
            var hr = "hr";
            var image = "image";
            var italic = "italic";
            var link = "link";
            var ol = "ol";
            var quote = "quote";
            var redo = "redo";
            var strikethrough = "strikethrough";
            var syncScroll = "sync-scroll";
            var table = "table";
            var ul = "ul";
            var undo = "undo";
          },
          /* 2 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.d(__webpack_exports__, "f", function() {
              return isObject3;
            });
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return arraytoObject;
            });
            __webpack_require__.d(__webpack_exports__, "c", function() {
              return importAll;
            });
            __webpack_require__.d(__webpack_exports__, "d", function() {
              return inBrowser;
            });
            __webpack_require__.d(__webpack_exports__, "e", function() {
              return isKorean;
            });
            __webpack_require__.d(__webpack_exports__, "b", function() {
              return generatorText;
            });
            var toString = Object.prototype.toString;
            var isObject3 = function isObject4(target) {
              return toString.call(target) === "[object Object]";
            };
            function extend2(to, _from) {
              Object.keys(_from).forEach(function(key) {
                to[key] = _from[key];
              });
              return to;
            }
            function arraytoObject(arr) {
              var res = {};
              for (var i = 0; i < arr.length; i++) {
                if (arr[i]) {
                  extend2(res, arr[i]);
                }
              }
              return res;
            }
            function importAll(map2, r) {
              r.keys().forEach(function(filePath) {
                map2[filePath] = r(filePath);
              });
            }
            var inBrowser = typeof window !== "undefined";
            function isKorean(text) {
              var reg = /([(\uAC00-\uD7AF)|(\u3130-\u318F)])+/gi;
              return reg.test(text);
            }
            function generatorText(_ref) {
              var selected = _ref.selected, InsertGetter = _ref.InsertGetter, _ref$selectedGetter = _ref.selectedGetter, selectedGetter = _ref$selectedGetter === void 0 ? function(selected2) {
                return selected2;
              } : _ref$selectedGetter, _ref$ignoreEmptyLine = _ref.ignoreEmptyLine, ignoreEmptyLine = _ref$ignoreEmptyLine === void 0 ? true : _ref$ignoreEmptyLine;
              var insertContent;
              var newSelected;
              if (selected) {
                newSelected = selectedGetter(selected);
                insertContent = InsertGetter(selected, 1);
                if (selected.indexOf("\n") !== -1) {
                  insertContent = selected.split("\n").map(function(rowText, index) {
                    var isEmptyLine = !rowText;
                    if (ignoreEmptyLine && isEmptyLine)
                      return "";
                    return InsertGetter(rowText, index + 1).replace(selectedGetter(null), "");
                  }).join("\n");
                  newSelected = insertContent;
                }
              } else {
                insertContent = InsertGetter(null, 1);
                newSelected = selectedGetter(selected);
              }
              return {
                insertContent,
                newSelected
              };
            }
          },
          /* 3 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.d(__webpack_exports__, "c", function() {
              return LINE_MARKUP;
            });
            __webpack_require__.d(__webpack_exports__, "b", function() {
              return HEADING_MARKUP;
            });
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return ANCHOR_MARKUP;
            });
            var LINE_MARKUP = "data-v-md-line";
            var HEADING_MARKUP = "data-v-md-heading";
            var ANCHOR_MARKUP = "data-v-md-anchor";
          },
          /* 4 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_exports__["a"] = {
              PREVIEW: "preview",
              EDITABLE: "editable",
              EDIT: "edit"
            };
          },
          /* 5 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return getScrollTop;
            });
            __webpack_require__.d(__webpack_exports__, "b", function() {
              return scrollTo;
            });
            function getScrollTop(target) {
              var result = 0;
              if (target === window) {
                result = target.pageYOffset;
              } else if (target) {
                result = target.scrollTop;
              }
              return result;
            }
            function scrollTo(target, scrollTop) {
              if (target === window) {
                window.scrollTo(window.pageYOffset, scrollTop);
              } else if (target) {
                target.scrollTop = scrollTop;
              }
            }
          },
          /* 6 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return _extends;
            });
            function _extends() {
              _extends = Object.assign || function(target) {
                for (var i = 1; i < arguments.length; i++) {
                  var source = arguments[i];
                  for (var key in source) {
                    if (Object.prototype.hasOwnProperty.call(source, key)) {
                      target[key] = source[key];
                    }
                  }
                }
                return target;
              };
              return _extends.apply(this, arguments);
            }
          },
          /* 7 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            var esm_extends = __webpack_require__(6);
            var lib = __webpack_require__(11);
            var lib_default = __webpack_require__.n(lib);
            var svgTagWhiteList = {
              svg: [],
              altGlyph: [],
              altGlyphDef: [],
              altGlyphItem: [],
              animate: [],
              animateColor: [],
              animateMotion: [],
              animateTransform: [],
              circle: [],
              clipPath: [],
              "color-profile": [],
              cursor: [],
              "definition-src": [],
              defs: [],
              desc: [],
              ellipse: [],
              feBlend: [],
              feColorMatrix: [],
              feComponentTransfer: [],
              feComposite: [],
              feConvolveMatrix: [],
              feDiffuseLighting: [],
              feDisplacementMap: [],
              feDistantLight: [],
              feFlood: [],
              feFuncA: [],
              feFuncB: [],
              feFuncG: [],
              feFuncR: [],
              feGaussianBlur: [],
              feImage: [],
              feMerge: [],
              feMergeNode: [],
              feMorphology: [],
              feOffset: [],
              fePointLight: [],
              feSpecularLighting: [],
              feSpotLight: [],
              feTile: [],
              feTurbulence: [],
              filter: [],
              font: [],
              foreignObject: [],
              g: [],
              glyph: [],
              glyphRef: [],
              hkern: [],
              image: [],
              line: [],
              linearGradient: [],
              marker: [],
              mask: [],
              metadata: [],
              "missing-glyph": [],
              mpath: [],
              path: [],
              pattern: [],
              polygon: [],
              polyline: [],
              radialGradient: [],
              rect: [],
              set: [],
              stop: [],
              style: [],
              switch: [],
              symbol: [],
              text: [],
              textPath: [],
              title: [],
              tref: [],
              tspan: [],
              use: [],
              view: [],
              vkern: []
            };
            var svgAttrWhiteList = ["width", "height", "x", "y", "rx", "ry", "cx", "cy", "r", "viewbox", "points", "fill", "stroke", "stroke-width", "opacity", "transform", "d", "text-anchor", "font-family", "font-size", "font-weight", "filter", "href", "xlink:href"];
            var katexTagWhiteList = {
              math: [],
              annotation: [],
              semantics: [],
              mtext: [],
              mn: [],
              mo: [],
              mi: [],
              mspace: [],
              mover: [],
              munder: [],
              munderover: [],
              msup: [],
              msub: [],
              msubsup: [],
              mfrac: [],
              mroot: [],
              msqrt: [],
              mtable: [],
              mtr: [],
              mtd: [],
              mlabeledtr: [],
              mrow: [],
              menclose: [],
              mstyle: [],
              mpadded: [],
              mphantom: [],
              mglyph: []
            };
            var katexAttrWhiteList = ["mathcolor", "mathbackground", "mathsize", "mathvariant", "mathfamily", "mathweight", "mathstyle", "mathdisplay"];
            var attrWhiteList = ["style", "align", "class", "id"];
            var prefixAttrWhiteList = ["data-"];
            var commonWhiteList = {
              input: ["type"],
              ol: ["reversed", "start", "type"],
              button: ["type"],
              summary: []
            };
            var options = {
              whiteList: Object(esm_extends[
                "a"
                /* default */
              ])({}, lib_default.a.getDefaultWhiteList(), commonWhiteList, svgTagWhiteList, katexTagWhiteList),
              onIgnoreTagAttr: function onIgnoreTagAttr(tag, name, value) {
                if (svgTagWhiteList[tag] && svgAttrWhiteList.includes(name) || katexTagWhiteList[tag] && katexAttrWhiteList.includes(name) || attrWhiteList.some(function(attr) {
                  return attr === name;
                }) || prefixAttrWhiteList.some(function(prefix) {
                  return name.startsWith(prefix);
                })) {
                  return name + '="' + lib_default.a.escapeAttrValue(value) + '"';
                }
              }
            };
            var xssFilterInstance = new lib_default.a.FilterXSS(options);
            xssFilterInstance.extend = function(extendOptions) {
              var instanceOptions = xssFilterInstance.options;
              Object.keys(extendOptions).forEach(function(optionName) {
                if (optionName === "whiteList") {
                  Object.keys(extendOptions.whiteList).forEach(function(tagName) {
                    var tagAttrWhiteList = extendOptions.whiteList[tagName];
                    var instanceWhiteList = instanceOptions.whiteList;
                    if (instanceWhiteList[tagName]) {
                      instanceWhiteList[tagName] = [].concat(instanceWhiteList[tagName], tagAttrWhiteList);
                    } else {
                      instanceWhiteList[tagName] = tagAttrWhiteList;
                    }
                  });
                } else if (optionName === "onIgnoreTagAttr") {
                  var oldHandler = instanceOptions[optionName];
                  instanceOptions[optionName] = function() {
                    var _extendOptions$option;
                    for (var _len = arguments.length, arg = new Array(_len), _key = 0; _key < _len; _key++) {
                      arg[_key] = arguments[_key];
                    }
                    var oldReturnVal = oldHandler.call.apply(oldHandler, [this].concat(arg));
                    var newReturnVal = (_extendOptions$option = extendOptions[optionName]).call.apply(_extendOptions$option, [this].concat(arg));
                    return oldReturnVal || newReturnVal;
                  };
                } else {
                  instanceOptions[optionName] = extendOptions[optionName];
                }
              });
            };
            var xss = __webpack_exports__["a"] = xssFilterInstance;
          },
          /* 8 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.d(__webpack_exports__, "b", function() {
              return smooth;
            });
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return smoothScroll;
            });
            var _scroll_top__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
            function smooth(_ref) {
              var currentScrollTop = _ref.currentScrollTop, scrollToTop = _ref.scrollToTop, scrollFn = _ref.scrollFn, _ref$percent = _ref.percent, percent = _ref$percent === void 0 ? 10 : _ref$percent, onScrollEnd = _ref.onScrollEnd;
              var scrollWay = scrollToTop > currentScrollTop ? "down" : "up";
              var step = (scrollToTop - currentScrollTop) * (percent / 100);
              var id;
              var scroll = function scroll2() {
                currentScrollTop += step;
                if (scrollWay === "down" && currentScrollTop >= scrollToTop || scrollWay === "up" && currentScrollTop <= scrollToTop) {
                  scrollFn(scrollToTop);
                  window.cancelAnimationFrame(id);
                  if (onScrollEnd)
                    window.requestAnimationFrame(onScrollEnd);
                } else {
                  scrollFn(currentScrollTop);
                  window.requestAnimationFrame(scroll2);
                }
              };
              window.requestAnimationFrame(scroll);
            }
            function smoothScroll(_ref2) {
              var scrollTarget = _ref2.scrollTarget, scrollToTop = _ref2.scrollToTop, _ref2$percent = _ref2.percent, percent = _ref2$percent === void 0 ? 10 : _ref2$percent, onScrollEnd = _ref2.onScrollEnd;
              var currentScrollTop = Object(_scroll_top__WEBPACK_IMPORTED_MODULE_0__[
                /* getScrollTop */
                "a"
              ])(scrollTarget);
              smooth({
                currentScrollTop,
                scrollToTop,
                scrollFn: function scrollFn(scrollTop) {
                  return Object(_scroll_top__WEBPACK_IMPORTED_MODULE_0__[
                    /* scrollTo */
                    "b"
                  ])(scrollTarget, scrollTop);
                },
                percent,
                onScrollEnd
              });
            }
          },
          /* 9 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_ = __webpack_require__(0);
            function render2(_ctx, _cache, $props, $setup, $data, $options) {
              return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                "div",
                {
                  class: "v-md-editor-preview",
                  style: {
                    tabSize: _ctx.tabSize,
                    "-moz-tab-size": _ctx.tabSize,
                    "-o-tab-size": _ctx.tabSize
                  },
                  onClick: _cache[1] || (_cache[1] = function() {
                    return _ctx.handlePreviewClick.apply(_ctx, arguments);
                  })
                },
                [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                  "div",
                  {
                    class: [_ctx.previewClass],
                    innerHTML: _ctx.html
                  },
                  null,
                  10,
                  ["innerHTML"]
                )],
                4
                /* STYLE */
              );
            }
            var xss = __webpack_require__(7);
            var lang = __webpack_require__(13);
            var v_md_parser_VMdParser = function() {
              function VMdParser() {
                this.lang = new lang[
                  "a"
                  /* default */
                ]();
              }
              var _proto = VMdParser.prototype;
              _proto.defaultMarkdownLoader = function defaultMarkdownLoader(text) {
                return text;
              };
              _proto.use = function use(optionsOrInstall, opt) {
                if (typeof optionsOrInstall === "function") {
                  optionsOrInstall(this, opt);
                } else {
                  optionsOrInstall.install(this, opt);
                }
                return this;
              };
              _proto.theme = function theme(themeConfig) {
                this.themeConfig = themeConfig;
              };
              _proto.extendMarkdown = function extendMarkdown(extender) {
                if (!this.themeConfig) {
                  return console.error("Please use theme before using plugins");
                }
                var markdownParser = this.themeConfig.markdownParser;
                extender(markdownParser);
              };
              _proto.parse = function parse(text) {
                var _markdownParser$rende;
                var markdownParser = this.themeConfig.markdownParser;
                var markdownLoader = (markdownParser == null ? void 0 : (_markdownParser$rende = markdownParser.render) == null ? void 0 : _markdownParser$rende.bind(markdownParser)) || this.defaultMarkdownLoader;
                if (typeof markdownLoader !== "function" || markdownLoader === this.defaultMarkdownLoader) {
                  console.error("Please configure your markdown parser");
                }
                return markdownLoader(text);
              };
              return VMdParser;
            }();
            var preview = __webpack_require__(16);
            var component = {
              name: "v-md-preview",
              mixins: [preview[
                "a"
                /* default */
              ]],
              props: {
                text: {
                  type: String,
                  default: ""
                },
                theme: Object,
                beforeChange: Function
              },
              emits: ["change"],
              data: function data() {
                return {
                  html: ""
                };
              },
              watch: {
                text: function text() {
                  this.handleTextChange();
                },
                langConfig: function langConfig() {
                  this.handleTextChange();
                }
              },
              computed: {
                vMdParser: function vMdParser2() {
                  return this.$options.vMdParser;
                },
                previewClass: function previewClass() {
                  return this.vMdParser.themeConfig.previewClass;
                },
                langConfig: function langConfig() {
                  return this.vMdParser.lang.config;
                }
              },
              created: function created() {
                this.handleTextChange();
              },
              methods: {
                handleTextChange: function handleTextChange() {
                  var _this = this;
                  var next = function next2(text) {
                    _this.html = xss[
                      "a"
                      /* default */
                    ].process(_this.$options.vMdParser.parse(text));
                    _this.$emit("change", text, _this.html);
                  };
                  if (this.beforeChange) {
                    this.beforeChange(this.text, next);
                  } else {
                    next(this.text);
                  }
                }
              }
            };
            var vMdParser = new v_md_parser_VMdParser();
            vMdParser.lang.config = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["reactive"])(vMdParser.lang.config);
            component.vMdParser = new v_md_parser_VMdParser();
            var previewvue_type_script_lang_js = component;
            previewvue_type_script_lang_js.render = render2;
            var src_preview = previewvue_type_script_lang_js;
            var font = __webpack_require__(18);
            var version2 = "2.3.18";
            var preview_install = function install(app) {
              app.component(src_preview.name, src_preview);
            };
            src_preview.version = version2;
            src_preview.install = preview_install;
            src_preview.xss = xss[
              "a"
              /* default */
            ];
            src_preview.use = function(optionsOrInstall, opt) {
              if (typeof optionsOrInstall === "function") {
                optionsOrInstall(src_preview, opt);
              } else {
                optionsOrInstall.install(src_preview, opt);
              }
              return src_preview;
            };
            var src_preview_0 = __webpack_exports__["default"] = src_preview;
          },
          /* 10 */
          /***/
          function(module2, exports2, __webpack_require__) {
            module2.exports = __webpack_require__(37);
          },
          /* 11 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var DEFAULT = __webpack_require__(19);
            var parser = __webpack_require__(22);
            var FilterXSS = __webpack_require__(26);
            function filterXSS(html, options) {
              var xss = new FilterXSS(options);
              return xss.process(html);
            }
            exports2 = module2.exports = filterXSS;
            exports2.filterXSS = filterXSS;
            exports2.FilterXSS = FilterXSS;
            for (var i in DEFAULT)
              exports2[i] = DEFAULT[i];
            for (var i in parser)
              exports2[i] = parser[i];
            if (typeof window !== "undefined") {
              window.filterXSS = module2.exports;
            }
            function isWorkerEnv() {
              return typeof self !== "undefined" && typeof DedicatedWorkerGlobalScope !== "undefined" && self instanceof DedicatedWorkerGlobalScope;
            }
            if (isWorkerEnv()) {
              self.filterXSS = module2.exports;
            }
          },
          /* 12 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return filesFilter;
            });
            __webpack_require__.d(__webpack_exports__, "b", function() {
              return getFilesFromClipboardData;
            });
            function filesFilter(files, config) {
              var accept = config.accept;
              var filesKeys = Object.keys(files).filter(function(key) {
                var file = files[key];
                var type = file.type, name = file.name;
                var extension = name.indexOf(".") > -1 ? "." + name.split(".").pop() : "";
                var baseType = type.replace(/\/.*$/, "");
                return accept.split(",").map(function(type2) {
                  return type2.trim();
                }).filter(function(type2) {
                  return type2;
                }).some(function(acceptedType) {
                  if (/\..+$/.test(acceptedType)) {
                    return extension === acceptedType;
                  }
                  if (/\/\*$/.test(acceptedType)) {
                    return baseType === acceptedType.replace(/\/\*$/, "");
                  }
                  if (/^[^\/]+\/[^\/]+$/.test(acceptedType)) {
                    return type === acceptedType;
                  }
                  return false;
                });
              });
              return filesKeys.map(function(key) {
                return files[key];
              });
            }
            function getFilesFromClipboardData(clipboardData) {
              var files = [];
              Object.keys(clipboardData.items).forEach(function(key) {
                var item = clipboardData.items[key];
                if (item.kind === "file") {
                  var file = item.getAsFile();
                  if (file)
                    files.push(file);
                }
              });
              return files;
            }
          },
          /* 13 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return (
                /* binding */
                lang_Lang
              );
            });
            var util = __webpack_require__(2);
            var deep_assign_hasOwnProperty = Object.prototype.hasOwnProperty;
            function assignKey(to, from, key) {
              var val = from[key];
              if (val === void 0 || val === null) {
                return;
              }
              if (!deep_assign_hasOwnProperty.call(to, key) || !Object(util[
                "f"
                /* isObject */
              ])(val)) {
                to[key] = val;
              } else {
                to[key] = deepAssign(Object(to[key]), from[key]);
              }
            }
            function deepAssign(to, from) {
              Object.keys(from).forEach(function(key) {
                assignKey(to, from, key);
              });
              return to;
            }
            var lang_Lang = function() {
              function Lang(options) {
                if (options === void 0) {
                  options = {};
                }
                this.config = {
                  lang: "zh-CN",
                  langConfig: {
                    "zh-CN": {}
                  }
                };
                this.options = options;
              }
              var _proto = Lang.prototype;
              _proto.use = function use(lang, config) {
                var _this$add;
                this.config.lang = lang;
                this.add((_this$add = {}, _this$add[lang] = config, _this$add));
                if (this.options.afterUse)
                  this.options.afterUse(lang, config);
              };
              _proto.add = function add2(config) {
                if (config === void 0) {
                  config = {};
                }
                deepAssign(this.config.langConfig, config);
              };
              return Lang;
            }();
          },
          /* 14 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var DEFAULT = __webpack_require__(20);
            var FilterCSS = __webpack_require__(24);
            function filterCSS(html, options) {
              var xss = new FilterCSS(options);
              return xss.process(html);
            }
            exports2 = module2.exports = filterCSS;
            exports2.FilterCSS = FilterCSS;
            for (var i in DEFAULT)
              exports2[i] = DEFAULT[i];
            if (typeof window !== "undefined") {
              window.filterCSS = module2.exports;
            }
          },
          /* 15 */
          /***/
          function(module2, exports2) {
            module2.exports = {
              indexOf: function(arr, item) {
                var i, j;
                if (Array.prototype.indexOf) {
                  return arr.indexOf(item);
                }
                for (i = 0, j = arr.length; i < j; i++) {
                  if (arr[i] === item) {
                    return i;
                  }
                }
                return -1;
              },
              forEach: function(arr, fn, scope) {
                var i, j;
                if (Array.prototype.forEach) {
                  return arr.forEach(fn, scope);
                }
                for (i = 0, j = arr.length; i < j; i++) {
                  fn.call(scope, arr[i], i, arr);
                }
              },
              trim: function(str) {
                if (String.prototype.trim) {
                  return str.trim();
                }
                return str.replace(/(^\s*)|(\s*$)/g, "");
              },
              spaceIndex: function(str) {
                var reg = /\s|\n|\t/;
                var match = reg.exec(str);
                return match ? match.index : -1;
              }
            };
          },
          /* 16 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            var _utils_scroll_top__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
            var _utils_smooth_scroll__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);
            var _utils_constants_markup__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
            __webpack_exports__["a"] = {
              props: {
                tabSize: {
                  type: Number,
                  default: 2
                },
                scrollContainer: {
                  type: Function,
                  default: function _default() {
                    return window;
                  }
                },
                top: {
                  type: Number,
                  default: 0
                }
              },
              emits: ["image-click"],
              methods: {
                handlePreviewClick: function handlePreviewClick(e) {
                  var target = e.target;
                  if (target.tagName === "IMG") {
                    var src = target.getAttribute("src");
                    if (!src)
                      return;
                    var imageEls = Array.from(this.$el.querySelectorAll("img"));
                    var images = imageEls.map(function(el) {
                      return el.getAttribute("src");
                    }).filter(function(src2) {
                      return src2;
                    });
                    var imagePreviewInitIndex = imageEls.indexOf(target);
                    this.$emit("image-click", images, imagePreviewInitIndex);
                    return;
                  }
                  var scrollToTargetId = target.getAttribute(_utils_constants_markup__WEBPACK_IMPORTED_MODULE_2__[
                    /* ANCHOR_MARKUP */
                    "a"
                  ]);
                  var scrollToTarget = this.$el.querySelector("[" + _utils_constants_markup__WEBPACK_IMPORTED_MODULE_2__[
                    /* HEADING_MARKUP */
                    "b"
                  ] + '="' + scrollToTargetId + '"]');
                  if (scrollToTarget) {
                    this.scrollToTarget({
                      target: scrollToTarget
                    });
                  }
                },
                getOffsetTop: function getOffsetTop(target, container) {
                  var rect = target.getBoundingClientRect();
                  if (container === window || container === document.documentElement) {
                    return rect.top;
                  }
                  return rect.top - container.getBoundingClientRect().top;
                },
                scrollToTarget: function scrollToTarget(_ref) {
                  var target = _ref.target, _ref$scrollContainer = _ref.scrollContainer, scrollContainer = _ref$scrollContainer === void 0 ? this.scrollContainer() : _ref$scrollContainer, _ref$top = _ref.top, top = _ref$top === void 0 ? this.top : _ref$top, onScrollEnd = _ref.onScrollEnd;
                  var offsetTop = this.getOffsetTop(target, scrollContainer);
                  var scrollTop = Object(_utils_scroll_top__WEBPACK_IMPORTED_MODULE_0__[
                    /* getScrollTop */
                    "a"
                  ])(scrollContainer) + offsetTop - top;
                  Object(_utils_smooth_scroll__WEBPACK_IMPORTED_MODULE_1__[
                    /* default */
                    "a"
                  ])({
                    scrollTarget: scrollContainer,
                    scrollToTop: scrollTop,
                    onScrollEnd
                  });
                },
                scrollToLine: function scrollToLine(_ref2) {
                  var lineIndex = _ref2.lineIndex, onScrollEnd = _ref2.onScrollEnd;
                  if (lineIndex) {
                    var target = this.$el.querySelector("[" + _utils_constants_markup__WEBPACK_IMPORTED_MODULE_2__[
                      /* LINE_MARKUP */
                      "c"
                    ] + '="' + lineIndex + '"]');
                    if (target)
                      this.scrollToTarget({
                        target,
                        onScrollEnd
                      });
                  }
                }
              }
            };
          },
          /* 17 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return _asyncToGenerator;
            });
            function asyncGeneratorStep(gen, resolve2, reject, _next, _throw, key, arg) {
              try {
                var info = gen[key](arg);
                var value = info.value;
              } catch (error) {
                reject(error);
                return;
              }
              if (info.done) {
                resolve2(value);
              } else {
                Promise.resolve(value).then(_next, _throw);
              }
            }
            function _asyncToGenerator(fn) {
              return function() {
                var self2 = this, args = arguments;
                return new Promise(function(resolve2, reject) {
                  var gen = fn.apply(self2, args);
                  function _next(value) {
                    asyncGeneratorStep(gen, resolve2, reject, _next, _throw, "next", value);
                  }
                  function _throw(err) {
                    asyncGeneratorStep(gen, resolve2, reject, _next, _throw, "throw", err);
                  }
                  _next(void 0);
                });
              };
            }
          },
          /* 18 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 19 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var FilterCSS = __webpack_require__(14).FilterCSS;
            var getDefaultCSSWhiteList = __webpack_require__(14).getDefaultWhiteList;
            var _ = __webpack_require__(15);
            function getDefaultWhiteList() {
              return {
                a: ["target", "href", "title"],
                abbr: ["title"],
                address: [],
                area: ["shape", "coords", "href", "alt"],
                article: [],
                aside: [],
                audio: [
                  "autoplay",
                  "controls",
                  "crossorigin",
                  "loop",
                  "muted",
                  "preload",
                  "src"
                ],
                b: [],
                bdi: ["dir"],
                bdo: ["dir"],
                big: [],
                blockquote: ["cite"],
                br: [],
                caption: [],
                center: [],
                cite: [],
                code: [],
                col: ["align", "valign", "span", "width"],
                colgroup: ["align", "valign", "span", "width"],
                dd: [],
                del: ["datetime"],
                details: ["open"],
                div: [],
                dl: [],
                dt: [],
                em: [],
                figcaption: [],
                figure: [],
                font: ["color", "size", "face"],
                footer: [],
                h1: [],
                h2: [],
                h3: [],
                h4: [],
                h5: [],
                h6: [],
                header: [],
                hr: [],
                i: [],
                img: ["src", "alt", "title", "width", "height"],
                ins: ["datetime"],
                li: [],
                mark: [],
                nav: [],
                ol: [],
                p: [],
                pre: [],
                s: [],
                section: [],
                small: [],
                span: [],
                sub: [],
                summary: [],
                sup: [],
                strong: [],
                strike: [],
                table: ["width", "border", "align", "valign"],
                tbody: ["align", "valign"],
                td: ["width", "rowspan", "colspan", "align", "valign"],
                tfoot: ["align", "valign"],
                th: ["width", "rowspan", "colspan", "align", "valign"],
                thead: ["align", "valign"],
                tr: ["rowspan", "align", "valign"],
                tt: [],
                u: [],
                ul: [],
                video: [
                  "autoplay",
                  "controls",
                  "crossorigin",
                  "loop",
                  "muted",
                  "playsinline",
                  "poster",
                  "preload",
                  "src",
                  "height",
                  "width"
                ]
              };
            }
            var defaultCSSFilter = new FilterCSS();
            function onTag(tag, html, options) {
            }
            function onIgnoreTag(tag, html, options) {
            }
            function onTagAttr(tag, name, value) {
            }
            function onIgnoreTagAttr(tag, name, value) {
            }
            function escapeHtml(html) {
              return html.replace(REGEXP_LT, "&lt;").replace(REGEXP_GT, "&gt;");
            }
            function safeAttrValue(tag, name, value, cssFilter) {
              value = friendlyAttrValue(value);
              if (name === "href" || name === "src") {
                value = _.trim(value);
                if (value === "#")
                  return "#";
                if (!(value.substr(0, 7) === "http://" || value.substr(0, 8) === "https://" || value.substr(0, 7) === "mailto:" || value.substr(0, 4) === "tel:" || value.substr(0, 11) === "data:image/" || value.substr(0, 6) === "ftp://" || value.substr(0, 2) === "./" || value.substr(0, 3) === "../" || value[0] === "#" || value[0] === "/")) {
                  return "";
                }
              } else if (name === "background") {
                REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
                if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
                  return "";
                }
              } else if (name === "style") {
                REGEXP_DEFAULT_ON_TAG_ATTR_7.lastIndex = 0;
                if (REGEXP_DEFAULT_ON_TAG_ATTR_7.test(value)) {
                  return "";
                }
                REGEXP_DEFAULT_ON_TAG_ATTR_8.lastIndex = 0;
                if (REGEXP_DEFAULT_ON_TAG_ATTR_8.test(value)) {
                  REGEXP_DEFAULT_ON_TAG_ATTR_4.lastIndex = 0;
                  if (REGEXP_DEFAULT_ON_TAG_ATTR_4.test(value)) {
                    return "";
                  }
                }
                if (cssFilter !== false) {
                  cssFilter = cssFilter || defaultCSSFilter;
                  value = cssFilter.process(value);
                }
              }
              value = escapeAttrValue(value);
              return value;
            }
            var REGEXP_LT = /</g;
            var REGEXP_GT = />/g;
            var REGEXP_QUOTE = /"/g;
            var REGEXP_QUOTE_2 = /&quot;/g;
            var REGEXP_ATTR_VALUE_1 = /&#([a-zA-Z0-9]*);?/gim;
            var REGEXP_ATTR_VALUE_COLON = /&colon;?/gim;
            var REGEXP_ATTR_VALUE_NEWLINE = /&newline;?/gim;
            var REGEXP_DEFAULT_ON_TAG_ATTR_3 = /\/\*|\*\//gm;
            var REGEXP_DEFAULT_ON_TAG_ATTR_4 = /((j\s*a\s*v\s*a|v\s*b|l\s*i\s*v\s*e)\s*s\s*c\s*r\s*i\s*p\s*t\s*|m\s*o\s*c\s*h\s*a)\:/gi;
            var REGEXP_DEFAULT_ON_TAG_ATTR_5 = /^[\s"'`]*(d\s*a\s*t\s*a\s*)\:/gi;
            var REGEXP_DEFAULT_ON_TAG_ATTR_6 = /^[\s"'`]*(d\s*a\s*t\s*a\s*)\:\s*image\//gi;
            var REGEXP_DEFAULT_ON_TAG_ATTR_7 = /e\s*x\s*p\s*r\s*e\s*s\s*s\s*i\s*o\s*n\s*\(.*/gi;
            var REGEXP_DEFAULT_ON_TAG_ATTR_8 = /u\s*r\s*l\s*\(.*/gi;
            function escapeQuote(str) {
              return str.replace(REGEXP_QUOTE, "&quot;");
            }
            function unescapeQuote(str) {
              return str.replace(REGEXP_QUOTE_2, '"');
            }
            function escapeHtmlEntities(str) {
              return str.replace(REGEXP_ATTR_VALUE_1, function replaceUnicode(str2, code) {
                return code[0] === "x" || code[0] === "X" ? String.fromCharCode(parseInt(code.substr(1), 16)) : String.fromCharCode(parseInt(code, 10));
              });
            }
            function escapeDangerHtml5Entities(str) {
              return str.replace(REGEXP_ATTR_VALUE_COLON, ":").replace(REGEXP_ATTR_VALUE_NEWLINE, " ");
            }
            function clearNonPrintableCharacter(str) {
              var str2 = "";
              for (var i = 0, len = str.length; i < len; i++) {
                str2 += str.charCodeAt(i) < 32 ? " " : str.charAt(i);
              }
              return _.trim(str2);
            }
            function friendlyAttrValue(str) {
              str = unescapeQuote(str);
              str = escapeHtmlEntities(str);
              str = escapeDangerHtml5Entities(str);
              str = clearNonPrintableCharacter(str);
              return str;
            }
            function escapeAttrValue(str) {
              str = escapeQuote(str);
              str = escapeHtml(str);
              return str;
            }
            function onIgnoreTagStripAll() {
              return "";
            }
            function StripTagBody(tags, next) {
              if (typeof next !== "function") {
                next = function() {
                };
              }
              var isRemoveAllTag = !Array.isArray(tags);
              function isRemoveTag(tag) {
                if (isRemoveAllTag)
                  return true;
                return _.indexOf(tags, tag) !== -1;
              }
              var removeList = [];
              var posStart = false;
              return {
                onIgnoreTag: function(tag, html, options) {
                  if (isRemoveTag(tag)) {
                    if (options.isClosing) {
                      var ret = "[/removed]";
                      var end = options.position + ret.length;
                      removeList.push([
                        posStart !== false ? posStart : options.position,
                        end
                      ]);
                      posStart = false;
                      return ret;
                    } else {
                      if (!posStart) {
                        posStart = options.position;
                      }
                      return "[removed]";
                    }
                  } else {
                    return next(tag, html, options);
                  }
                },
                remove: function(html) {
                  var rethtml = "";
                  var lastPos = 0;
                  _.forEach(removeList, function(pos) {
                    rethtml += html.slice(lastPos, pos[0]);
                    lastPos = pos[1];
                  });
                  rethtml += html.slice(lastPos);
                  return rethtml;
                }
              };
            }
            function stripCommentTag(html) {
              return html.replace(STRIP_COMMENT_TAG_REGEXP, "");
            }
            var STRIP_COMMENT_TAG_REGEXP = /<!--[\s\S]*?-->/g;
            function stripBlankChar(html) {
              var chars = html.split("");
              chars = chars.filter(function(char) {
                var c = char.charCodeAt(0);
                if (c === 127)
                  return false;
                if (c <= 31) {
                  if (c === 10 || c === 13)
                    return true;
                  return false;
                }
                return true;
              });
              return chars.join("");
            }
            exports2.whiteList = getDefaultWhiteList();
            exports2.getDefaultWhiteList = getDefaultWhiteList;
            exports2.onTag = onTag;
            exports2.onIgnoreTag = onIgnoreTag;
            exports2.onTagAttr = onTagAttr;
            exports2.onIgnoreTagAttr = onIgnoreTagAttr;
            exports2.safeAttrValue = safeAttrValue;
            exports2.escapeHtml = escapeHtml;
            exports2.escapeQuote = escapeQuote;
            exports2.unescapeQuote = unescapeQuote;
            exports2.escapeHtmlEntities = escapeHtmlEntities;
            exports2.escapeDangerHtml5Entities = escapeDangerHtml5Entities;
            exports2.clearNonPrintableCharacter = clearNonPrintableCharacter;
            exports2.friendlyAttrValue = friendlyAttrValue;
            exports2.escapeAttrValue = escapeAttrValue;
            exports2.onIgnoreTagStripAll = onIgnoreTagStripAll;
            exports2.StripTagBody = StripTagBody;
            exports2.stripCommentTag = stripCommentTag;
            exports2.stripBlankChar = stripBlankChar;
            exports2.cssFilter = defaultCSSFilter;
            exports2.getDefaultCSSWhiteList = getDefaultCSSWhiteList;
          },
          /* 20 */
          /***/
          function(module2, exports2) {
            function getDefaultWhiteList() {
              var whiteList = {};
              whiteList["align-content"] = false;
              whiteList["align-items"] = false;
              whiteList["align-self"] = false;
              whiteList["alignment-adjust"] = false;
              whiteList["alignment-baseline"] = false;
              whiteList["all"] = false;
              whiteList["anchor-point"] = false;
              whiteList["animation"] = false;
              whiteList["animation-delay"] = false;
              whiteList["animation-direction"] = false;
              whiteList["animation-duration"] = false;
              whiteList["animation-fill-mode"] = false;
              whiteList["animation-iteration-count"] = false;
              whiteList["animation-name"] = false;
              whiteList["animation-play-state"] = false;
              whiteList["animation-timing-function"] = false;
              whiteList["azimuth"] = false;
              whiteList["backface-visibility"] = false;
              whiteList["background"] = true;
              whiteList["background-attachment"] = true;
              whiteList["background-clip"] = true;
              whiteList["background-color"] = true;
              whiteList["background-image"] = true;
              whiteList["background-origin"] = true;
              whiteList["background-position"] = true;
              whiteList["background-repeat"] = true;
              whiteList["background-size"] = true;
              whiteList["baseline-shift"] = false;
              whiteList["binding"] = false;
              whiteList["bleed"] = false;
              whiteList["bookmark-label"] = false;
              whiteList["bookmark-level"] = false;
              whiteList["bookmark-state"] = false;
              whiteList["border"] = true;
              whiteList["border-bottom"] = true;
              whiteList["border-bottom-color"] = true;
              whiteList["border-bottom-left-radius"] = true;
              whiteList["border-bottom-right-radius"] = true;
              whiteList["border-bottom-style"] = true;
              whiteList["border-bottom-width"] = true;
              whiteList["border-collapse"] = true;
              whiteList["border-color"] = true;
              whiteList["border-image"] = true;
              whiteList["border-image-outset"] = true;
              whiteList["border-image-repeat"] = true;
              whiteList["border-image-slice"] = true;
              whiteList["border-image-source"] = true;
              whiteList["border-image-width"] = true;
              whiteList["border-left"] = true;
              whiteList["border-left-color"] = true;
              whiteList["border-left-style"] = true;
              whiteList["border-left-width"] = true;
              whiteList["border-radius"] = true;
              whiteList["border-right"] = true;
              whiteList["border-right-color"] = true;
              whiteList["border-right-style"] = true;
              whiteList["border-right-width"] = true;
              whiteList["border-spacing"] = true;
              whiteList["border-style"] = true;
              whiteList["border-top"] = true;
              whiteList["border-top-color"] = true;
              whiteList["border-top-left-radius"] = true;
              whiteList["border-top-right-radius"] = true;
              whiteList["border-top-style"] = true;
              whiteList["border-top-width"] = true;
              whiteList["border-width"] = true;
              whiteList["bottom"] = false;
              whiteList["box-decoration-break"] = true;
              whiteList["box-shadow"] = true;
              whiteList["box-sizing"] = true;
              whiteList["box-snap"] = true;
              whiteList["box-suppress"] = true;
              whiteList["break-after"] = true;
              whiteList["break-before"] = true;
              whiteList["break-inside"] = true;
              whiteList["caption-side"] = false;
              whiteList["chains"] = false;
              whiteList["clear"] = true;
              whiteList["clip"] = false;
              whiteList["clip-path"] = false;
              whiteList["clip-rule"] = false;
              whiteList["color"] = true;
              whiteList["color-interpolation-filters"] = true;
              whiteList["column-count"] = false;
              whiteList["column-fill"] = false;
              whiteList["column-gap"] = false;
              whiteList["column-rule"] = false;
              whiteList["column-rule-color"] = false;
              whiteList["column-rule-style"] = false;
              whiteList["column-rule-width"] = false;
              whiteList["column-span"] = false;
              whiteList["column-width"] = false;
              whiteList["columns"] = false;
              whiteList["contain"] = false;
              whiteList["content"] = false;
              whiteList["counter-increment"] = false;
              whiteList["counter-reset"] = false;
              whiteList["counter-set"] = false;
              whiteList["crop"] = false;
              whiteList["cue"] = false;
              whiteList["cue-after"] = false;
              whiteList["cue-before"] = false;
              whiteList["cursor"] = false;
              whiteList["direction"] = false;
              whiteList["display"] = true;
              whiteList["display-inside"] = true;
              whiteList["display-list"] = true;
              whiteList["display-outside"] = true;
              whiteList["dominant-baseline"] = false;
              whiteList["elevation"] = false;
              whiteList["empty-cells"] = false;
              whiteList["filter"] = false;
              whiteList["flex"] = false;
              whiteList["flex-basis"] = false;
              whiteList["flex-direction"] = false;
              whiteList["flex-flow"] = false;
              whiteList["flex-grow"] = false;
              whiteList["flex-shrink"] = false;
              whiteList["flex-wrap"] = false;
              whiteList["float"] = false;
              whiteList["float-offset"] = false;
              whiteList["flood-color"] = false;
              whiteList["flood-opacity"] = false;
              whiteList["flow-from"] = false;
              whiteList["flow-into"] = false;
              whiteList["font"] = true;
              whiteList["font-family"] = true;
              whiteList["font-feature-settings"] = true;
              whiteList["font-kerning"] = true;
              whiteList["font-language-override"] = true;
              whiteList["font-size"] = true;
              whiteList["font-size-adjust"] = true;
              whiteList["font-stretch"] = true;
              whiteList["font-style"] = true;
              whiteList["font-synthesis"] = true;
              whiteList["font-variant"] = true;
              whiteList["font-variant-alternates"] = true;
              whiteList["font-variant-caps"] = true;
              whiteList["font-variant-east-asian"] = true;
              whiteList["font-variant-ligatures"] = true;
              whiteList["font-variant-numeric"] = true;
              whiteList["font-variant-position"] = true;
              whiteList["font-weight"] = true;
              whiteList["grid"] = false;
              whiteList["grid-area"] = false;
              whiteList["grid-auto-columns"] = false;
              whiteList["grid-auto-flow"] = false;
              whiteList["grid-auto-rows"] = false;
              whiteList["grid-column"] = false;
              whiteList["grid-column-end"] = false;
              whiteList["grid-column-start"] = false;
              whiteList["grid-row"] = false;
              whiteList["grid-row-end"] = false;
              whiteList["grid-row-start"] = false;
              whiteList["grid-template"] = false;
              whiteList["grid-template-areas"] = false;
              whiteList["grid-template-columns"] = false;
              whiteList["grid-template-rows"] = false;
              whiteList["hanging-punctuation"] = false;
              whiteList["height"] = true;
              whiteList["hyphens"] = false;
              whiteList["icon"] = false;
              whiteList["image-orientation"] = false;
              whiteList["image-resolution"] = false;
              whiteList["ime-mode"] = false;
              whiteList["initial-letters"] = false;
              whiteList["inline-box-align"] = false;
              whiteList["justify-content"] = false;
              whiteList["justify-items"] = false;
              whiteList["justify-self"] = false;
              whiteList["left"] = false;
              whiteList["letter-spacing"] = true;
              whiteList["lighting-color"] = true;
              whiteList["line-box-contain"] = false;
              whiteList["line-break"] = false;
              whiteList["line-grid"] = false;
              whiteList["line-height"] = false;
              whiteList["line-snap"] = false;
              whiteList["line-stacking"] = false;
              whiteList["line-stacking-ruby"] = false;
              whiteList["line-stacking-shift"] = false;
              whiteList["line-stacking-strategy"] = false;
              whiteList["list-style"] = true;
              whiteList["list-style-image"] = true;
              whiteList["list-style-position"] = true;
              whiteList["list-style-type"] = true;
              whiteList["margin"] = true;
              whiteList["margin-bottom"] = true;
              whiteList["margin-left"] = true;
              whiteList["margin-right"] = true;
              whiteList["margin-top"] = true;
              whiteList["marker-offset"] = false;
              whiteList["marker-side"] = false;
              whiteList["marks"] = false;
              whiteList["mask"] = false;
              whiteList["mask-box"] = false;
              whiteList["mask-box-outset"] = false;
              whiteList["mask-box-repeat"] = false;
              whiteList["mask-box-slice"] = false;
              whiteList["mask-box-source"] = false;
              whiteList["mask-box-width"] = false;
              whiteList["mask-clip"] = false;
              whiteList["mask-image"] = false;
              whiteList["mask-origin"] = false;
              whiteList["mask-position"] = false;
              whiteList["mask-repeat"] = false;
              whiteList["mask-size"] = false;
              whiteList["mask-source-type"] = false;
              whiteList["mask-type"] = false;
              whiteList["max-height"] = true;
              whiteList["max-lines"] = false;
              whiteList["max-width"] = true;
              whiteList["min-height"] = true;
              whiteList["min-width"] = true;
              whiteList["move-to"] = false;
              whiteList["nav-down"] = false;
              whiteList["nav-index"] = false;
              whiteList["nav-left"] = false;
              whiteList["nav-right"] = false;
              whiteList["nav-up"] = false;
              whiteList["object-fit"] = false;
              whiteList["object-position"] = false;
              whiteList["opacity"] = false;
              whiteList["order"] = false;
              whiteList["orphans"] = false;
              whiteList["outline"] = false;
              whiteList["outline-color"] = false;
              whiteList["outline-offset"] = false;
              whiteList["outline-style"] = false;
              whiteList["outline-width"] = false;
              whiteList["overflow"] = false;
              whiteList["overflow-wrap"] = false;
              whiteList["overflow-x"] = false;
              whiteList["overflow-y"] = false;
              whiteList["padding"] = true;
              whiteList["padding-bottom"] = true;
              whiteList["padding-left"] = true;
              whiteList["padding-right"] = true;
              whiteList["padding-top"] = true;
              whiteList["page"] = false;
              whiteList["page-break-after"] = false;
              whiteList["page-break-before"] = false;
              whiteList["page-break-inside"] = false;
              whiteList["page-policy"] = false;
              whiteList["pause"] = false;
              whiteList["pause-after"] = false;
              whiteList["pause-before"] = false;
              whiteList["perspective"] = false;
              whiteList["perspective-origin"] = false;
              whiteList["pitch"] = false;
              whiteList["pitch-range"] = false;
              whiteList["play-during"] = false;
              whiteList["position"] = false;
              whiteList["presentation-level"] = false;
              whiteList["quotes"] = false;
              whiteList["region-fragment"] = false;
              whiteList["resize"] = false;
              whiteList["rest"] = false;
              whiteList["rest-after"] = false;
              whiteList["rest-before"] = false;
              whiteList["richness"] = false;
              whiteList["right"] = false;
              whiteList["rotation"] = false;
              whiteList["rotation-point"] = false;
              whiteList["ruby-align"] = false;
              whiteList["ruby-merge"] = false;
              whiteList["ruby-position"] = false;
              whiteList["shape-image-threshold"] = false;
              whiteList["shape-outside"] = false;
              whiteList["shape-margin"] = false;
              whiteList["size"] = false;
              whiteList["speak"] = false;
              whiteList["speak-as"] = false;
              whiteList["speak-header"] = false;
              whiteList["speak-numeral"] = false;
              whiteList["speak-punctuation"] = false;
              whiteList["speech-rate"] = false;
              whiteList["stress"] = false;
              whiteList["string-set"] = false;
              whiteList["tab-size"] = false;
              whiteList["table-layout"] = false;
              whiteList["text-align"] = true;
              whiteList["text-align-last"] = true;
              whiteList["text-combine-upright"] = true;
              whiteList["text-decoration"] = true;
              whiteList["text-decoration-color"] = true;
              whiteList["text-decoration-line"] = true;
              whiteList["text-decoration-skip"] = true;
              whiteList["text-decoration-style"] = true;
              whiteList["text-emphasis"] = true;
              whiteList["text-emphasis-color"] = true;
              whiteList["text-emphasis-position"] = true;
              whiteList["text-emphasis-style"] = true;
              whiteList["text-height"] = true;
              whiteList["text-indent"] = true;
              whiteList["text-justify"] = true;
              whiteList["text-orientation"] = true;
              whiteList["text-overflow"] = true;
              whiteList["text-shadow"] = true;
              whiteList["text-space-collapse"] = true;
              whiteList["text-transform"] = true;
              whiteList["text-underline-position"] = true;
              whiteList["text-wrap"] = true;
              whiteList["top"] = false;
              whiteList["transform"] = false;
              whiteList["transform-origin"] = false;
              whiteList["transform-style"] = false;
              whiteList["transition"] = false;
              whiteList["transition-delay"] = false;
              whiteList["transition-duration"] = false;
              whiteList["transition-property"] = false;
              whiteList["transition-timing-function"] = false;
              whiteList["unicode-bidi"] = false;
              whiteList["vertical-align"] = false;
              whiteList["visibility"] = false;
              whiteList["voice-balance"] = false;
              whiteList["voice-duration"] = false;
              whiteList["voice-family"] = false;
              whiteList["voice-pitch"] = false;
              whiteList["voice-range"] = false;
              whiteList["voice-rate"] = false;
              whiteList["voice-stress"] = false;
              whiteList["voice-volume"] = false;
              whiteList["volume"] = false;
              whiteList["white-space"] = false;
              whiteList["widows"] = false;
              whiteList["width"] = true;
              whiteList["will-change"] = false;
              whiteList["word-break"] = true;
              whiteList["word-spacing"] = true;
              whiteList["word-wrap"] = true;
              whiteList["wrap-flow"] = false;
              whiteList["wrap-through"] = false;
              whiteList["writing-mode"] = false;
              whiteList["z-index"] = false;
              return whiteList;
            }
            function onAttr(name, value, options) {
            }
            function onIgnoreAttr(name, value, options) {
            }
            var REGEXP_URL_JAVASCRIPT = /javascript\s*\:/img;
            function safeAttrValue(name, value) {
              if (REGEXP_URL_JAVASCRIPT.test(value))
                return "";
              return value;
            }
            exports2.whiteList = getDefaultWhiteList();
            exports2.getDefaultWhiteList = getDefaultWhiteList;
            exports2.onAttr = onAttr;
            exports2.onIgnoreAttr = onIgnoreAttr;
            exports2.safeAttrValue = safeAttrValue;
          },
          /* 21 */
          /***/
          function(module2, exports2) {
            module2.exports = {
              indexOf: function(arr, item) {
                var i, j;
                if (Array.prototype.indexOf) {
                  return arr.indexOf(item);
                }
                for (i = 0, j = arr.length; i < j; i++) {
                  if (arr[i] === item) {
                    return i;
                  }
                }
                return -1;
              },
              forEach: function(arr, fn, scope) {
                var i, j;
                if (Array.prototype.forEach) {
                  return arr.forEach(fn, scope);
                }
                for (i = 0, j = arr.length; i < j; i++) {
                  fn.call(scope, arr[i], i, arr);
                }
              },
              trim: function(str) {
                if (String.prototype.trim) {
                  return str.trim();
                }
                return str.replace(/(^\s*)|(\s*$)/g, "");
              },
              trimRight: function(str) {
                if (String.prototype.trimRight) {
                  return str.trimRight();
                }
                return str.replace(/(\s*$)/g, "");
              }
            };
          },
          /* 22 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var _ = __webpack_require__(15);
            function getTagName(html) {
              var i = _.spaceIndex(html);
              if (i === -1) {
                var tagName = html.slice(1, -1);
              } else {
                var tagName = html.slice(1, i + 1);
              }
              tagName = _.trim(tagName).toLowerCase();
              if (tagName.slice(0, 1) === "/")
                tagName = tagName.slice(1);
              if (tagName.slice(-1) === "/")
                tagName = tagName.slice(0, -1);
              return tagName;
            }
            function isClosing(html) {
              return html.slice(0, 2) === "</";
            }
            function parseTag(html, onTag, escapeHtml) {
              "use strict";
              var rethtml = "";
              var lastPos = 0;
              var tagStart = false;
              var quoteStart = false;
              var currentPos = 0;
              var len = html.length;
              var currentTagName = "";
              var currentHtml = "";
              chariterator:
                for (currentPos = 0; currentPos < len; currentPos++) {
                  var c = html.charAt(currentPos);
                  if (tagStart === false) {
                    if (c === "<") {
                      tagStart = currentPos;
                      continue;
                    }
                  } else {
                    if (quoteStart === false) {
                      if (c === "<") {
                        rethtml += escapeHtml(html.slice(lastPos, currentPos));
                        tagStart = currentPos;
                        lastPos = currentPos;
                        continue;
                      }
                      if (c === ">") {
                        rethtml += escapeHtml(html.slice(lastPos, tagStart));
                        currentHtml = html.slice(tagStart, currentPos + 1);
                        currentTagName = getTagName(currentHtml);
                        rethtml += onTag(
                          tagStart,
                          rethtml.length,
                          currentTagName,
                          currentHtml,
                          isClosing(currentHtml)
                        );
                        lastPos = currentPos + 1;
                        tagStart = false;
                        continue;
                      }
                      if (c === '"' || c === "'") {
                        var i = 1;
                        var ic = html.charAt(currentPos - i);
                        while (ic.trim() === "" || ic === "=") {
                          if (ic === "=") {
                            quoteStart = c;
                            continue chariterator;
                          }
                          ic = html.charAt(currentPos - ++i);
                        }
                      }
                    } else {
                      if (c === quoteStart) {
                        quoteStart = false;
                        continue;
                      }
                    }
                  }
                }
              if (lastPos < html.length) {
                rethtml += escapeHtml(html.substr(lastPos));
              }
              return rethtml;
            }
            var REGEXP_ILLEGAL_ATTR_NAME = /[^a-zA-Z0-9_:\.\-]/gim;
            function parseAttr(html, onAttr) {
              "use strict";
              var lastPos = 0;
              var retAttrs = [];
              var tmpName = false;
              var len = html.length;
              function addAttr(name, value) {
                name = _.trim(name);
                name = name.replace(REGEXP_ILLEGAL_ATTR_NAME, "").toLowerCase();
                if (name.length < 1)
                  return;
                var ret = onAttr(name, value || "");
                if (ret)
                  retAttrs.push(ret);
              }
              for (var i = 0; i < len; i++) {
                var c = html.charAt(i);
                var v, j;
                if (tmpName === false && c === "=") {
                  tmpName = html.slice(lastPos, i);
                  lastPos = i + 1;
                  continue;
                }
                if (tmpName !== false) {
                  if (i === lastPos && (c === '"' || c === "'") && html.charAt(i - 1) === "=") {
                    j = html.indexOf(c, i + 1);
                    if (j === -1) {
                      break;
                    } else {
                      v = _.trim(html.slice(lastPos + 1, j));
                      addAttr(tmpName, v);
                      tmpName = false;
                      i = j;
                      lastPos = i + 1;
                      continue;
                    }
                  }
                }
                if (/\s|\n|\t/.test(c)) {
                  html = html.replace(/\s|\n|\t/g, " ");
                  if (tmpName === false) {
                    j = findNextEqual(html, i);
                    if (j === -1) {
                      v = _.trim(html.slice(lastPos, i));
                      addAttr(v);
                      tmpName = false;
                      lastPos = i + 1;
                      continue;
                    } else {
                      i = j - 1;
                      continue;
                    }
                  } else {
                    j = findBeforeEqual(html, i - 1);
                    if (j === -1) {
                      v = _.trim(html.slice(lastPos, i));
                      v = stripQuoteWrap(v);
                      addAttr(tmpName, v);
                      tmpName = false;
                      lastPos = i + 1;
                      continue;
                    } else {
                      continue;
                    }
                  }
                }
              }
              if (lastPos < html.length) {
                if (tmpName === false) {
                  addAttr(html.slice(lastPos));
                } else {
                  addAttr(tmpName, stripQuoteWrap(_.trim(html.slice(lastPos))));
                }
              }
              return _.trim(retAttrs.join(" "));
            }
            function findNextEqual(str, i) {
              for (; i < str.length; i++) {
                var c = str[i];
                if (c === " ")
                  continue;
                if (c === "=")
                  return i;
                return -1;
              }
            }
            function findBeforeEqual(str, i) {
              for (; i > 0; i--) {
                var c = str[i];
                if (c === " ")
                  continue;
                if (c === "=")
                  return i;
                return -1;
              }
            }
            function isQuoteWrapString(text) {
              if (text[0] === '"' && text[text.length - 1] === '"' || text[0] === "'" && text[text.length - 1] === "'") {
                return true;
              } else {
                return false;
              }
            }
            function stripQuoteWrap(text) {
              if (isQuoteWrapString(text)) {
                return text.substr(1, text.length - 2);
              } else {
                return text;
              }
            }
            exports2.parseTag = parseTag;
            exports2.parseAttr = parseAttr;
          },
          /* 23 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10);
            var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0__);
            var _babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(17);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1);
            var _utils_file__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(12);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_2__[
                /* image */
                "l"
              ],
              icon: "v-md-icon-img",
              title: function title(editor) {
                return editor.langConfig.image.toolbar;
              },
              menus: [{
                name: "image-link",
                text: function text(editor) {
                  return editor.langConfig.imageLink.toolbar;
                },
                action: function action(editor, config) {
                  if (config != null && config.insertWithSize) {
                    editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_2__[
                      /* image */
                      "l"
                    ], {
                      width: "auto",
                      height: "auto"
                    });
                  } else {
                    editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_2__[
                      /* image */
                      "l"
                    ]);
                  }
                }
              }, {
                name: "upload-image",
                text: function text(editor) {
                  return editor.langConfig.uploadImage.toolbar;
                },
                action: function action(editor) {
                  editor.uploadConfig = editor.uploadImgConfig;
                  editor.$nextTick(Object(_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__[
                    /* default */
                    "a"
                  ])(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.mark(function _callee() {
                    var event, files;
                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default.a.wrap(function _callee$(_context) {
                      while (1)
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.next = 2;
                            return editor.$refs.uploadFile.upload();
                          case 2:
                            event = _context.sent;
                            files = Object(_utils_file__WEBPACK_IMPORTED_MODULE_3__[
                              /* filesFilter */
                              "a"
                            ])(event.target.files, editor.uploadImgConfig);
                            editor.emitUploadImage(event, files);
                          case 5:
                          case "end":
                            return _context.stop();
                        }
                    }, _callee);
                  })));
                }
              }]
            };
          },
          /* 24 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var DEFAULT = __webpack_require__(20);
            var parseStyle = __webpack_require__(25);
            var _ = __webpack_require__(21);
            function isNull(obj) {
              return obj === void 0 || obj === null;
            }
            function shallowCopyObject(obj) {
              var ret = {};
              for (var i in obj) {
                ret[i] = obj[i];
              }
              return ret;
            }
            function FilterCSS(options) {
              options = shallowCopyObject(options || {});
              options.whiteList = options.whiteList || DEFAULT.whiteList;
              options.onAttr = options.onAttr || DEFAULT.onAttr;
              options.onIgnoreAttr = options.onIgnoreAttr || DEFAULT.onIgnoreAttr;
              options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;
              this.options = options;
            }
            FilterCSS.prototype.process = function(css) {
              css = css || "";
              css = css.toString();
              if (!css)
                return "";
              var me = this;
              var options = me.options;
              var whiteList = options.whiteList;
              var onAttr = options.onAttr;
              var onIgnoreAttr = options.onIgnoreAttr;
              var safeAttrValue = options.safeAttrValue;
              var retCSS = parseStyle(css, function(sourcePosition, position, name, value, source) {
                var check = whiteList[name];
                var isWhite = false;
                if (check === true)
                  isWhite = check;
                else if (typeof check === "function")
                  isWhite = check(value);
                else if (check instanceof RegExp)
                  isWhite = check.test(value);
                if (isWhite !== true)
                  isWhite = false;
                value = safeAttrValue(name, value);
                if (!value)
                  return;
                var opts = {
                  position,
                  sourcePosition,
                  source,
                  isWhite
                };
                if (isWhite) {
                  var ret = onAttr(name, value, opts);
                  if (isNull(ret)) {
                    return name + ":" + value;
                  } else {
                    return ret;
                  }
                } else {
                  var ret = onIgnoreAttr(name, value, opts);
                  if (!isNull(ret)) {
                    return ret;
                  }
                }
              });
              return retCSS;
            };
            module2.exports = FilterCSS;
          },
          /* 25 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var _ = __webpack_require__(21);
            function parseStyle(css, onAttr) {
              css = _.trimRight(css);
              if (css[css.length - 1] !== ";")
                css += ";";
              var cssLength = css.length;
              var isParenthesisOpen = false;
              var lastPos = 0;
              var i = 0;
              var retCSS = "";
              function addNewAttr() {
                if (!isParenthesisOpen) {
                  var source = _.trim(css.slice(lastPos, i));
                  var j2 = source.indexOf(":");
                  if (j2 !== -1) {
                    var name = _.trim(source.slice(0, j2));
                    var value = _.trim(source.slice(j2 + 1));
                    if (name) {
                      var ret = onAttr(lastPos, retCSS.length, name, value, source);
                      if (ret)
                        retCSS += ret + "; ";
                    }
                  }
                }
                lastPos = i + 1;
              }
              for (; i < cssLength; i++) {
                var c = css[i];
                if (c === "/" && css[i + 1] === "*") {
                  var j = css.indexOf("*/", i + 2);
                  if (j === -1)
                    break;
                  i = j + 1;
                  lastPos = i + 1;
                  isParenthesisOpen = false;
                } else if (c === "(") {
                  isParenthesisOpen = true;
                } else if (c === ")") {
                  isParenthesisOpen = false;
                } else if (c === ";") {
                  if (isParenthesisOpen) {
                  } else {
                    addNewAttr();
                  }
                } else if (c === "\n") {
                  addNewAttr();
                }
              }
              return _.trim(retCSS);
            }
            module2.exports = parseStyle;
          },
          /* 26 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var FilterCSS = __webpack_require__(14).FilterCSS;
            var DEFAULT = __webpack_require__(19);
            var parser = __webpack_require__(22);
            var parseTag = parser.parseTag;
            var parseAttr = parser.parseAttr;
            var _ = __webpack_require__(15);
            function isNull(obj) {
              return obj === void 0 || obj === null;
            }
            function getAttrs(html) {
              var i = _.spaceIndex(html);
              if (i === -1) {
                return {
                  html: "",
                  closing: html[html.length - 2] === "/"
                };
              }
              html = _.trim(html.slice(i + 1, -1));
              var isClosing = html[html.length - 1] === "/";
              if (isClosing)
                html = _.trim(html.slice(0, -1));
              return {
                html,
                closing: isClosing
              };
            }
            function shallowCopyObject(obj) {
              var ret = {};
              for (var i in obj) {
                ret[i] = obj[i];
              }
              return ret;
            }
            function FilterXSS(options) {
              options = shallowCopyObject(options || {});
              if (options.stripIgnoreTag) {
                if (options.onIgnoreTag) {
                  console.error(
                    'Notes: cannot use these two options "stripIgnoreTag" and "onIgnoreTag" at the same time'
                  );
                }
                options.onIgnoreTag = DEFAULT.onIgnoreTagStripAll;
              }
              options.whiteList = options.whiteList || DEFAULT.whiteList;
              options.onTag = options.onTag || DEFAULT.onTag;
              options.onTagAttr = options.onTagAttr || DEFAULT.onTagAttr;
              options.onIgnoreTag = options.onIgnoreTag || DEFAULT.onIgnoreTag;
              options.onIgnoreTagAttr = options.onIgnoreTagAttr || DEFAULT.onIgnoreTagAttr;
              options.safeAttrValue = options.safeAttrValue || DEFAULT.safeAttrValue;
              options.escapeHtml = options.escapeHtml || DEFAULT.escapeHtml;
              this.options = options;
              if (options.css === false) {
                this.cssFilter = false;
              } else {
                options.css = options.css || {};
                this.cssFilter = new FilterCSS(options.css);
              }
            }
            FilterXSS.prototype.process = function(html) {
              html = html || "";
              html = html.toString();
              if (!html)
                return "";
              var me = this;
              var options = me.options;
              var whiteList = options.whiteList;
              var onTag = options.onTag;
              var onIgnoreTag = options.onIgnoreTag;
              var onTagAttr = options.onTagAttr;
              var onIgnoreTagAttr = options.onIgnoreTagAttr;
              var safeAttrValue = options.safeAttrValue;
              var escapeHtml = options.escapeHtml;
              var cssFilter = me.cssFilter;
              if (options.stripBlankChar) {
                html = DEFAULT.stripBlankChar(html);
              }
              if (!options.allowCommentTag) {
                html = DEFAULT.stripCommentTag(html);
              }
              var stripIgnoreTagBody = false;
              if (options.stripIgnoreTagBody) {
                var stripIgnoreTagBody = DEFAULT.StripTagBody(
                  options.stripIgnoreTagBody,
                  onIgnoreTag
                );
                onIgnoreTag = stripIgnoreTagBody.onIgnoreTag;
              }
              var retHtml = parseTag(
                html,
                function(sourcePosition, position, tag, html2, isClosing) {
                  var info = {
                    sourcePosition,
                    position,
                    isClosing,
                    isWhite: whiteList.hasOwnProperty(tag)
                  };
                  var ret = onTag(tag, html2, info);
                  if (!isNull(ret))
                    return ret;
                  if (info.isWhite) {
                    if (info.isClosing) {
                      return "</" + tag + ">";
                    }
                    var attrs = getAttrs(html2);
                    var whiteAttrList = whiteList[tag];
                    var attrsHtml = parseAttr(attrs.html, function(name, value) {
                      var isWhiteAttr = _.indexOf(whiteAttrList, name) !== -1;
                      var ret2 = onTagAttr(tag, name, value, isWhiteAttr);
                      if (!isNull(ret2))
                        return ret2;
                      if (isWhiteAttr) {
                        value = safeAttrValue(tag, name, value, cssFilter);
                        if (value) {
                          return name + '="' + value + '"';
                        } else {
                          return name;
                        }
                      } else {
                        var ret2 = onIgnoreTagAttr(tag, name, value, isWhiteAttr);
                        if (!isNull(ret2))
                          return ret2;
                        return;
                      }
                    });
                    var html2 = "<" + tag;
                    if (attrsHtml)
                      html2 += " " + attrsHtml;
                    if (attrs.closing)
                      html2 += " /";
                    html2 += ">";
                    return html2;
                  } else {
                    var ret = onIgnoreTag(tag, html2, info);
                    if (!isNull(ret))
                      return ret;
                    return escapeHtml(html2);
                  }
                },
                escapeHtml
              );
              if (stripIgnoreTagBody) {
                retHtml = stripIgnoreTagBody.remove(retHtml);
              }
              return retHtml;
            };
            module2.exports = FilterXSS;
          },
          /* 27 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 28 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 29 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 30 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 31 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 32 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 33 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 34 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            (function(global2) {
              var MapShim = function() {
                if (typeof Map !== "undefined") {
                  return Map;
                }
                function getIndex(arr, key) {
                  var result = -1;
                  arr.some(function(entry, index2) {
                    if (entry[0] === key) {
                      result = index2;
                      return true;
                    }
                    return false;
                  });
                  return result;
                }
                return (
                  /** @class */
                  function() {
                    function class_1() {
                      this.__entries__ = [];
                    }
                    Object.defineProperty(class_1.prototype, "size", {
                      /**
                       * @returns {boolean}
                       */
                      get: function() {
                        return this.__entries__.length;
                      },
                      enumerable: true,
                      configurable: true
                    });
                    class_1.prototype.get = function(key) {
                      var index2 = getIndex(this.__entries__, key);
                      var entry = this.__entries__[index2];
                      return entry && entry[1];
                    };
                    class_1.prototype.set = function(key, value) {
                      var index2 = getIndex(this.__entries__, key);
                      if (~index2) {
                        this.__entries__[index2][1] = value;
                      } else {
                        this.__entries__.push([key, value]);
                      }
                    };
                    class_1.prototype.delete = function(key) {
                      var entries = this.__entries__;
                      var index2 = getIndex(entries, key);
                      if (~index2) {
                        entries.splice(index2, 1);
                      }
                    };
                    class_1.prototype.has = function(key) {
                      return !!~getIndex(this.__entries__, key);
                    };
                    class_1.prototype.clear = function() {
                      this.__entries__.splice(0);
                    };
                    class_1.prototype.forEach = function(callback, ctx) {
                      if (ctx === void 0) {
                        ctx = null;
                      }
                      for (var _i = 0, _a2 = this.__entries__; _i < _a2.length; _i++) {
                        var entry = _a2[_i];
                        callback.call(ctx, entry[1], entry[0]);
                      }
                    };
                    return class_1;
                  }()
                );
              }();
              var isBrowser = typeof window !== "undefined" && typeof document !== "undefined" && window.document === document;
              var global$1 = function() {
                if (typeof global2 !== "undefined" && global2.Math === Math) {
                  return global2;
                }
                if (typeof self !== "undefined" && self.Math === Math) {
                  return self;
                }
                if (typeof window !== "undefined" && window.Math === Math) {
                  return window;
                }
                return Function("return this")();
              }();
              var requestAnimationFrame$1 = function() {
                if (typeof requestAnimationFrame === "function") {
                  return requestAnimationFrame.bind(global$1);
                }
                return function(callback) {
                  return setTimeout(function() {
                    return callback(Date.now());
                  }, 1e3 / 60);
                };
              }();
              var trailingTimeout = 2;
              function throttle(callback, delay) {
                var leadingCall = false, trailingCall = false, lastCallTime = 0;
                function resolvePending() {
                  if (leadingCall) {
                    leadingCall = false;
                    callback();
                  }
                  if (trailingCall) {
                    proxy();
                  }
                }
                function timeoutCallback() {
                  requestAnimationFrame$1(resolvePending);
                }
                function proxy() {
                  var timeStamp = Date.now();
                  if (leadingCall) {
                    if (timeStamp - lastCallTime < trailingTimeout) {
                      return;
                    }
                    trailingCall = true;
                  } else {
                    leadingCall = true;
                    trailingCall = false;
                    setTimeout(timeoutCallback, delay);
                  }
                  lastCallTime = timeStamp;
                }
                return proxy;
              }
              var REFRESH_DELAY = 20;
              var transitionKeys = ["top", "right", "bottom", "left", "width", "height", "size", "weight"];
              var mutationObserverSupported = typeof MutationObserver !== "undefined";
              var ResizeObserverController = (
                /** @class */
                function() {
                  function ResizeObserverController2() {
                    this.connected_ = false;
                    this.mutationEventsAdded_ = false;
                    this.mutationsObserver_ = null;
                    this.observers_ = [];
                    this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
                    this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
                  }
                  ResizeObserverController2.prototype.addObserver = function(observer) {
                    if (!~this.observers_.indexOf(observer)) {
                      this.observers_.push(observer);
                    }
                    if (!this.connected_) {
                      this.connect_();
                    }
                  };
                  ResizeObserverController2.prototype.removeObserver = function(observer) {
                    var observers2 = this.observers_;
                    var index2 = observers2.indexOf(observer);
                    if (~index2) {
                      observers2.splice(index2, 1);
                    }
                    if (!observers2.length && this.connected_) {
                      this.disconnect_();
                    }
                  };
                  ResizeObserverController2.prototype.refresh = function() {
                    var changesDetected = this.updateObservers_();
                    if (changesDetected) {
                      this.refresh();
                    }
                  };
                  ResizeObserverController2.prototype.updateObservers_ = function() {
                    var activeObservers = this.observers_.filter(function(observer) {
                      return observer.gatherActive(), observer.hasActive();
                    });
                    activeObservers.forEach(function(observer) {
                      return observer.broadcastActive();
                    });
                    return activeObservers.length > 0;
                  };
                  ResizeObserverController2.prototype.connect_ = function() {
                    if (!isBrowser || this.connected_) {
                      return;
                    }
                    document.addEventListener("transitionend", this.onTransitionEnd_);
                    window.addEventListener("resize", this.refresh);
                    if (mutationObserverSupported) {
                      this.mutationsObserver_ = new MutationObserver(this.refresh);
                      this.mutationsObserver_.observe(document, {
                        attributes: true,
                        childList: true,
                        characterData: true,
                        subtree: true
                      });
                    } else {
                      document.addEventListener("DOMSubtreeModified", this.refresh);
                      this.mutationEventsAdded_ = true;
                    }
                    this.connected_ = true;
                  };
                  ResizeObserverController2.prototype.disconnect_ = function() {
                    if (!isBrowser || !this.connected_) {
                      return;
                    }
                    document.removeEventListener("transitionend", this.onTransitionEnd_);
                    window.removeEventListener("resize", this.refresh);
                    if (this.mutationsObserver_) {
                      this.mutationsObserver_.disconnect();
                    }
                    if (this.mutationEventsAdded_) {
                      document.removeEventListener("DOMSubtreeModified", this.refresh);
                    }
                    this.mutationsObserver_ = null;
                    this.mutationEventsAdded_ = false;
                    this.connected_ = false;
                  };
                  ResizeObserverController2.prototype.onTransitionEnd_ = function(_a2) {
                    var _b = _a2.propertyName, propertyName = _b === void 0 ? "" : _b;
                    var isReflowProperty = transitionKeys.some(function(key) {
                      return !!~propertyName.indexOf(key);
                    });
                    if (isReflowProperty) {
                      this.refresh();
                    }
                  };
                  ResizeObserverController2.getInstance = function() {
                    if (!this.instance_) {
                      this.instance_ = new ResizeObserverController2();
                    }
                    return this.instance_;
                  };
                  ResizeObserverController2.instance_ = null;
                  return ResizeObserverController2;
                }()
              );
              var defineConfigurable = function(target, props) {
                for (var _i = 0, _a2 = Object.keys(props); _i < _a2.length; _i++) {
                  var key = _a2[_i];
                  Object.defineProperty(target, key, {
                    value: props[key],
                    enumerable: false,
                    writable: false,
                    configurable: true
                  });
                }
                return target;
              };
              var getWindowOf = function(target) {
                var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
                return ownerGlobal || global$1;
              };
              var emptyRect = createRectInit(0, 0, 0, 0);
              function toFloat(value) {
                return parseFloat(value) || 0;
              }
              function getBordersSize(styles) {
                var positions = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                  positions[_i - 1] = arguments[_i];
                }
                return positions.reduce(function(size2, position) {
                  var value = styles["border-" + position + "-width"];
                  return size2 + toFloat(value);
                }, 0);
              }
              function getPaddings(styles) {
                var positions = ["top", "right", "bottom", "left"];
                var paddings = {};
                for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
                  var position = positions_1[_i];
                  var value = styles["padding-" + position];
                  paddings[position] = toFloat(value);
                }
                return paddings;
              }
              function getSVGContentRect(target) {
                var bbox = target.getBBox();
                return createRectInit(0, 0, bbox.width, bbox.height);
              }
              function getHTMLElementContentRect(target) {
                var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
                if (!clientWidth && !clientHeight) {
                  return emptyRect;
                }
                var styles = getWindowOf(target).getComputedStyle(target);
                var paddings = getPaddings(styles);
                var horizPad = paddings.left + paddings.right;
                var vertPad = paddings.top + paddings.bottom;
                var width = toFloat(styles.width), height = toFloat(styles.height);
                if (styles.boxSizing === "border-box") {
                  if (Math.round(width + horizPad) !== clientWidth) {
                    width -= getBordersSize(styles, "left", "right") + horizPad;
                  }
                  if (Math.round(height + vertPad) !== clientHeight) {
                    height -= getBordersSize(styles, "top", "bottom") + vertPad;
                  }
                }
                if (!isDocumentElement(target)) {
                  var vertScrollbar = Math.round(width + horizPad) - clientWidth;
                  var horizScrollbar = Math.round(height + vertPad) - clientHeight;
                  if (Math.abs(vertScrollbar) !== 1) {
                    width -= vertScrollbar;
                  }
                  if (Math.abs(horizScrollbar) !== 1) {
                    height -= horizScrollbar;
                  }
                }
                return createRectInit(paddings.left, paddings.top, width, height);
              }
              var isSVGGraphicsElement = function() {
                if (typeof SVGGraphicsElement !== "undefined") {
                  return function(target) {
                    return target instanceof getWindowOf(target).SVGGraphicsElement;
                  };
                }
                return function(target) {
                  return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === "function";
                };
              }();
              function isDocumentElement(target) {
                return target === getWindowOf(target).document.documentElement;
              }
              function getContentRect(target) {
                if (!isBrowser) {
                  return emptyRect;
                }
                if (isSVGGraphicsElement(target)) {
                  return getSVGContentRect(target);
                }
                return getHTMLElementContentRect(target);
              }
              function createReadOnlyRect(_a2) {
                var x = _a2.x, y = _a2.y, width = _a2.width, height = _a2.height;
                var Constr = typeof DOMRectReadOnly !== "undefined" ? DOMRectReadOnly : Object;
                var rect = Object.create(Constr.prototype);
                defineConfigurable(rect, {
                  x,
                  y,
                  width,
                  height,
                  top: y,
                  right: x + width,
                  bottom: height + y,
                  left: x
                });
                return rect;
              }
              function createRectInit(x, y, width, height) {
                return { x, y, width, height };
              }
              var ResizeObservation = (
                /** @class */
                function() {
                  function ResizeObservation2(target) {
                    this.broadcastWidth = 0;
                    this.broadcastHeight = 0;
                    this.contentRect_ = createRectInit(0, 0, 0, 0);
                    this.target = target;
                  }
                  ResizeObservation2.prototype.isActive = function() {
                    var rect = getContentRect(this.target);
                    this.contentRect_ = rect;
                    return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
                  };
                  ResizeObservation2.prototype.broadcastRect = function() {
                    var rect = this.contentRect_;
                    this.broadcastWidth = rect.width;
                    this.broadcastHeight = rect.height;
                    return rect;
                  };
                  return ResizeObservation2;
                }()
              );
              var ResizeObserverEntry = (
                /** @class */
                function() {
                  function ResizeObserverEntry2(target, rectInit) {
                    var contentRect = createReadOnlyRect(rectInit);
                    defineConfigurable(this, { target, contentRect });
                  }
                  return ResizeObserverEntry2;
                }()
              );
              var ResizeObserverSPI = (
                /** @class */
                function() {
                  function ResizeObserverSPI2(callback, controller, callbackCtx) {
                    this.activeObservations_ = [];
                    this.observations_ = new MapShim();
                    if (typeof callback !== "function") {
                      throw new TypeError("The callback provided as parameter 1 is not a function.");
                    }
                    this.callback_ = callback;
                    this.controller_ = controller;
                    this.callbackCtx_ = callbackCtx;
                  }
                  ResizeObserverSPI2.prototype.observe = function(target) {
                    if (!arguments.length) {
                      throw new TypeError("1 argument required, but only 0 present.");
                    }
                    if (typeof Element === "undefined" || !(Element instanceof Object)) {
                      return;
                    }
                    if (!(target instanceof getWindowOf(target).Element)) {
                      throw new TypeError('parameter 1 is not of type "Element".');
                    }
                    var observations = this.observations_;
                    if (observations.has(target)) {
                      return;
                    }
                    observations.set(target, new ResizeObservation(target));
                    this.controller_.addObserver(this);
                    this.controller_.refresh();
                  };
                  ResizeObserverSPI2.prototype.unobserve = function(target) {
                    if (!arguments.length) {
                      throw new TypeError("1 argument required, but only 0 present.");
                    }
                    if (typeof Element === "undefined" || !(Element instanceof Object)) {
                      return;
                    }
                    if (!(target instanceof getWindowOf(target).Element)) {
                      throw new TypeError('parameter 1 is not of type "Element".');
                    }
                    var observations = this.observations_;
                    if (!observations.has(target)) {
                      return;
                    }
                    observations.delete(target);
                    if (!observations.size) {
                      this.controller_.removeObserver(this);
                    }
                  };
                  ResizeObserverSPI2.prototype.disconnect = function() {
                    this.clearActive();
                    this.observations_.clear();
                    this.controller_.removeObserver(this);
                  };
                  ResizeObserverSPI2.prototype.gatherActive = function() {
                    var _this = this;
                    this.clearActive();
                    this.observations_.forEach(function(observation) {
                      if (observation.isActive()) {
                        _this.activeObservations_.push(observation);
                      }
                    });
                  };
                  ResizeObserverSPI2.prototype.broadcastActive = function() {
                    if (!this.hasActive()) {
                      return;
                    }
                    var ctx = this.callbackCtx_;
                    var entries = this.activeObservations_.map(function(observation) {
                      return new ResizeObserverEntry(observation.target, observation.broadcastRect());
                    });
                    this.callback_.call(ctx, entries, ctx);
                    this.clearActive();
                  };
                  ResizeObserverSPI2.prototype.clearActive = function() {
                    this.activeObservations_.splice(0);
                  };
                  ResizeObserverSPI2.prototype.hasActive = function() {
                    return this.activeObservations_.length > 0;
                  };
                  return ResizeObserverSPI2;
                }()
              );
              var observers = typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : new MapShim();
              var ResizeObserver = (
                /** @class */
                function() {
                  function ResizeObserver2(callback) {
                    if (!(this instanceof ResizeObserver2)) {
                      throw new TypeError("Cannot call a class as a function.");
                    }
                    if (!arguments.length) {
                      throw new TypeError("1 argument required, but only 0 present.");
                    }
                    var controller = ResizeObserverController.getInstance();
                    var observer = new ResizeObserverSPI(callback, controller, this);
                    observers.set(this, observer);
                  }
                  return ResizeObserver2;
                }()
              );
              [
                "observe",
                "unobserve",
                "disconnect"
              ].forEach(function(method) {
                ResizeObserver.prototype[method] = function() {
                  var _a2;
                  return (_a2 = observers.get(this))[method].apply(_a2, arguments);
                };
              });
              var index = function() {
                if (typeof global$1.ResizeObserver !== "undefined") {
                  return global$1.ResizeObserver;
                }
                return ResizeObserver;
              }();
              __webpack_exports__["a"] = index;
            }).call(this, __webpack_require__(86));
          },
          /* 35 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.d(__webpack_exports__, "a", function() {
              return (
                /* binding */
                createEditor
              );
            });
            var utils_lang = __webpack_require__(13);
            var zh_CN = {
              undo: {
                toolbar: "撤销"
              },
              redo: {
                toolbar: "重做"
              },
              clear: {
                toolbar: "清空"
              },
              h: {
                toolbar: "标题"
              },
              h1: {
                toolbar: "一级标题",
                placeholder: "一级标题"
              },
              h2: {
                toolbar: "二级标题",
                placeholder: "二级标题"
              },
              h3: {
                toolbar: "三级标题",
                placeholder: "三级标题"
              },
              h4: {
                toolbar: "四级标题",
                placeholder: "四级标题"
              },
              h5: {
                toolbar: "五级标题",
                placeholder: "五级标题"
              },
              h6: {
                toolbar: "六级标题",
                placeholder: "六级标题"
              },
              bold: {
                toolbar: "粗体",
                placeholder: "粗体"
              },
              italic: {
                toolbar: "斜体",
                placeholder: "斜体"
              },
              strikethrough: {
                toolbar: "删除线",
                placeholder: "删除线"
              },
              quote: {
                toolbar: "插入引用",
                placeholder: "引用"
              },
              ul: {
                toolbar: "无序列表",
                placeholder: "无序列表"
              },
              ol: {
                toolbar: "有序列表",
                placeholder: "有序列表"
              },
              table: {
                toolbar: "表格"
              },
              hr: {
                toolbar: "插入分割线"
              },
              link: {
                toolbar: "插入链接",
                descPlaceholder: "链接"
              },
              image: {
                toolbar: "插入图片"
              },
              imageLink: {
                toolbar: "添加图片链接"
              },
              uploadImage: {
                toolbar: "上传本地图片"
              },
              code: {
                toolbar: "插入代码块"
              },
              save: {
                toolbar: "保存"
              },
              preview: {
                enabled: "开启预览",
                disabled: "关闭预览"
              },
              toc: {
                title: "目录导航",
                enabled: "开启目录导航",
                disabled: "关闭目录导航"
              },
              syncScroll: {
                enabled: "开启同步滚动",
                disabled: "关闭同步滚动"
              },
              fullscreen: {
                enabled: "全屏（按ESC还原）",
                disabled: "退出全屏"
              }
            };
            var external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_ = __webpack_require__(0);
            var util = __webpack_require__(2);
            var defaultCommands = {};
            Object(util[
              "c"
              /* importAll */
            ])(defaultCommands, __webpack_require__(38));
            function command_registerCommand(target, commandName, callback) {
              if (commandName) {
                if (!target[commandName]) {
                  target[commandName] = callback;
                } else {
                  console.error("The command name is already in use: " + commandName);
                }
              } else {
                console.error("Command name is required");
              }
            }
            function commandWrapper(component) {
              component.commands = {};
              component.command = function(commandName, callback) {
                command_registerCommand(component.commands, commandName, callback);
              };
              Object.keys(defaultCommands).forEach(function(key) {
                var module3 = defaultCommands[key];
                var name = module3.name, callback = module3.default;
                component.command(name, callback);
              });
            }
            var esm_extends = __webpack_require__(6);
            var defaultToolbars = {};
            Object(util[
              "c"
              /* importAll */
            ])(defaultToolbars, __webpack_require__(61));
            function toolbar_registerToolbar(target, name, config) {
              if (name) {
                target[name] = Object(esm_extends[
                  "a"
                  /* default */
                ])({}, config);
              } else {
                console.error("Toolbar name is required");
              }
            }
            function toolbarWrapper(component) {
              component.toolbars = {};
              component.toolbar = function(name, config) {
                toolbar_registerToolbar(component.toolbars, name, config);
              };
              Object.keys(defaultToolbars).forEach(function(key) {
                var module3 = defaultToolbars[key];
                var config = module3.default;
                component.toolbar(config.name, config);
              });
            }
            var styles = __webpack_require__(81);
            var preview = __webpack_require__(9);
            var _hoisted_1 = {
              class: "v-md-editor__left-area-body"
            };
            var _hoisted_2 = {
              class: "v-md-editor__right-area"
            };
            var _hoisted_3 = {
              class: "v-md-editor__toolbar",
              ref: "toolbarWrapper"
            };
            var _hoisted_4 = {
              class: "v-md-editor__toolbar-left-wrapper"
            };
            var _hoisted_5 = {
              class: "v-md-editor__toolbar-right-wrapper"
            };
            var _hoisted_6 = {
              class: "v-md-editor__main"
            };
            var _hoisted_7 = {
              class: "v-md-editor__preview-wrapper",
              ref: "previewWrapper"
            };
            function containervue_type_template_id_6ac08d95_bindings_leftToolbar_props_rightToolbar_props_toolbars_props_fullscreen_props_height_props_noresize_props_disabledMenus_props_leftAreaVisible_props_leftAreaTitle_props_leftAreaReverse_props_leftAreaWidth_props_mode_props_toolbarHeight_data_heightGetter_options_leftToolbarGroup_options_rightToolbarGroup_options_isPreviewMode_options_isEditMode_options_handleResize_options_handleToolbarWrapperResize_options_getToolbarConfig_options_handleEditorWrapperClick_options_handleToolbarItemClick_options_handleToolbarMenuClick_options_render(_ctx, _cache, $props, $setup, $data, $options) {
              var _component_editor_toolbar = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["resolveComponent"])("editor-toolbar");
              return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                "div",
                {
                  class: ["v-md-editor", ["v-md-editor--" + $props.mode, {
                    "v-md-editor--fullscreen": $props.fullscreen,
                    "v-md-editor--left-area-reverse": $props.leftAreaReverse
                  }]],
                  style: {
                    height: $options.heightGetter
                  }
                },
                [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withDirectives"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                  "div",
                  {
                    class: "v-md-editor__left-area",
                    style: {
                      width: $props.leftAreaVisible ? $props.leftAreaWidth : 0,
                      borderWidth: $props.leftAreaVisible ? "1px" : 0
                    }
                  },
                  [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                    "div",
                    {
                      class: "v-md-editor__left-area-title",
                      style: {
                        height: $data.toolbarHeight + "px",
                        lineHeight: $data.toolbarHeight + "px"
                      }
                    },
                    Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["toDisplayString"])($props.leftAreaTitle),
                    5
                    /* TEXT, STYLE */
                  ), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])("div", _hoisted_1, [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["renderSlot"])(_ctx.$slots, "left-area")])],
                  4
                  /* STYLE */
                ), [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["vShow"], !$options.isPreviewMode]]), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])("div", _hoisted_2, [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withDirectives"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                  "div",
                  _hoisted_3,
                  [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])("div", _hoisted_4, [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["renderSlot"])(_ctx.$slots, "left-toolbar", {}, function() {
                    return [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                      _component_editor_toolbar,
                      {
                        class: "v-md-editor__toolbar-left",
                        groups: $options.leftToolbarGroup,
                        toolbars: $props.toolbars,
                        "disabled-menus": $props.disabledMenus,
                        onItemClick: $options.handleToolbarItemClick,
                        onToolbarMenuClick: $options.handleToolbarMenuClick
                      },
                      null,
                      8,
                      ["groups", "toolbars", "disabled-menus", "onItemClick", "onToolbarMenuClick"]
                    )];
                  })]), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])("div", _hoisted_5, [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["renderSlot"])(_ctx.$slots, "right-toolbar", {}, function() {
                    return [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                      _component_editor_toolbar,
                      {
                        class: "v-md-editor__toolbar-right",
                        groups: $options.rightToolbarGroup,
                        toolbars: $props.toolbars,
                        "disabled-mens": $props.disabledMenus,
                        onItemClick: $options.handleToolbarItemClick,
                        onToolbarMenuClick: $options.handleToolbarMenuClick
                      },
                      null,
                      8,
                      ["groups", "toolbars", "disabled-mens", "onItemClick", "onToolbarMenuClick"]
                    )];
                  })])],
                  512
                  /* NEED_PATCH */
                ), [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["vShow"], !$options.isPreviewMode]]), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])("div", _hoisted_6, [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withDirectives"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                  "div",
                  {
                    ref: "editorWrapper",
                    class: "v-md-editor__editor-wrapper",
                    onClick: _cache[1] || (_cache[1] = function() {
                      return $options.handleEditorWrapperClick.apply($options, arguments);
                    })
                  },
                  [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["renderSlot"])(_ctx.$slots, "editor")],
                  512
                  /* NEED_PATCH */
                ), [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["vShow"], !$options.isPreviewMode]]), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withDirectives"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                  "div",
                  _hoisted_7,
                  [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["renderSlot"])(_ctx.$slots, "preview")],
                  512
                  /* NEED_PATCH */
                ), [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["vShow"], !$options.isEditMode]]), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["renderSlot"])(_ctx.$slots, "default")])])],
                6
                /* CLASS, STYLE */
              );
            }
            var toolbarvue_type_template_id_197f3a3b_bindings_markdownEditor_options_groups_props_toolbars_props_disabledMenus_props_getConfig_options_hoisted_1 = {
              key: 0
            };
            var toolbarvue_type_template_id_197f3a3b_bindings_markdownEditor_options_groups_props_toolbars_props_disabledMenus_props_getConfig_options_hoisted_2 = {
              key: 0,
              class: "v-md-editor__toolbar-divider"
            };
            function toolbarvue_type_template_id_197f3a3b_bindings_markdownEditor_options_groups_props_toolbars_props_disabledMenus_props_getConfig_options_render(_ctx, _cache, $props, $setup, $data, $options) {
              var _component_toolbar_item = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["resolveComponent"])("toolbar-item");
              return $props.groups.length ? (Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])("ul", toolbarvue_type_template_id_197f3a3b_bindings_markdownEditor_options_groups_props_toolbars_props_disabledMenus_props_getConfig_options_hoisted_1, [(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(true), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["Fragment"],
                null,
                Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["renderList"])($props.groups, function(group, idx) {
                  return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                    external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["Fragment"],
                    null,
                    [(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(true), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                      external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["Fragment"],
                      null,
                      Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["renderList"])(group, function(toolbarName) {
                        return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                          _component_toolbar_item,
                          {
                            key: toolbarName,
                            name: toolbarName,
                            title: $options.getConfig(toolbarName, "title"),
                            icon: $options.getConfig(toolbarName, "icon"),
                            text: $options.getConfig(toolbarName, "text"),
                            active: $options.getConfig(toolbarName, "active"),
                            menus: $options.getConfig(toolbarName, "menus"),
                            "disabled-menus": $props.disabledMenus,
                            onClick: function onClick($event) {
                              return _ctx.$emit("item-click", $props.toolbars[toolbarName]);
                            },
                            onMenuClick: _cache[1] || (_cache[1] = function($event) {
                              return _ctx.$emit("toolbar-menu-click", $event);
                            })
                          },
                          null,
                          8,
                          ["name", "title", "icon", "text", "active", "menus", "disabled-menus", "onClick"]
                        );
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    )), idx !== $props.groups.length - 1 ? (Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])("li", toolbarvue_type_template_id_197f3a3b_bindings_markdownEditor_options_groups_props_toolbars_props_disabledMenus_props_getConfig_options_hoisted_2)) : Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createCommentVNode"])("v-if", true)],
                    64
                    /* STABLE_FRAGMENT */
                  );
                }),
                256
                /* UNKEYED_FRAGMENT */
              ))])) : Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createCommentVNode"])("v-if", true);
            }
            var toolbar_itemvue_type_template_id_30f6176d_bindings_name_props_title_props_active_props_text_props_icon_props_menus_props_disabledMenus_props_menuActive_data_hasMenu_options_menuItems_options_menuMode_options_hideMenu_options_showMenu_options_handleClick_options_showTooltip_options_handleHideTooltip_options_hoisted_1 = {
              key: 1,
              class: "v-md-icon-arrow-down v-md-editor__menu-ctrl",
              ref: "menuCtrl"
            };
            function toolbar_itemvue_type_template_id_30f6176d_bindings_name_props_title_props_active_props_text_props_icon_props_menus_props_disabledMenus_props_menuActive_data_hasMenu_options_menuItems_options_menuMode_options_hideMenu_options_showMenu_options_handleClick_options_showTooltip_options_handleHideTooltip_options_render(_ctx, _cache, $props, $setup, $data, $options) {
              var _component_v_md_tooltip = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["resolveComponent"])("v-md-tooltip");
              var _component_v_md_menu = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["resolveComponent"])("v-md-menu");
              var _directive_clickoutside = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["resolveDirective"])("clickoutside");
              return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withDirectives"])((Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                "li",
                {
                  class: ["v-md-editor__toolbar-item", [$props.icon, "v-md-editor__toolbar-item-" + $props.name, {
                    "v-md-editor__toolbar-item--active": $props.active || $data.menuActive
                  }, {
                    "v-md-editor__toolbar-item--menu": $options.hasMenu
                  }]],
                  onMousedown: _cache[3] || (_cache[3] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                  }, ["prevent"])),
                  onMouseleave: _cache[4] || (_cache[4] = function() {
                    return $options.handleHideTooltip.apply($options, arguments);
                  }),
                  onMousemove: _cache[5] || (_cache[5] = function() {
                    return $options.showTooltip.apply($options, arguments);
                  }),
                  onClick: _cache[6] || (_cache[6] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                    return $options.handleClick.apply($options, arguments);
                  }, ["stop"]))
                },
                [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createTextVNode"])(
                  Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["toDisplayString"])($props.text) + " ",
                  1
                  /* TEXT */
                ), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                  _component_v_md_tooltip,
                  {
                    ref: "tooltip",
                    text: $props.title
                  },
                  null,
                  8,
                  ["text"]
                ), $options.hasMenu ? (Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                  _component_v_md_menu,
                  {
                    key: 0,
                    ref: "menu",
                    mode: $options.menuMode,
                    menus: $options.menuItems,
                    "item-width": $props.menus.itemWidth,
                    "row-num": $props.menus.rowNum,
                    visible: $data.menuActive,
                    "onUpdate:visible": _cache[1] || (_cache[1] = function($event) {
                      return $data.menuActive = $event;
                    }),
                    onItemClick: _cache[2] || (_cache[2] = function($event) {
                      return _ctx.$emit("menu-click", $event);
                    })
                  },
                  null,
                  8,
                  ["mode", "menus", "item-width", "row-num", "visible"]
                )) : Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createCommentVNode"])("v-if", true), $options.hasMenu ? (Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                  "i",
                  toolbar_itemvue_type_template_id_30f6176d_bindings_name_props_title_props_active_props_text_props_icon_props_menus_props_disabledMenus_props_menuActive_data_hasMenu_options_menuItems_options_menuMode_options_hideMenu_options_showMenu_options_handleClick_options_showTooltip_options_handleHideTooltip_options_hoisted_1,
                  null,
                  512
                  /* NEED_PATCH */
                )) : Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createCommentVNode"])("v-if", true)],
                34
                /* CLASS, HYDRATE_EVENTS */
              )), [[_directive_clickoutside, $options.hideMenu, "hideMenu"]]);
            }
            function tooltipvue_type_template_id_047bb94e_bindings_text_props_position_data_visible_data_show_options_hide_options_calculateLayout_options_render(_ctx, _cache, $props, $setup, $data, $options) {
              return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["Transition"], {
                name: "v-md-fade-in"
              }, {
                default: Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withCtx"])(function() {
                  return [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withDirectives"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                    "div",
                    {
                      style: {
                        left: $data.position.x + "px",
                        top: $data.position.y + "px"
                      },
                      class: "v-md-editor__tooltip"
                    },
                    Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["toDisplayString"])($props.text),
                    5
                    /* TEXT, STYLE */
                  ), [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["vShow"], $data.visible]])];
                }),
                _: 1
              });
            }
            var tooltipvue_type_script_lang_js = {
              name: "v-md-tooltip",
              props: {
                text: String
              },
              data: function data() {
                return {
                  position: {
                    x: 0,
                    y: 0
                  },
                  visible: false
                };
              },
              methods: {
                show: function show(position) {
                  this.position = {
                    x: position.x,
                    y: position.y
                  };
                  this.visible = true;
                  this.$nextTick(this.calculateLayout);
                },
                hide: function hide() {
                  this.visible = false;
                },
                calculateLayout: function calculateLayout() {
                  var _this$$el$getBounding = this.$el.getBoundingClientRect(), right = _this$$el$getBounding.right;
                  var windowWidth = document.documentElement.clientWidth;
                  if (windowWidth - right < 0) {
                    this.position.x -= right - windowWidth;
                  }
                }
              }
            };
            var tooltipvue_type_style_index_0_lang_scss = __webpack_require__(82);
            tooltipvue_type_script_lang_js.render = tooltipvue_type_template_id_047bb94e_bindings_text_props_position_data_visible_data_show_options_hide_options_calculateLayout_options_render;
            var tooltip = tooltipvue_type_script_lang_js;
            var menuvue_type_template_id_453a4c3c_bindings_markdownEditor_options_mode_props_menus_props_itemWidth_props_rowNum_props_visible_props_style_data_rowCount_options_isListMode_options_calculateLayout_options_getRowMenus_options_getText_options_hide_options_handleClick_options_hoisted_1 = {
              key: 1
            };
            var menuvue_type_template_id_453a4c3c_bindings_markdownEditor_options_mode_props_menus_props_itemWidth_props_rowNum_props_visible_props_style_data_rowCount_options_isListMode_options_calculateLayout_options_getRowMenus_options_getText_options_hide_options_handleClick_options_hoisted_2 = {
              class: "v-md-editor__menu-row"
            };
            function menuvue_type_template_id_453a4c3c_bindings_markdownEditor_options_mode_props_menus_props_itemWidth_props_rowNum_props_visible_props_style_data_rowCount_options_isListMode_options_calculateLayout_options_getRowMenus_options_getText_options_hide_options_handleClick_options_render(_ctx, _cache, $props, $setup, $data, $options) {
              var _component_v_md_render = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["resolveComponent"])("v-md-render");
              return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["Transition"], {
                name: "v-md-zoom-in-top"
              }, {
                default: Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withCtx"])(function() {
                  return [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withDirectives"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                    "ul",
                    {
                      class: ["v-md-editor__menu", ["v-md-editor__menu--" + $props.mode]],
                      style: $data.style,
                      onMousemove: _cache[1] || (_cache[1] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                      }, ["stop"])),
                      onClick: _cache[2] || (_cache[2] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                      }, ["stop"]))
                    },
                    [$options.isListMode ? (Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(true), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                      external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["Fragment"],
                      {
                        key: 0
                      },
                      Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["renderList"])($props.menus, function(item) {
                        return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                          "li",
                          {
                            key: item.name,
                            class: ["v-md-editor__menu-item", ["v-md-editor__menu-item-" + item.name, item.class]],
                            onClick: Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function($event) {
                              return $options.handleClick(item);
                            }, ["stop"])
                          },
                          [item.render ? (Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                            _component_v_md_render,
                            {
                              key: 0,
                              render: item.render
                            },
                            null,
                            8,
                            ["render"]
                          )) : (Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                            external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["Fragment"],
                            {
                              key: 1
                            },
                            [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createTextVNode"])(
                              Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["toDisplayString"])($options.getText(item.text)),
                              1
                              /* TEXT */
                            )],
                            64
                            /* STABLE_FRAGMENT */
                          ))],
                          10,
                          ["onClick"]
                        );
                      }),
                      128
                      /* KEYED_FRAGMENT */
                    )) : (Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])("li", menuvue_type_template_id_453a4c3c_bindings_markdownEditor_options_mode_props_menus_props_itemWidth_props_rowNum_props_visible_props_style_data_rowCount_options_isListMode_options_calculateLayout_options_getRowMenus_options_getText_options_hide_options_handleClick_options_hoisted_1, [(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(true), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                      external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["Fragment"],
                      null,
                      Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["renderList"])($options.rowCount, function(rowIndex) {
                        return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])("div", menuvue_type_template_id_453a4c3c_bindings_markdownEditor_options_mode_props_menus_props_itemWidth_props_rowNum_props_visible_props_style_data_rowCount_options_isListMode_options_calculateLayout_options_getRowMenus_options_getText_options_hide_options_handleClick_options_hoisted_2, [(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(true), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                          external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["Fragment"],
                          null,
                          Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["renderList"])($options.getRowMenus(rowIndex), function(item) {
                            return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                              "span",
                              {
                                key: item.name,
                                style: {
                                  width: $props.itemWidth
                                },
                                class: ["v-md-editor__menu-item", ["v-md-editor__menu-item-" + item.name, item.class]],
                                onClick: Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function($event) {
                                  return $options.handleClick(item);
                                }, ["stop"])
                              },
                              Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["toDisplayString"])(item.text),
                              15,
                              ["onClick"]
                            );
                          }),
                          128
                          /* KEYED_FRAGMENT */
                        ))]);
                      }),
                      256
                      /* UNKEYED_FRAGMENT */
                    ))]))],
                    38
                    /* CLASS, STYLE, HYDRATE_EVENTS */
                  ), [[external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["vShow"], $props.visible]])];
                }),
                _: 1
              });
            }
            var renderFn = function renderFn2(props, _ref) {
              var attrs = _ref.attrs;
              return props.render.apply(props, attrs);
            };
            renderFn.props = ["render"];
            var components_render = renderFn;
            var menu_mode = {
              LIST: "list",
              PANEL: "panel"
            };
            var menuvue_type_script_lang_js = {
              name: "v-md-menu",
              components: {
                VMdRender: components_render
              },
              inject: ["markdownEditor"],
              props: {
                mode: {
                  type: String,
                  default: menu_mode.PANEL
                },
                menus: Array,
                itemWidth: {
                  type: String,
                  default: "30px"
                },
                rowNum: {
                  type: Number,
                  default: 10
                },
                visible: Boolean
              },
              emits: ["update:visible", "item-click"],
              data: function data() {
                return {
                  style: {
                    left: 0
                  }
                };
              },
              computed: {
                rowCount: function rowCount() {
                  return Math.ceil(this.menus.length / this.rowNum);
                },
                isListMode: function isListMode() {
                  return this.mode === menu_mode.LIST;
                }
              },
              watch: {
                visible: function visible() {
                  if (this.visible)
                    this.$nextTick(this.calculateLayout);
                }
              },
              methods: {
                calculateLayout: function calculateLayout() {
                  var _this$$el$getBounding = this.$el.getBoundingClientRect(), right = _this$$el$getBounding.right;
                  var windowWidth = document.documentElement.clientWidth;
                  if (windowWidth - right < 0)
                    this.style = {
                      right: 0
                    };
                },
                getRowMenus: function getRowMenus(rowIndex) {
                  var end = rowIndex * this.rowNum;
                  var start = end - this.rowNum;
                  return this.menus.slice(start, end);
                },
                getText: function getText(text) {
                  if (typeof text === "function") {
                    return text(this.markdownEditor);
                  }
                  return text;
                },
                hide: function hide() {
                  this.$emit("update:visible", false);
                },
                handleClick: function handleClick(item) {
                  this.$emit("item-click", item);
                  this.hide();
                }
              }
            };
            var menuvue_type_style_index_0_lang_scss = __webpack_require__(83);
            menuvue_type_script_lang_js.render = menuvue_type_template_id_453a4c3c_bindings_markdownEditor_options_mode_props_menus_props_itemWidth_props_rowNum_props_visible_props_style_data_rowCount_options_isListMode_options_calculateLayout_options_getRowMenus_options_getText_options_hide_options_handleClick_options_render;
            var menu = menuvue_type_script_lang_js;
            var nodeList = [];
            var ctx = "@@clickoutsideContext";
            var startClick;
            var seed = 0;
            if (util[
              "d"
              /* inBrowser */
            ]) {
              document.addEventListener("mousedown", function(e) {
                startClick = e;
              });
              document.addEventListener("mouseup", function(e) {
                nodeList.forEach(function(node) {
                  return node[ctx].documentHandler(e, startClick);
                });
              });
            }
            function createDocumentHandler(el, binding, vnode) {
              return function(mouseup, mousedown) {
                if (mouseup === void 0) {
                  mouseup = {};
                }
                if (mousedown === void 0) {
                  mousedown = {};
                }
                if (!vnode || !binding || !binding.instance || !mouseup.target || !mousedown.target || el.contains(mouseup.target) || el.contains(mousedown.target) || el === mouseup.target) {
                  return;
                }
                if (binding.arg && el[ctx].methodName && binding.instance[el[ctx].methodName]) {
                  binding.instance[el[ctx].methodName]();
                } else {
                  el[ctx].bindingFn && el[ctx].bindingFn();
                }
              };
            }
            var clickoutside = {
              beforeMount: function beforeMount(el, binding, vnode) {
                nodeList.push(el);
                var id = seed++;
                el[ctx] = {
                  id,
                  documentHandler: createDocumentHandler(el, binding, vnode),
                  methodName: binding.arg,
                  bindingFn: binding.value
                };
              },
              updated: function updated(el, binding, vnode) {
                el[ctx].documentHandler = createDocumentHandler(el, binding, vnode);
                el[ctx].methodName = binding.arg;
                el[ctx].bindingFn = binding.value;
              },
              unmounted: function unmounted(el) {
                var len = nodeList.length;
                for (var i = 0; i < len; i++) {
                  if (nodeList[i][ctx].id === el[ctx].id) {
                    nodeList.splice(i, 1);
                    break;
                  }
                }
                delete el[ctx];
              }
            };
            var _components;
            var toolbar_itemvue_type_script_lang_js = {
              name: "toolbar-item",
              directives: {
                Clickoutside: clickoutside
              },
              components: (_components = {}, _components[tooltip.name] = tooltip, _components[menu.name] = menu, _components),
              props: {
                name: String,
                title: String,
                active: Boolean,
                text: String,
                icon: String,
                menus: [Array, Object],
                disabledMenus: Array
              },
              emits: ["click", "menu-click"],
              data: function data() {
                return {
                  menuActive: false
                };
              },
              computed: {
                hasMenu: function hasMenu() {
                  var _this$menuItems;
                  return (_this$menuItems = this.menuItems) == null ? void 0 : _this$menuItems.length;
                },
                menuItems: function menuItems() {
                  var _this = this;
                  var menus = Object(util[
                    "f"
                    /* isObject */
                  ])(this.menus) ? this.menus.items : this.menus;
                  return menus == null ? void 0 : menus.filter(function(_ref) {
                    var _this$disabledMenus;
                    var menuName = _ref.name;
                    return !((_this$disabledMenus = _this.disabledMenus) != null && _this$disabledMenus.includes(_this.name + "/" + menuName));
                  });
                },
                menuMode: function menuMode() {
                  return Object(util[
                    "f"
                    /* isObject */
                  ])(this.menus) ? this.menus.mode : menu_mode.LIST;
                }
              },
              methods: {
                hideMenu: function hideMenu() {
                  if (this.hasMenu) {
                    this.menuActive = false;
                  }
                },
                showMenu: function showMenu() {
                  if (this.hasMenu) {
                    this.menuActive = true;
                  }
                },
                handleClick: function handleClick(e) {
                  this.$emit("click");
                  this.menuActive ? this.hideMenu() : this.showMenu();
                  if (this.hasMenu) {
                    this.handleHideTooltip();
                  } else {
                    this.showTooltip(e);
                  }
                },
                showTooltip: function showTooltip(e) {
                  var _this2 = this;
                  var selfEl = this.$el;
                  var target = e.target;
                  var menuCtrl = this.$refs.menuCtrl;
                  if (target !== selfEl && target !== menuCtrl || this.menuActive) {
                    this.handleHideTooltip();
                    return;
                  }
                  if (this.timmer)
                    clearTimeout(this.timmer);
                  var selfElRect = selfEl.getBoundingClientRect();
                  var x = e.clientX - selfElRect.left;
                  var y = e.clientY - selfElRect.top;
                  this.timmer = setTimeout(function() {
                    var _this2$$refs$tooltip;
                    (_this2$$refs$tooltip = _this2.$refs.tooltip) == null ? void 0 : _this2$$refs$tooltip.show({
                      x: x - 2,
                      y: y + 20
                    });
                  }, 100);
                },
                handleHideTooltip: function handleHideTooltip() {
                  if (this.timmer)
                    clearTimeout(this.timmer);
                  this.$refs.tooltip.hide();
                }
              }
            };
            var toolbar_itemvue_type_style_index_0_lang_scss = __webpack_require__(84);
            toolbar_itemvue_type_script_lang_js.render = toolbar_itemvue_type_template_id_30f6176d_bindings_name_props_title_props_active_props_text_props_icon_props_menus_props_disabledMenus_props_menuActive_data_hasMenu_options_menuItems_options_menuMode_options_hideMenu_options_showMenu_options_handleClick_options_showTooltip_options_handleHideTooltip_options_render;
            var toolbar_item = toolbar_itemvue_type_script_lang_js;
            var toolbarvue_type_script_lang_js_components;
            var toolbarvue_type_script_lang_js = {
              name: "editor-toolbar",
              components: (toolbarvue_type_script_lang_js_components = {}, toolbarvue_type_script_lang_js_components[toolbar_item.name] = toolbar_item, toolbarvue_type_script_lang_js_components),
              inject: ["markdownEditor"],
              props: {
                groups: Array,
                toolbars: Object,
                disabledMenus: Array
              },
              emits: ["item-click", "toolbar-menu-click"],
              methods: {
                getConfig: function getConfig(toolbarName, configName) {
                  var toolbarConfig = this.toolbars[toolbarName];
                  var value = toolbarConfig[configName];
                  return typeof value === "function" ? value(this.markdownEditor) : value;
                }
              }
            };
            var toolbarvue_type_style_index_0_lang_scss = __webpack_require__(85);
            toolbarvue_type_script_lang_js.render = toolbarvue_type_template_id_197f3a3b_bindings_markdownEditor_options_groups_props_toolbars_props_disabledMenus_props_getConfig_options_render;
            var toolbar = toolbarvue_type_script_lang_js;
            var ResizeObserver_es = __webpack_require__(34);
            var isServer = typeof window === "undefined";
            var resizeHandler = function resizeHandler2(entries) {
              entries.forEach(function(entry) {
                var listeners = entry.target.__resizeListeners__ || [];
                if (listeners.length) {
                  listeners.forEach(function(fn) {
                    fn();
                  });
                }
              });
            };
            var resize_event_addResizeListener = function addResizeListener(element, fn) {
              if (isServer)
                return;
              if (!element.__resizeListeners__) {
                element.__resizeListeners__ = [];
                element.__ro__ = new ResizeObserver_es[
                  "a"
                  /* default */
                ](resizeHandler);
                element.__ro__.observe(element);
              }
              element.__resizeListeners__.push(fn);
            };
            var removeResizeListener = function removeResizeListener2(element, fn) {
              if (!element || !element.__resizeListeners__)
                return;
              element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);
              if (!element.__resizeListeners__.length) {
                element.__ro__.disconnect();
              }
            };
            var editor_mode = __webpack_require__(4);
            var containervue_type_script_lang_js_components;
            var containervue_type_script_lang_js = {
              name: "v-md-container",
              components: (containervue_type_script_lang_js_components = {}, containervue_type_script_lang_js_components[toolbar.name] = toolbar, containervue_type_script_lang_js_components),
              props: {
                leftToolbar: String,
                rightToolbar: String,
                toolbars: Object,
                fullscreen: Boolean,
                height: String,
                noresize: Boolean,
                disabledMenus: Array,
                leftAreaVisible: Boolean,
                leftAreaTitle: String,
                leftAreaReverse: Boolean,
                leftAreaWidth: {
                  type: String,
                  default: "200px"
                },
                mode: {
                  type: String,
                  default: editor_mode[
                    "a"
                    /* default */
                  ].EDITABLE
                }
              },
              emits: ["resize", "editor-wrapper-click", "toolbar-item-click", "toolbar-menu-click"],
              data: function data() {
                return {
                  toolbarHeight: 0
                };
              },
              computed: {
                heightGetter: function heightGetter() {
                  return this.fullscreen ? "auto" : this.height;
                },
                leftToolbarGroup: function leftToolbarGroup() {
                  return this.getToolbarConfig(this.leftToolbar);
                },
                rightToolbarGroup: function rightToolbarGroup() {
                  return this.getToolbarConfig(this.rightToolbar);
                },
                isPreviewMode: function isPreviewMode() {
                  return this.mode === editor_mode[
                    "a"
                    /* default */
                  ].PREVIEW;
                },
                isEditMode: function isEditMode() {
                  return this.mode === editor_mode[
                    "a"
                    /* default */
                  ].EDIT;
                }
              },
              mounted: function mounted() {
                if (!this.noresize) {
                  resize_event_addResizeListener(this.$refs.editorWrapper, this.handleResize);
                  resize_event_addResizeListener(this.$refs.toolbarWrapper, this.handleToolbarWrapperResize);
                }
              },
              beforeUnmount: function beforeUnmount() {
                if (!this.noresize) {
                  removeResizeListener(this.$refs.editorWrapper, this.handleResize);
                  removeResizeListener(this.$refs.toolbarWrapper, this.handleToolbarWrapperResize);
                }
              },
              methods: {
                handleResize: function handleResize() {
                  this.$emit("resize");
                },
                handleToolbarWrapperResize: function handleToolbarWrapperResize() {
                  var toolbarWrapper2 = this.$refs.toolbarWrapper;
                  if (toolbarWrapper2)
                    this.toolbarHeight = toolbarWrapper2.offsetHeight;
                },
                getToolbarConfig: function getToolbarConfig(toolbarStr) {
                  var _this = this;
                  return toolbarStr.split("|").map(function(group) {
                    return group.split(" ").filter(function(toolbarName) {
                      return toolbarName && _this.toolbars[toolbarName];
                    });
                  });
                },
                handleEditorWrapperClick: function handleEditorWrapperClick(e) {
                  this.$emit("editor-wrapper-click", e);
                },
                handleToolbarItemClick: function handleToolbarItemClick(toolbar2) {
                  this.$emit("toolbar-item-click", toolbar2);
                },
                handleToolbarMenuClick: function handleToolbarMenuClick(menu2) {
                  this.$emit("toolbar-menu-click", menu2);
                }
              }
            };
            var containervue_type_style_index_0_lang_scss = __webpack_require__(87);
            containervue_type_script_lang_js.render = containervue_type_template_id_6ac08d95_bindings_leftToolbar_props_rightToolbar_props_toolbars_props_fullscreen_props_height_props_noresize_props_disabledMenus_props_leftAreaVisible_props_leftAreaTitle_props_leftAreaReverse_props_leftAreaWidth_props_mode_props_toolbarHeight_data_heightGetter_options_leftToolbarGroup_options_rightToolbarGroup_options_isPreviewMode_options_isEditMode_options_handleResize_options_handleToolbarWrapperResize_options_getToolbarConfig_options_handleEditorWrapperClick_options_handleToolbarItemClick_options_handleToolbarMenuClick_options_render;
            var container = containervue_type_script_lang_js;
            var scrollBarWidth;
            var scrollbar_width_isServer = typeof window === "undefined";
            var scrollbar_width = function() {
              if (scrollbar_width_isServer)
                return 0;
              if (scrollBarWidth !== void 0)
                return scrollBarWidth;
              var outer = document.createElement("div");
              outer.className = "scrollbar__wrap";
              outer.style.visibility = "hidden";
              outer.style.width = "100px";
              outer.style.position = "absolute";
              outer.style.top = "-9999px";
              document.body.appendChild(outer);
              var widthNoScroll = outer.offsetWidth;
              outer.style.overflow = "scroll";
              var inner = document.createElement("div");
              inner.style.width = "100%";
              outer.appendChild(inner);
              var widthWithScroll = inner.offsetWidth;
              outer.parentNode.removeChild(outer);
              scrollBarWidth = widthNoScroll - widthWithScroll;
              return scrollBarWidth;
            };
            var BAR_MAP = {
              vertical: {
                offset: "offsetHeight",
                scroll: "scrollTop",
                scrollSize: "scrollHeight",
                size: "height",
                key: "vertical",
                axis: "Y",
                client: "clientY",
                direction: "top"
              },
              horizontal: {
                offset: "offsetWidth",
                scroll: "scrollLeft",
                scrollSize: "scrollWidth",
                size: "width",
                key: "horizontal",
                axis: "X",
                client: "clientX",
                direction: "left"
              }
            };
            function renderThumbStyle(_ref) {
              var move = _ref.move, size2 = _ref.size, bar = _ref.bar;
              var style = {};
              var translate = "translate" + bar.axis + "(" + move + "%)";
              style[bar.size] = size2;
              style.transform = translate;
              style.msTransform = translate;
              style.webkitTransform = translate;
              return style;
            }
            var scrollbar_bar = {
              name: "Bar",
              props: {
                vertical: Boolean,
                size: String,
                move: Number
              },
              computed: {
                bar: function bar() {
                  return BAR_MAP[this.vertical ? "vertical" : "horizontal"];
                },
                wrap: function wrap() {
                  return this.$parent.wrap;
                }
              },
              render: function render2() {
                var size2 = this.size, move = this.move, bar = this.bar;
                return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])("div", {
                  "class": ["scrollbar__bar", "is-" + bar.key],
                  "onMousedown": this.clickTrackHandler,
                  "onClick": function onClick(e) {
                    return e.stopPropagation();
                  }
                }, [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])("div", {
                  "ref": "thumb",
                  "class": "scrollbar__thumb",
                  "onMousedown": this.clickThumbHandler,
                  "style": renderThumbStyle({
                    size: size2,
                    move,
                    bar
                  })
                }, null)]);
              },
              methods: {
                clickThumbHandler: function clickThumbHandler(e) {
                  if (e.ctrlKey || e.button === 2) {
                    return;
                  }
                  this.startDrag(e);
                  this[this.bar.axis] = e.currentTarget[this.bar.offset] - (e[this.bar.client] - e.currentTarget.getBoundingClientRect()[this.bar.direction]);
                },
                clickTrackHandler: function clickTrackHandler(e) {
                  var offset = Math.abs(e.target.getBoundingClientRect()[this.bar.direction] - e[this.bar.client]);
                  var thumbHalf = this.$refs.thumb[this.bar.offset] / 2;
                  var thumbPositionPercentage = (offset - thumbHalf) * 100 / this.$el[this.bar.offset];
                  this.wrap[this.bar.scroll] = thumbPositionPercentage * this.wrap[this.bar.scrollSize] / 100;
                },
                startDrag: function startDrag(e) {
                  e.stopImmediatePropagation();
                  this.cursorDown = true;
                  document.addEventListener("mousemove", this.mouseMoveDocumentHandler, false);
                  document.addEventListener("mouseup", this.mouseUpDocumentHandler, false);
                  document.onselectstart = function() {
                    return false;
                  };
                },
                mouseMoveDocumentHandler: function mouseMoveDocumentHandler(e) {
                  if (this.cursorDown === false)
                    return;
                  var prevPage = this[this.bar.axis];
                  if (!prevPage)
                    return;
                  var offset = (this.$el.getBoundingClientRect()[this.bar.direction] - e[this.bar.client]) * -1;
                  var thumbClickPosition = this.$refs.thumb[this.bar.offset] - prevPage;
                  var thumbPositionPercentage = (offset - thumbClickPosition) * 100 / this.$el[this.bar.offset];
                  this.wrap[this.bar.scroll] = thumbPositionPercentage * this.wrap[this.bar.scrollSize] / 100;
                },
                mouseUpDocumentHandler: function mouseUpDocumentHandler() {
                  this.cursorDown = false;
                  this[this.bar.axis] = 0;
                  document.removeEventListener("mousemove", this.mouseMoveDocumentHandler, false);
                  document.onselectstart = null;
                }
              },
              unmounted: function unmounted() {
                document.removeEventListener("mouseup", this.mouseUpDocumentHandler, false);
              }
            };
            var smooth_scroll = __webpack_require__(8);
            var scrollbarvue_type_script_lang_js = {
              name: "scrollbar",
              components: {
                Bar: scrollbar_bar
              },
              props: {
                native: Boolean,
                disabled: Boolean,
                wrapStyle: null,
                wrapClass: null,
                viewClass: null,
                viewStyle: null,
                noresize: Boolean,
                // 如果 container 尺寸不会发生变化，最好设置它可以优化性能
                tag: {
                  type: String,
                  default: "div"
                }
              },
              emits: ["scroll"],
              data: function data() {
                return {
                  sizeWidth: "0",
                  sizeHeight: "0",
                  moveX: 0,
                  moveY: 0
                };
              },
              computed: {
                wrap: function wrap() {
                  return this.$refs.wrap;
                }
              },
              mounted: function mounted() {
                if (this.native || this.disabled)
                  return;
                this.$nextTick(this.update);
                !this.noresize && resize_event_addResizeListener(this.$refs.resize, this.update);
              },
              beforeUnmount: function beforeUnmount() {
                if (this.native || this.disabled)
                  return;
                !this.noresize && removeResizeListener(this.$refs.resize, this.update);
              },
              methods: {
                getScrollInfo: function getScrollInfo() {
                  var wrap = this.wrap;
                  return {
                    left: wrap.scrollLeft,
                    top: wrap.scrollTop,
                    width: wrap.scrollWidth,
                    height: wrap.scrollHeight,
                    clientWidth: wrap.clientWidth,
                    clientHeight: wrap.clientHeight
                  };
                },
                scrollTo: function scrollTo(scrollTop) {
                  Object(smooth_scroll[
                    "a"
                    /* default */
                  ])({
                    scrollTarget: this.wrap,
                    scrollToTop: scrollTop
                  });
                },
                handleScroll: function handleScroll() {
                  var wrap = this.wrap;
                  this.moveY = wrap.scrollTop * 100 / wrap.clientHeight;
                  this.moveX = wrap.scrollLeft * 100 / wrap.clientWidth;
                  this.$emit("scroll");
                },
                update: function update() {
                  var wrap = this.wrap;
                  if (!wrap)
                    return;
                  var heightPercentage = wrap.clientHeight * 100 / wrap.scrollHeight;
                  var widthPercentage = wrap.clientWidth * 100 / wrap.scrollWidth;
                  this.sizeHeight = heightPercentage < 100 ? heightPercentage + "%" : "";
                  this.sizeWidth = widthPercentage < 100 ? widthPercentage + "%" : "";
                }
              },
              render: function render2() {
                if (this.disabled)
                  return this.$slots.default();
                var gutter = scrollbar_width();
                var style = this.wrapStyle;
                if (gutter) {
                  var scrollView = this.$refs.resize;
                  var wrapper = this.$refs.wrap;
                  var scrollViewHeight = scrollView == null ? void 0 : scrollView.scrollHeight;
                  var scrollViewWidth = scrollView == null ? void 0 : scrollView.scrollWidth;
                  var wrapperHeight = wrapper == null ? void 0 : wrapper.clientHeight;
                  var wrapperWidth = wrapper == null ? void 0 : wrapper.clientWidth;
                  var gutterWith = "-" + gutter + "px";
                  var marginBottom = scrollViewWidth > wrapperWidth ? gutterWith : 0;
                  var marginRight = scrollViewHeight > wrapperHeight ? gutterWith : 0;
                  var gutterStyle = "margin-bottom: " + marginBottom + "; margin-right: " + marginRight + ";";
                  if (Array.isArray(this.wrapStyle)) {
                    style = Object(util[
                      "a"
                      /* arraytoObject */
                    ])(this.wrapStyle);
                    style.marginRight = gutterWith;
                    style.marginBottom = gutterWith;
                  } else if (typeof this.wrapStyle === "string") {
                    style += gutterStyle;
                  } else {
                    style = gutterStyle;
                  }
                }
                var view = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["h"])(this.tag, {
                  class: ["scrollbar__view", this.viewClass],
                  style: this.viewStyle,
                  ref: "resize"
                }, this.$slots.default());
                var wrap = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])("div", {
                  "ref": "wrap",
                  "style": style,
                  "onScroll": this.handleScroll,
                  "class": [this.wrapClass, "scrollbar__wrap", gutter ? "" : "scrollbar__wrap--hidden-default"]
                }, [[view]]);
                var nodes;
                if (!this.native) {
                  nodes = [wrap, Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(scrollbar_bar, {
                    "move": this.moveX,
                    "size": this.sizeWidth
                  }, null), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(scrollbar_bar, {
                    "vertical": true,
                    "move": this.moveY,
                    "size": this.sizeHeight
                  }, null)];
                } else {
                  nodes = [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])("div", {
                    "ref": "wrap",
                    "class": [this.wrapClass, "scrollbar__wrap"],
                    "style": style
                  }, [[view]])];
                }
                return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["h"])("div", {
                  class: "scrollbar"
                }, nodes);
              }
            };
            var scrollbarvue_type_style_index_0_lang_scss = __webpack_require__(88);
            var scrollbar = scrollbarvue_type_script_lang_js;
            var toc_navvue_type_template_id_035b0d52_bindings_titles_props_indent_props_hoisted_1 = {
              class: "v-md-editor__toc-nav"
            };
            var toc_navvue_type_template_id_035b0d52_bindings_titles_props_indent_props_hoisted_2 = {
              class: "v-md-editor__toc-nav-title"
            };
            function toc_navvue_type_template_id_035b0d52_bindings_titles_props_indent_props_render(_ctx, _cache, $props, $setup, $data, $options) {
              return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])("ul", toc_navvue_type_template_id_035b0d52_bindings_titles_props_indent_props_hoisted_1, [(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(true), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["Fragment"],
                null,
                Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["renderList"])($props.titles, function(item) {
                  return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                    "li",
                    {
                      style: {
                        paddingLeft: $props.indent * item.indent + "px"
                      },
                      onClick: function onClick($event) {
                        return _ctx.$emit("nav-click", item);
                      },
                      class: "v-md-editor__toc-nav-item"
                    },
                    [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                      "span",
                      toc_navvue_type_template_id_035b0d52_bindings_titles_props_indent_props_hoisted_2,
                      Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["toDisplayString"])(item.title),
                      1
                      /* TEXT */
                    )],
                    12,
                    ["onClick"]
                  );
                }),
                256
                /* UNKEYED_FRAGMENT */
              ))]);
            }
            var toc_navvue_type_script_lang_js = {
              name: "toc-nav",
              props: {
                titles: Array,
                indent: {
                  type: Number,
                  default: 16
                }
              },
              emits: ["nav-click"]
            };
            var toc_navvue_type_style_index_0_lang_scss = __webpack_require__(89);
            toc_navvue_type_script_lang_js.render = toc_navvue_type_template_id_035b0d52_bindings_titles_props_indent_props_render;
            var toc_nav = toc_navvue_type_script_lang_js;
            var common_components;
            var common = {
              inheritAttrs: false,
              components: (common_components = {}, common_components[preview["default"].name] = preview["default"], common_components[container.name] = container, common_components[scrollbar.name] = scrollbar, common_components[toc_nav.name] = toc_nav, common_components),
              provide: function provide2() {
                return {
                  markdownEditor: this
                };
              },
              props: {
                height: String,
                theme: Object,
                mode: {
                  type: String,
                  default: editor_mode[
                    "a"
                    /* default */
                  ].EDITABLE
                },
                autofocus: Boolean,
                placeholder: String,
                tocNavPositionRight: Boolean,
                tabSize: {
                  type: Number,
                  default: 2
                },
                beforePreviewChange: {
                  type: Function,
                  default: function _default(text, next) {
                    next(text);
                  }
                }
              },
              emits: ["blur", "change", "save", "image-click"],
              data: function data() {
                return {
                  currentMode: this.mode,
                  uploadConfig: {}
                };
              },
              watch: {
                mode: function mode() {
                  this.currentMode = this.mode;
                },
                currentMode: function currentMode() {
                  if (this.currentMode === editor_mode[
                    "a"
                    /* default */
                  ].EDITABLE && this.enableSyncScroll) {
                    this.$nextTick(this.previewSyncScroll);
                  }
                }
              },
              created: function created() {
                if (this.theme)
                  this.$options.use(this.theme);
              },
              computed: {
                isPreviewMode: function isPreviewMode() {
                  return this.currentMode === editor_mode[
                    "a"
                    /* default */
                  ].PREVIEW;
                },
                isEditMode: function isEditMode() {
                  return this.currentMode === editor_mode[
                    "a"
                    /* default */
                  ].EDIT;
                },
                proxySlots: function proxySlots() {
                  var _this = this;
                  return ["left-toolbar", "right-toolbar"].filter(function(slotName) {
                    return _this.$slots[slotName];
                  });
                }
              },
              mounted: function mounted() {
                if (this.autofocus) {
                  this.$nextTick(this.setFocusEnd);
                }
              },
              methods: {
                setFocusEnd: function setFocusEnd() {
                  this.editorFocusEnd();
                  this.editorScrollToTop(9999);
                  this.previewScrollTo(9999);
                },
                // change event
                handleChange: function handleChange(text, html) {
                  this.$emit("change", text, html);
                },
                handleBlur: function handleBlur(e) {
                  this.$emit("blur", e);
                },
                handlePreviewImageClick: function handlePreviewImageClick(images, currentIndex) {
                  this.$emit("image-click", images, currentIndex);
                },
                save: function save() {
                  this.$emit("save", this.text, this.$refs.preview.html);
                },
                insert: function insert(getInsertContent) {
                  var _this2 = this;
                  this.focus();
                  var currentSelectedStr = this.getCurrentSelectedStr();
                  var _getInsertContent = getInsertContent(currentSelectedStr), selected = _getInsertContent.selected, text = _getInsertContent.text;
                  this.replaceSelectionText(text);
                  this.$nextTick(function() {
                    _this2.changeSelctionTo(text, selected);
                  });
                }
              }
            };
            var v_model = {
              props: {
                modelValue: {
                  type: String,
                  default: ""
                }
              },
              emits: ["update:modelValue"],
              data: function data() {
                return {
                  text: this.modelValue
                };
              },
              methods: {
                handleInput: function handleInput(val) {
                  this.text = val;
                  this.$emit("update:modelValue", val);
                }
              }
            };
            var fullscreen = {
              props: {
                defaultFullscreen: Boolean
              },
              emits: ["fullscreen-change"],
              data: function data() {
                return {
                  fullscreen: false
                };
              },
              watch: {
                fullscreen: function fullscreen2() {
                  this.$emit("fullscreen-change", this.fullscreen);
                }
              },
              mounted: function mounted() {
                window.addEventListener("keyup", this.handleWindowKeyup, false);
                if (this.defaultFullscreen) {
                  this.toggleFullScreen();
                }
              },
              beforeUnmount: function beforeUnmount() {
                window.removeEventListener("keyup", this.handleWindowKeyup, false);
              },
              methods: {
                handleWindowKeyup: function handleWindowKeyup(e) {
                  if (e.keyCode === 27 && this.fullscreen) {
                    this.toggleFullScreen(false);
                  }
                },
                toggleFullScreen: function toggleFullScreen(fullscreen2) {
                  if (fullscreen2 === void 0) {
                    fullscreen2 = !this.fullscreen;
                  }
                  this.fullscreen = fullscreen2;
                  var _document$querySelect = document.querySelectorAll("html, body"), html = _document$querySelect[0], body = _document$querySelect[1];
                  var overflow = this.fullscreen ? "hidden" : null;
                  body.style.overflow = overflow;
                  html.style.overflow = overflow;
                }
              }
            };
            function upload_filevue_type_template_id_e27464d6_bindings_uploadConfig_props_handleUpload_data_key_data_upload_options_chooseFile_options_render(_ctx, _cache, $props, $setup, $data, $options) {
              return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                "input",
                {
                  type: "file",
                  style: {
                    "display": "none"
                  },
                  key: $data.key,
                  accept: $props.uploadConfig.accept,
                  multiple: $props.uploadConfig.multiple,
                  onInput: _cache[1] || (_cache[1] = function() {
                    return $data.handleUpload.apply($data, arguments);
                  }),
                  ref: "fileInput"
                },
                null,
                40,
                ["accept", "multiple"]
              );
            }
            var regenerator = __webpack_require__(10);
            var regenerator_default = __webpack_require__.n(regenerator);
            var asyncToGenerator = __webpack_require__(17);
            var upload_filevue_type_script_lang_js = {
              name: "v-md-upload-file",
              props: {
                uploadConfig: Object
              },
              data: function data() {
                return {
                  handleUpload: function handleUpload() {
                  },
                  key: 0
                };
              },
              methods: {
                upload: function upload() {
                  var _this = this;
                  return Object(asyncToGenerator[
                    "a"
                    /* default */
                  ])(regenerator_default.a.mark(function _callee() {
                    var event;
                    return regenerator_default.a.wrap(function _callee$(_context) {
                      while (1)
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.next = 2;
                            return _this.chooseFile();
                          case 2:
                            event = _context.sent;
                            return _context.abrupt("return", event);
                          case 4:
                          case "end":
                            return _context.stop();
                        }
                    }, _callee);
                  }))();
                },
                chooseFile: function chooseFile() {
                  var _this2 = this;
                  return new Promise(function(resolve2) {
                    _this2.handleUpload = function(e) {
                      resolve2(e);
                      _this2.key++;
                    };
                    _this2.$refs.fileInput.click();
                  });
                }
              }
            };
            upload_filevue_type_script_lang_js.render = upload_filevue_type_template_id_e27464d6_bindings_uploadConfig_props_handleUpload_data_key_data_upload_options_chooseFile_options_render;
            var upload_file = upload_filevue_type_script_lang_js;
            var toolbar_image = __webpack_require__(23);
            var file = __webpack_require__(12);
            var command = __webpack_require__(1);
            var upload_image_components;
            var defaultConfig = {
              accept: "image/*",
              multiple: false
            };
            var upload_image = {
              components: (upload_image_components = {}, upload_image_components[upload_file.name] = upload_file, upload_image_components),
              props: {
                uploadImageConfig: Object
              },
              emits: ["upload-image"],
              computed: {
                uploadImgConfig: function uploadImgConfig() {
                  return Object(esm_extends[
                    "a"
                    /* default */
                  ])({}, defaultConfig, this.uploadImageConfig);
                },
                hasUploadImage: function hasUploadImage() {
                  return !this.disabledMenus.includes(toolbar_image["default"].name + "/upload-image");
                }
              },
              methods: {
                handleDrop: function handleDrop(e) {
                  var files = Object(file[
                    "a"
                    /* filesFilter */
                  ])(e.dataTransfer.files, this.uploadImgConfig);
                  this.emitUploadImage(e, files);
                },
                handlePaste: function handlePaste(e) {
                  var clipboardData = e.clipboardData;
                  if (!clipboardData)
                    return;
                  var files = Object(file[
                    "a"
                    /* filesFilter */
                  ])(Object(file[
                    "b"
                    /* getFilesFromClipboardData */
                  ])(clipboardData), this.uploadImgConfig);
                  this.emitUploadImage(e, files);
                },
                emitUploadImage: function emitUploadImage(e, files) {
                  var _this = this;
                  if (this.hasUploadImage && files.length) {
                    e.preventDefault();
                    this.$emit("upload-image", e, function(imageConfig) {
                      _this.execCommand(command[
                        "l"
                        /* image */
                      ], imageConfig);
                    }, files);
                  }
                }
              }
            };
            var markup = __webpack_require__(3);
            var sync_scroll = {
              data: function data() {
                return {
                  enableSyncScroll: true
                };
              },
              methods: {
                toggleSyncScroll: function toggleSyncScroll(isEnable) {
                  if (isEnable === void 0) {
                    isEnable = !this.enableSyncScroll;
                  }
                  this.enableSyncScroll = isEnable;
                  if (isEnable)
                    this.previewSyncScroll();
                },
                previewSyncScroll: function previewSyncScroll() {
                  if (this.isEditMode)
                    return;
                  var previewEl = this.$refs.preview.$el;
                  var previewScrollerEl = this.$refs.previewScroller.$el;
                  var previewLines = previewEl.querySelectorAll("[" + markup[
                    "c"
                    /* LINE_MARKUP */
                  ] + "]");
                  var _this$getScrollInfo = this.getScrollInfo(), editorClientHeight = _this$getScrollInfo.clientHeight, editorScrollTop = _this$getScrollInfo.top, editorScrollHeight = _this$getScrollInfo.height;
                  var previewScrollWrapper = previewScrollerEl.querySelector(".scrollbar__wrap");
                  if (editorClientHeight + editorScrollTop === editorScrollHeight) {
                    var clientHeight = previewScrollWrapper.clientHeight;
                    var scrollHeight = previewScrollWrapper.scrollHeight;
                    this.previewScrollTo(scrollHeight - clientHeight);
                  } else {
                    var currentLine;
                    var nextLine;
                    for (var i = 0; i < previewLines.length; i++) {
                      var lineNumber = previewLines[i].getAttribute(markup[
                        "c"
                        /* LINE_MARKUP */
                      ]);
                      var height = this.heightAtLine(lineNumber - 1, "local");
                      if (height < editorScrollTop) {
                        currentLine = lineNumber;
                      } else {
                        nextLine = lineNumber;
                        break;
                      }
                    }
                    var percent = 0;
                    if (currentLine && nextLine && currentLine !== nextLine) {
                      var currentLineTop = this.heightAtLine(currentLine - 1, "local");
                      var nextLineTop = this.heightAtLine(nextLine - 1, "local");
                      percent = (editorScrollTop - currentLineTop) / (nextLineTop - currentLineTop);
                    }
                    var newLineTop = 0;
                    var newNextLineTop = previewScrollWrapper.scrollHeight - previewScrollWrapper.clientHeight;
                    if (currentLine) {
                      newLineTop = previewEl.querySelector("[" + markup[
                        "c"
                        /* LINE_MARKUP */
                      ] + '="' + currentLine + '"]').offsetTop;
                    }
                    if (nextLine) {
                      newNextLineTop = previewEl.querySelector("[" + markup[
                        "c"
                        /* LINE_MARKUP */
                      ] + '="' + nextLine + '"]').offsetTop;
                    }
                    var newScrollTop = newLineTop + (newNextLineTop - newLineTop) * percent;
                    this.previewScrollTo(newScrollTop);
                  }
                },
                handleEditorScroll: function handleEditorScroll() {
                  if (!this.enableSyncScroll || this.ignoreSyncScroll)
                    return;
                  clearTimeout(this.scrollTimmer);
                  this.scrollTimmer = setTimeout(this.previewSyncScroll, 60);
                }
              }
            };
            var mixins_toolbar = function(Component) {
              return {
                props: {
                  leftToolbar: {
                    type: String,
                    default: "undo redo clear | h bold italic strikethrough quote | ul ol table hr | link image code | save"
                  },
                  rightToolbar: {
                    type: String,
                    default: "preview toc sync-scroll fullscreen"
                  },
                  toolbar: {
                    type: Object,
                    default: function _default() {
                      return {};
                    }
                  },
                  disabledMenus: {
                    type: Array,
                    default: function _default() {
                      return ["image/upload-image"];
                    }
                  },
                  toolbarConfig: {
                    type: Object,
                    default: function _default() {
                      return {};
                    }
                  }
                },
                created: function created() {
                  var _this = this;
                  var toolbars = Component.toolbars;
                  this.toolbars = {};
                  Object.keys(toolbars).forEach(function(name) {
                    _this.registerToolbar(name, toolbars[name]);
                  });
                  Object.keys(this.toolbar).forEach(function(name) {
                    _this.registerToolbar(name, _this.toolbar[name]);
                  });
                },
                methods: {
                  registerToolbar: function registerToolbar(name, config) {
                    toolbar_registerToolbar(this.toolbars, name, config);
                  },
                  handleToolbarItemClick: function handleToolbarItemClick(toolbar2) {
                    var _toolbar$menus;
                    if (toolbar2.action && !((_toolbar$menus = toolbar2.menus) != null && _toolbar$menus.length) && typeof toolbar2.action === "function") {
                      toolbar2.action.call(toolbar2, this, this.toolbarConfig[toolbar2.name]);
                    }
                  },
                  handleToolbarMenuClick: function handleToolbarMenuClick(menu2) {
                    if (menu2.action && typeof menu2.action === "function") {
                      menu2.action.call(menu2, this, this.toolbarConfig[menu2.name]);
                    }
                  }
                }
              };
            };
            var mixins_command = function(Component) {
              return {
                created: function created() {
                  var _this = this;
                  var commands = Component.commands;
                  this.commands = {};
                  Object.keys(commands).forEach(function(name) {
                    _this.registerCommand(name, commands[name]);
                  });
                },
                methods: {
                  registerCommand: function registerCommand(name, callback) {
                    command_registerCommand(this.commands, name, callback);
                  },
                  execCommand: function execCommand(name) {
                    var commandCallBack = this.commands[name];
                    if (commandCallBack) {
                      for (var _len = arguments.length, arg = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                        arg[_key - 1] = arguments[_key];
                      }
                      commandCallBack.apply(void 0, [this].concat(arg));
                    } else {
                      console.error("Command not found: " + name);
                    }
                  }
                }
              };
            };
            var toc = {
              data: function data() {
                return {
                  tocVisible: this.defaultShowToc,
                  titles: []
                };
              },
              props: {
                includeLevel: {
                  type: Array,
                  default: function _default() {
                    return [2, 3];
                  }
                },
                defaultShowToc: Boolean
              },
              watch: {
                text: {
                  immediate: true,
                  handler: function handler(newval, oldVal) {
                    if (typeof oldVal === "undefined") {
                      this.$nextTick(this.updateTocNav);
                      return;
                    }
                    if (this.updateTocNavTimmer)
                      clearTimeout(this.updateTocNavTimmer);
                    this.updateTocNavTimmer = setTimeout(this.updateTocNav, 800);
                  }
                }
              },
              computed: {
                anchorsSelector: function anchorsSelector() {
                  return this.includeLevel.map(function(level) {
                    return "h" + level;
                  }).join(",");
                }
              },
              methods: {
                toggleToc: function toggleToc(visible) {
                  if (visible === void 0) {
                    visible = !this.tocVisible;
                  }
                  this.tocVisible = visible;
                },
                updateTocNav: function updateTocNav() {
                  var _this$$refs$preview;
                  var previewEl = (_this$$refs$preview = this.$refs.preview) == null ? void 0 : _this$$refs$preview.$el;
                  if (!previewEl)
                    return;
                  var anchors = previewEl.querySelectorAll(this.anchorsSelector);
                  var titles = Array.from(anchors).filter(function(title) {
                    return !!title.innerText.trim();
                  });
                  if (!titles.length) {
                    this.titles = [];
                    return;
                  }
                  var hTags = Array.from(new Set(titles.map(function(title) {
                    return title.tagName;
                  }))).sort();
                  this.titles = titles.map(function(el) {
                    return {
                      title: el.innerText,
                      lineIndex: el.getAttribute(markup[
                        "c"
                        /* LINE_MARKUP */
                      ]),
                      indent: hTags.indexOf(el.tagName)
                    };
                  });
                },
                handleNavClick: function handleNavClick(_ref) {
                  var lineIndex = _ref.lineIndex;
                  this.scrollToLine(lineIndex);
                }
              }
            };
            var mixins_scroll = {
              props: {
                previewScrollContainer: Function
              },
              computed: {
                getPreviewScrollContainer: function getPreviewScrollContainer() {
                  var _this = this;
                  return function() {
                    var previewScrollContainer = _this.$refs.previewScroller.$el.querySelector(".scrollbar__wrap");
                    var defaultContainer = _this.isPreviewMode ? window : previewScrollContainer;
                    return _this.previewScrollContainer ? _this.previewScrollContainer() : defaultContainer;
                  };
                }
              },
              methods: {
                previewScrollTo: function previewScrollTo(scrollTop) {
                  this.$refs.previewScroller.scrollTo(scrollTop);
                },
                scrollToLine: function scrollToLine(lineIndex) {
                  var _this2 = this;
                  if (!this.isPreviewMode) {
                    this.editorScrollToLine(lineIndex);
                  }
                  if (!this.isEditMode) {
                    this.ignoreSyncScroll = true;
                    this.previewScrollToLine({
                      lineIndex,
                      onScrollEnd: function onScrollEnd() {
                        _this2.ignoreSyncScroll = false;
                      }
                    });
                  }
                },
                editorScrollToLine: function editorScrollToLine(lineIndex) {
                  var offsetTop = this.heightAtLine(lineIndex - 1, "local");
                  this.editorScrollToTop(offsetTop);
                },
                previewScrollToTarget: function previewScrollToTarget() {
                  var _this$$refs$preview;
                  (_this$$refs$preview = this.$refs.preview).scrollToTarget.apply(_this$$refs$preview, arguments);
                },
                previewScrollToLine: function previewScrollToLine(_ref) {
                  var lineIndex = _ref.lineIndex, onScrollEnd = _ref.onScrollEnd;
                  this.$refs.preview.scrollToLine({
                    lineIndex,
                    onScrollEnd
                  });
                }
              }
            };
            var defaultHotkeys = {};
            Object(util[
              "c"
              /* importAll */
            ])(defaultHotkeys, __webpack_require__(90));
            var hotkeys = function(Component) {
              return {
                mounted: function mounted() {
                  var _this = this;
                  if (this.isPreviewMode)
                    return;
                  var hotkeys2 = Component.hotkeys;
                  Object.keys(defaultHotkeys).forEach(function(key) {
                    _this.registerHotkeys(defaultHotkeys[key].default);
                  });
                  hotkeys2.forEach(function(config) {
                    _this.registerHotkeys(config);
                  });
                },
                methods: {
                  registerHotkeys: function registerHotkeys(_ref) {
                    var _this2 = this;
                    var modifier = _ref.modifier, key = _ref.key, _action = _ref.action, _ref$preventDefault = _ref.preventDefault, preventDefault = _ref$preventDefault === void 0 ? true : _ref$preventDefault;
                    this.editorRegisterHotkeys({
                      modifier,
                      key,
                      preventDefault,
                      action: function action() {
                        for (var _len = arguments.length, arg = new Array(_len), _key = 0; _key < _len; _key++) {
                          arg[_key] = arguments[_key];
                        }
                        return _action.apply(void 0, [_this2].concat(arg));
                      }
                    });
                  }
                }
              };
            };
            var ol = /^\s*([\d]+\.)( \[[ xX]])? /;
            var ul = /^\s*([-*])( \[[ xX]])? /;
            var ulSyntax = /([*-] |[\d]+\. )/;
            var olSyntax = /([\d])+\.( \[[ xX]])? /;
            var list = {
              mounted: function mounted() {
                var _this = this;
                if (this.isPreviewMode)
                  return;
                this.registerHotkeys({
                  key: "enter",
                  preventDefault: false,
                  action: function action(editor, e) {
                    if (e.isComposing)
                      return;
                    var cursorLineLeftText = _this.getCursorLineLeftText();
                    var suffix;
                    var syntax;
                    if (ol.test(cursorLineLeftText)) {
                      suffix = "x. ";
                      syntax = olSyntax;
                      e.preventDefault();
                    } else if (ul.test(cursorLineLeftText)) {
                      suffix = "- ";
                      syntax = ulSyntax;
                      e.preventDefault();
                    } else {
                      return;
                    }
                    var indent = cursorLineLeftText.search(syntax);
                    var suffixIndex = indent + suffix.length;
                    var beforeText = cursorLineLeftText.slice(0, suffixIndex);
                    var content = cursorLineLeftText.slice(suffixIndex, cursorLineLeftText.length);
                    if (content) {
                      if (suffix === "x. ") {
                        beforeText = beforeText.replace(/(\d+)/, window.parseInt(beforeText) + 1);
                      }
                      _this.replaceSelectionText("\n" + beforeText, "end");
                    } else {
                      _this.delLineLeft();
                      _this.replaceSelectionText("\n", "end");
                    }
                  }
                });
              }
            };
            var mixins_lang = {
              computed: {
                langConfig: function langConfig() {
                  var lang = this.$options.lang.config;
                  return lang.langConfig[lang.lang];
                }
              }
            };
            var create_editor_lang = new utils_lang[
              "a"
              /* default */
            ]({
              afterUse: function afterUse(lang) {
                preview["default"].vMdParser.lang.config.lang = lang;
              }
            });
            create_editor_lang.config = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["reactive"])(create_editor_lang.config);
            create_editor_lang.add({
              "zh-CN": zh_CN
            });
            function createEditor(component) {
              commandWrapper(component);
              toolbarWrapper(component);
              component.name = "v-md-editor";
              component.lang = create_editor_lang;
              component.vMdParser = preview["default"].vMdParser;
              component.Preview = preview["default"];
              component.hotkeys = [];
              component.hotkey = function(config) {
                component.hotkeys.push(config);
              };
              component.mixins = [common, v_model, mixins_toolbar(component), mixins_command(component), hotkeys(component), fullscreen, upload_image, sync_scroll, toc, mixins_scroll, list, mixins_lang];
            }
          },
          /* 36 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            var keyCodesToName = {
              // Numbers and letters
              48: 0,
              49: 1,
              50: 2,
              51: 3,
              52: 4,
              53: 5,
              54: 6,
              55: 7,
              56: 8,
              57: 9,
              65: "a",
              66: "b",
              67: "c",
              68: "d",
              69: "e",
              70: "f",
              71: "g",
              72: "h",
              73: "i",
              74: "j",
              75: "k",
              76: "l",
              77: "m",
              78: "n",
              79: "o",
              80: "p",
              81: "q",
              82: "r",
              83: "s",
              84: "t",
              85: "u",
              86: "v",
              87: "w",
              88: "x",
              89: "y",
              90: "z",
              // Function keys
              112: "F1",
              113: "F2",
              114: "F3",
              115: "F4",
              116: "F5",
              117: "F6",
              118: "F7",
              119: "F8",
              120: "F9",
              121: "F10",
              122: "F11",
              123: "F12"
            };
            var keyNames2 = {
              esc: ["Esc", "Escape"],
              tab: "Tab",
              enter: "Enter",
              space: [" ", "Spacebar"],
              up: ["Up", "ArrowUp"],
              left: ["Left", "ArrowLeft"],
              right: ["Right", "ArrowRight"],
              down: ["Down", "ArrowDown"],
              delete: ["Backspace", "Delete", "Del"]
            };
            var hotkeys_Hotkeys = function() {
              function Hotkeys() {
                this.hotkeys = {
                  ctrl: {},
                  shift: {},
                  ctrlAlt: {},
                  ctrlShift: {},
                  keys: {}
                };
              }
              var _proto = Hotkeys.prototype;
              _proto.dispatch = function dispatch(e) {
                var keyName = this.getKeyName(e).toLowerCase();
                var opt;
                if (!keyName)
                  return;
                if (this.isKeyEnterExact(e)) {
                  opt = this.hotkeys.keys[keyName];
                } else if (this.isCtrlEnterExact(e)) {
                  opt = this.hotkeys.ctrl[keyName];
                } else if (this.isShiftEnterExact(e)) {
                  opt = this.hotkeys.shift[keyName];
                } else if (this.isCtrlAltEnterExact(e)) {
                  opt = this.hotkeys.ctrlAlt[keyName];
                } else if (this.isCtrlShiftEnterExact(e)) {
                  opt = this.hotkeys.ctrlShift[keyName];
                }
                if (opt) {
                  var _opt2 = opt, action = _opt2.action, preventDefault = _opt2.preventDefault;
                  if (preventDefault)
                    e.preventDefault();
                  action(e);
                }
              };
              _proto.isKeyEnterExact = function isKeyEnterExact(e) {
                return !this.isCtrlEnter(e) && !this.isShiftEnter(e) && !this.isAltEnter(e);
              };
              _proto.isCtrlShiftEnterExact = function isCtrlShiftEnterExact(e) {
                return this.isCtrlEnter(e) && this.isShiftEnter(e) && !this.isAltEnter(e);
              };
              _proto.isCtrlAltEnterExact = function isCtrlAltEnterExact(e) {
                return this.isCtrlEnter(e) && this.isAltEnter(e) && !this.isShiftEnter(e);
              };
              _proto.isCtrlEnterExact = function isCtrlEnterExact(e) {
                return this.isCtrlEnter(e) && !this.isShiftEnter(e) && !this.isAltEnter(e);
              };
              _proto.isShiftEnterExact = function isShiftEnterExact(e) {
                return this.isShiftEnter(e) && !this.isCtrlEnter(e) && !this.isAltEnter(e);
              };
              _proto.isCtrlEnter = function isCtrlEnter(e) {
                return e.ctrlKey || e.metaKey;
              };
              _proto.isShiftEnter = function isShiftEnter(e) {
                return e.shiftKey;
              };
              _proto.isAltEnter = function isAltEnter(e) {
                return e.altKey;
              };
              _proto.registerHotkeys = function registerHotkeys(_ref) {
                var modifier = _ref.modifier, key = _ref.key, _ref$preventDefault = _ref.preventDefault, preventDefault = _ref$preventDefault === void 0 ? true : _ref$preventDefault, action = _ref.action;
                if (modifier) {
                  this.hotkeys[modifier][key] = {
                    preventDefault,
                    action
                  };
                } else {
                  this.hotkeys.keys[key] = {
                    preventDefault,
                    action
                  };
                }
              };
              _proto.getKeyName = function getKeyName(e) {
                var key = e.key, keyCode = e.keyCode;
                if (key !== void 0) {
                  var keyName = Object.keys(keyNames2).find(function(keyName2) {
                    var validNames = keyNames2[keyName2];
                    return typeof validNames === "string" ? validNames === key : validNames.indexOf(key) !== -1;
                  });
                  return keyName || key;
                }
                return keyCodesToName[keyCode];
              };
              return Hotkeys;
            }();
            var hotkeys = __webpack_exports__["a"] = hotkeys_Hotkeys;
          },
          /* 37 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var runtime = function(exports3) {
              "use strict";
              var Op = Object.prototype;
              var hasOwn2 = Op.hasOwnProperty;
              var undefined2;
              var $Symbol = typeof Symbol === "function" ? Symbol : {};
              var iteratorSymbol = $Symbol.iterator || "@@iterator";
              var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
              var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
              function define2(obj, key, value) {
                Object.defineProperty(obj, key, {
                  value,
                  enumerable: true,
                  configurable: true,
                  writable: true
                });
                return obj[key];
              }
              try {
                define2({}, "");
              } catch (err) {
                define2 = function(obj, key, value) {
                  return obj[key] = value;
                };
              }
              function wrap(innerFn, outerFn, self2, tryLocsList) {
                var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
                var generator = Object.create(protoGenerator.prototype);
                var context = new Context(tryLocsList || []);
                generator._invoke = makeInvokeMethod(innerFn, self2, context);
                return generator;
              }
              exports3.wrap = wrap;
              function tryCatch(fn, obj, arg) {
                try {
                  return { type: "normal", arg: fn.call(obj, arg) };
                } catch (err) {
                  return { type: "throw", arg: err };
                }
              }
              var GenStateSuspendedStart = "suspendedStart";
              var GenStateSuspendedYield = "suspendedYield";
              var GenStateExecuting = "executing";
              var GenStateCompleted = "completed";
              var ContinueSentinel = {};
              function Generator() {
              }
              function GeneratorFunction() {
              }
              function GeneratorFunctionPrototype() {
              }
              var IteratorPrototype = {};
              IteratorPrototype[iteratorSymbol] = function() {
                return this;
              };
              var getProto2 = Object.getPrototypeOf;
              var NativeIteratorPrototype = getProto2 && getProto2(getProto2(values([])));
              if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn2.call(NativeIteratorPrototype, iteratorSymbol)) {
                IteratorPrototype = NativeIteratorPrototype;
              }
              var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
              GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
              GeneratorFunctionPrototype.constructor = GeneratorFunction;
              GeneratorFunction.displayName = define2(
                GeneratorFunctionPrototype,
                toStringTagSymbol,
                "GeneratorFunction"
              );
              function defineIteratorMethods(prototype) {
                ["next", "throw", "return"].forEach(function(method) {
                  define2(prototype, method, function(arg) {
                    return this._invoke(method, arg);
                  });
                });
              }
              exports3.isGeneratorFunction = function(genFun) {
                var ctor = typeof genFun === "function" && genFun.constructor;
                return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
                // do is to check its .name property.
                (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
              };
              exports3.mark = function(genFun) {
                if (Object.setPrototypeOf) {
                  Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                } else {
                  genFun.__proto__ = GeneratorFunctionPrototype;
                  define2(genFun, toStringTagSymbol, "GeneratorFunction");
                }
                genFun.prototype = Object.create(Gp);
                return genFun;
              };
              exports3.awrap = function(arg) {
                return { __await: arg };
              };
              function AsyncIterator(generator, PromiseImpl) {
                function invoke(method, arg, resolve2, reject) {
                  var record = tryCatch(generator[method], generator, arg);
                  if (record.type === "throw") {
                    reject(record.arg);
                  } else {
                    var result = record.arg;
                    var value = result.value;
                    if (value && typeof value === "object" && hasOwn2.call(value, "__await")) {
                      return PromiseImpl.resolve(value.__await).then(function(value2) {
                        invoke("next", value2, resolve2, reject);
                      }, function(err) {
                        invoke("throw", err, resolve2, reject);
                      });
                    }
                    return PromiseImpl.resolve(value).then(function(unwrapped) {
                      result.value = unwrapped;
                      resolve2(result);
                    }, function(error) {
                      return invoke("throw", error, resolve2, reject);
                    });
                  }
                }
                var previousPromise;
                function enqueue(method, arg) {
                  function callInvokeWithMethodAndArg() {
                    return new PromiseImpl(function(resolve2, reject) {
                      invoke(method, arg, resolve2, reject);
                    });
                  }
                  return previousPromise = // If enqueue has been called before, then we want to wait until
                  // all previous Promises have been resolved before calling invoke,
                  // so that results are always delivered in the correct order. If
                  // enqueue has not been called before, then it is important to
                  // call invoke immediately, without waiting on a callback to fire,
                  // so that the async generator function has the opportunity to do
                  // any necessary setup in a predictable way. This predictability
                  // is why the Promise constructor synchronously invokes its
                  // executor callback, and why async functions synchronously
                  // execute code before the first await. Since we implement simple
                  // async functions in terms of async generators, it is especially
                  // important to get this right, even though it requires care.
                  previousPromise ? previousPromise.then(
                    callInvokeWithMethodAndArg,
                    // Avoid propagating failures to Promises returned by later
                    // invocations of the iterator.
                    callInvokeWithMethodAndArg
                  ) : callInvokeWithMethodAndArg();
                }
                this._invoke = enqueue;
              }
              defineIteratorMethods(AsyncIterator.prototype);
              AsyncIterator.prototype[asyncIteratorSymbol] = function() {
                return this;
              };
              exports3.AsyncIterator = AsyncIterator;
              exports3.async = function(innerFn, outerFn, self2, tryLocsList, PromiseImpl) {
                if (PromiseImpl === void 0)
                  PromiseImpl = Promise;
                var iter = new AsyncIterator(
                  wrap(innerFn, outerFn, self2, tryLocsList),
                  PromiseImpl
                );
                return exports3.isGeneratorFunction(outerFn) ? iter : iter.next().then(function(result) {
                  return result.done ? result.value : iter.next();
                });
              };
              function makeInvokeMethod(innerFn, self2, context) {
                var state = GenStateSuspendedStart;
                return function invoke(method, arg) {
                  if (state === GenStateExecuting) {
                    throw new Error("Generator is already running");
                  }
                  if (state === GenStateCompleted) {
                    if (method === "throw") {
                      throw arg;
                    }
                    return doneResult();
                  }
                  context.method = method;
                  context.arg = arg;
                  while (true) {
                    var delegate = context.delegate;
                    if (delegate) {
                      var delegateResult = maybeInvokeDelegate(delegate, context);
                      if (delegateResult) {
                        if (delegateResult === ContinueSentinel)
                          continue;
                        return delegateResult;
                      }
                    }
                    if (context.method === "next") {
                      context.sent = context._sent = context.arg;
                    } else if (context.method === "throw") {
                      if (state === GenStateSuspendedStart) {
                        state = GenStateCompleted;
                        throw context.arg;
                      }
                      context.dispatchException(context.arg);
                    } else if (context.method === "return") {
                      context.abrupt("return", context.arg);
                    }
                    state = GenStateExecuting;
                    var record = tryCatch(innerFn, self2, context);
                    if (record.type === "normal") {
                      state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                      if (record.arg === ContinueSentinel) {
                        continue;
                      }
                      return {
                        value: record.arg,
                        done: context.done
                      };
                    } else if (record.type === "throw") {
                      state = GenStateCompleted;
                      context.method = "throw";
                      context.arg = record.arg;
                    }
                  }
                };
              }
              function maybeInvokeDelegate(delegate, context) {
                var method = delegate.iterator[context.method];
                if (method === undefined2) {
                  context.delegate = null;
                  if (context.method === "throw") {
                    if (delegate.iterator["return"]) {
                      context.method = "return";
                      context.arg = undefined2;
                      maybeInvokeDelegate(delegate, context);
                      if (context.method === "throw") {
                        return ContinueSentinel;
                      }
                    }
                    context.method = "throw";
                    context.arg = new TypeError(
                      "The iterator does not provide a 'throw' method"
                    );
                  }
                  return ContinueSentinel;
                }
                var record = tryCatch(method, delegate.iterator, context.arg);
                if (record.type === "throw") {
                  context.method = "throw";
                  context.arg = record.arg;
                  context.delegate = null;
                  return ContinueSentinel;
                }
                var info = record.arg;
                if (!info) {
                  context.method = "throw";
                  context.arg = new TypeError("iterator result is not an object");
                  context.delegate = null;
                  return ContinueSentinel;
                }
                if (info.done) {
                  context[delegate.resultName] = info.value;
                  context.next = delegate.nextLoc;
                  if (context.method !== "return") {
                    context.method = "next";
                    context.arg = undefined2;
                  }
                } else {
                  return info;
                }
                context.delegate = null;
                return ContinueSentinel;
              }
              defineIteratorMethods(Gp);
              define2(Gp, toStringTagSymbol, "Generator");
              Gp[iteratorSymbol] = function() {
                return this;
              };
              Gp.toString = function() {
                return "[object Generator]";
              };
              function pushTryEntry(locs) {
                var entry = { tryLoc: locs[0] };
                if (1 in locs) {
                  entry.catchLoc = locs[1];
                }
                if (2 in locs) {
                  entry.finallyLoc = locs[2];
                  entry.afterLoc = locs[3];
                }
                this.tryEntries.push(entry);
              }
              function resetTryEntry(entry) {
                var record = entry.completion || {};
                record.type = "normal";
                delete record.arg;
                entry.completion = record;
              }
              function Context(tryLocsList) {
                this.tryEntries = [{ tryLoc: "root" }];
                tryLocsList.forEach(pushTryEntry, this);
                this.reset(true);
              }
              exports3.keys = function(object) {
                var keys = [];
                for (var key in object) {
                  keys.push(key);
                }
                keys.reverse();
                return function next() {
                  while (keys.length) {
                    var key2 = keys.pop();
                    if (key2 in object) {
                      next.value = key2;
                      next.done = false;
                      return next;
                    }
                  }
                  next.done = true;
                  return next;
                };
              };
              function values(iterable) {
                if (iterable) {
                  var iteratorMethod = iterable[iteratorSymbol];
                  if (iteratorMethod) {
                    return iteratorMethod.call(iterable);
                  }
                  if (typeof iterable.next === "function") {
                    return iterable;
                  }
                  if (!isNaN(iterable.length)) {
                    var i = -1, next = function next2() {
                      while (++i < iterable.length) {
                        if (hasOwn2.call(iterable, i)) {
                          next2.value = iterable[i];
                          next2.done = false;
                          return next2;
                        }
                      }
                      next2.value = undefined2;
                      next2.done = true;
                      return next2;
                    };
                    return next.next = next;
                  }
                }
                return { next: doneResult };
              }
              exports3.values = values;
              function doneResult() {
                return { value: undefined2, done: true };
              }
              Context.prototype = {
                constructor: Context,
                reset: function(skipTempReset) {
                  this.prev = 0;
                  this.next = 0;
                  this.sent = this._sent = undefined2;
                  this.done = false;
                  this.delegate = null;
                  this.method = "next";
                  this.arg = undefined2;
                  this.tryEntries.forEach(resetTryEntry);
                  if (!skipTempReset) {
                    for (var name in this) {
                      if (name.charAt(0) === "t" && hasOwn2.call(this, name) && !isNaN(+name.slice(1))) {
                        this[name] = undefined2;
                      }
                    }
                  }
                },
                stop: function() {
                  this.done = true;
                  var rootEntry = this.tryEntries[0];
                  var rootRecord = rootEntry.completion;
                  if (rootRecord.type === "throw") {
                    throw rootRecord.arg;
                  }
                  return this.rval;
                },
                dispatchException: function(exception) {
                  if (this.done) {
                    throw exception;
                  }
                  var context = this;
                  function handle(loc, caught) {
                    record.type = "throw";
                    record.arg = exception;
                    context.next = loc;
                    if (caught) {
                      context.method = "next";
                      context.arg = undefined2;
                    }
                    return !!caught;
                  }
                  for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                    var entry = this.tryEntries[i];
                    var record = entry.completion;
                    if (entry.tryLoc === "root") {
                      return handle("end");
                    }
                    if (entry.tryLoc <= this.prev) {
                      var hasCatch = hasOwn2.call(entry, "catchLoc");
                      var hasFinally = hasOwn2.call(entry, "finallyLoc");
                      if (hasCatch && hasFinally) {
                        if (this.prev < entry.catchLoc) {
                          return handle(entry.catchLoc, true);
                        } else if (this.prev < entry.finallyLoc) {
                          return handle(entry.finallyLoc);
                        }
                      } else if (hasCatch) {
                        if (this.prev < entry.catchLoc) {
                          return handle(entry.catchLoc, true);
                        }
                      } else if (hasFinally) {
                        if (this.prev < entry.finallyLoc) {
                          return handle(entry.finallyLoc);
                        }
                      } else {
                        throw new Error("try statement without catch or finally");
                      }
                    }
                  }
                },
                abrupt: function(type, arg) {
                  for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                    var entry = this.tryEntries[i];
                    if (entry.tryLoc <= this.prev && hasOwn2.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                      var finallyEntry = entry;
                      break;
                    }
                  }
                  if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
                    finallyEntry = null;
                  }
                  var record = finallyEntry ? finallyEntry.completion : {};
                  record.type = type;
                  record.arg = arg;
                  if (finallyEntry) {
                    this.method = "next";
                    this.next = finallyEntry.finallyLoc;
                    return ContinueSentinel;
                  }
                  return this.complete(record);
                },
                complete: function(record, afterLoc) {
                  if (record.type === "throw") {
                    throw record.arg;
                  }
                  if (record.type === "break" || record.type === "continue") {
                    this.next = record.arg;
                  } else if (record.type === "return") {
                    this.rval = this.arg = record.arg;
                    this.method = "return";
                    this.next = "end";
                  } else if (record.type === "normal" && afterLoc) {
                    this.next = afterLoc;
                  }
                  return ContinueSentinel;
                },
                finish: function(finallyLoc) {
                  for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                    var entry = this.tryEntries[i];
                    if (entry.finallyLoc === finallyLoc) {
                      this.complete(entry.completion, entry.afterLoc);
                      resetTryEntry(entry);
                      return ContinueSentinel;
                    }
                  }
                },
                "catch": function(tryLoc) {
                  for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                    var entry = this.tryEntries[i];
                    if (entry.tryLoc === tryLoc) {
                      var record = entry.completion;
                      if (record.type === "throw") {
                        var thrown = record.arg;
                        resetTryEntry(entry);
                      }
                      return thrown;
                    }
                  }
                  throw new Error("illegal catch attempt");
                },
                delegateYield: function(iterable, resultName, nextLoc) {
                  this.delegate = {
                    iterator: values(iterable),
                    resultName,
                    nextLoc
                  };
                  if (this.method === "next") {
                    this.arg = undefined2;
                  }
                  return ContinueSentinel;
                }
              };
              return exports3;
            }(
              // If this script is executing as a CommonJS module, use module.exports
              // as the regeneratorRuntime namespace. Otherwise create a new empty
              // object. Either way, the resulting object will be used to initialize
              // the regeneratorRuntime variable at the top of this file.
              true ? module2.exports : void 0
            );
            try {
              regeneratorRuntime = runtime;
            } catch (accidentalStrictMode) {
              Function("r", "regeneratorRuntime = r")(runtime);
            }
          },
          /* 38 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var map2 = {
              "./bold.js": 39,
              "./clear.js": 40,
              "./code.js": 41,
              "./fullscreen.js": 42,
              "./h1.js": 43,
              "./h2.js": 44,
              "./h3.js": 45,
              "./h4.js": 46,
              "./h5.js": 47,
              "./h6.js": 48,
              "./hr.js": 49,
              "./image.js": 50,
              "./italic.js": 51,
              "./link.js": 52,
              "./ol.js": 53,
              "./quote.js": 54,
              "./redo.js": 55,
              "./strikethrough.js": 56,
              "./sync-scroll.js": 57,
              "./table.js": 58,
              "./ul.js": 59,
              "./undo.js": 60
            };
            function webpackContext(req) {
              var id = webpackContextResolve(req);
              return __webpack_require__(id);
            }
            function webpackContextResolve(req) {
              if (!__webpack_require__.o(map2, req)) {
                var e = new Error("Cannot find module '" + req + "'");
                e.code = "MODULE_NOT_FOUND";
                throw e;
              }
              return map2[req];
            }
            webpackContext.keys = function webpackContextKeys() {
              return Object.keys(map2);
            };
            webpackContext.resolve = webpackContextResolve;
            module2.exports = webpackContext;
            webpackContext.id = 38;
          },
          /* 39 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__["a"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var prefix = "**";
                var suffix = "**";
                var placeholder = editor.langConfig.bold.placeholder;
                var selectedGetter = function selectedGetter2(selected2) {
                  return selected2 || placeholder;
                };
                var _generatorText = Object(_utils_util__WEBPACK_IMPORTED_MODULE_0__[
                  /* generatorText */
                  "b"
                ])({
                  selected,
                  InsertGetter: function InsertGetter(selected2) {
                    return "" + prefix + selectedGetter(selected2) + suffix;
                  },
                  selectedGetter
                }), insertContent = _generatorText.insertContent, newSelected = _generatorText.newSelected;
                return {
                  text: insertContent,
                  selected: newSelected
                };
              });
            };
          },
          /* 40 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__["b"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.clear();
            };
          },
          /* 41 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__["c"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var prefix = "``` language";
                var suffix = "```";
                var text = prefix + "\n" + suffix;
                if (selected) {
                  text = prefix + "\n  " + selected + "\n" + suffix;
                }
                return {
                  text,
                  selected: "language"
                };
              });
            };
          },
          /* 42 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__["d"];
            });
            __webpack_exports__["default"] = function(editor, fullScreen) {
              editor.toggleFullScreen(fullScreen);
            };
          },
          /* 43 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__["e"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var prefix = "#";
                var placeholder = editor.langConfig.h1.placeholder;
                var selectedGetter = function selectedGetter2(selected2) {
                  return selected2 || placeholder;
                };
                var _generatorText = Object(_utils_util__WEBPACK_IMPORTED_MODULE_0__[
                  /* generatorText */
                  "b"
                ])({
                  selected,
                  InsertGetter: function InsertGetter(selected2) {
                    return prefix + " " + selectedGetter(selected2);
                  },
                  selectedGetter
                }), insertContent = _generatorText.insertContent, newSelected = _generatorText.newSelected;
                return {
                  text: insertContent,
                  selected: newSelected
                };
              });
            };
          },
          /* 44 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__["f"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var prefix = "##";
                var placeholder = editor.langConfig.h2.placeholder;
                var selectedGetter = function selectedGetter2(selected2) {
                  return selected2 || placeholder;
                };
                var _generatorText = Object(_utils_util__WEBPACK_IMPORTED_MODULE_0__[
                  /* generatorText */
                  "b"
                ])({
                  selected,
                  InsertGetter: function InsertGetter(selected2) {
                    return prefix + " " + selectedGetter(selected2);
                  },
                  selectedGetter
                }), insertContent = _generatorText.insertContent, newSelected = _generatorText.newSelected;
                return {
                  text: insertContent,
                  selected: newSelected
                };
              });
            };
          },
          /* 45 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__["g"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var prefix = "###";
                var placeholder = editor.langConfig.h3.placeholder;
                var selectedGetter = function selectedGetter2(selected2) {
                  return selected2 || placeholder;
                };
                var _generatorText = Object(_utils_util__WEBPACK_IMPORTED_MODULE_0__[
                  /* generatorText */
                  "b"
                ])({
                  selected,
                  InsertGetter: function InsertGetter(selected2) {
                    return prefix + " " + selectedGetter(selected2);
                  },
                  selectedGetter
                }), insertContent = _generatorText.insertContent, newSelected = _generatorText.newSelected;
                return {
                  text: insertContent,
                  selected: newSelected
                };
              });
            };
          },
          /* 46 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__["h"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var prefix = "####";
                var placeholder = editor.langConfig.h4.placeholder;
                var selectedGetter = function selectedGetter2(selected2) {
                  return selected2 || placeholder;
                };
                var _generatorText = Object(_utils_util__WEBPACK_IMPORTED_MODULE_0__[
                  /* generatorText */
                  "b"
                ])({
                  selected,
                  InsertGetter: function InsertGetter(selected2) {
                    return prefix + " " + selectedGetter(selected2);
                  },
                  selectedGetter
                }), insertContent = _generatorText.insertContent, newSelected = _generatorText.newSelected;
                return {
                  text: insertContent,
                  selected: newSelected
                };
              });
            };
          },
          /* 47 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__["i"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var prefix = "#####";
                var placeholder = editor.langConfig.h5.placeholder;
                var selectedGetter = function selectedGetter2(selected2) {
                  return selected2 || placeholder;
                };
                var _generatorText = Object(_utils_util__WEBPACK_IMPORTED_MODULE_0__[
                  /* generatorText */
                  "b"
                ])({
                  selected,
                  InsertGetter: function InsertGetter(selected2) {
                    return prefix + " " + selectedGetter(selected2);
                  },
                  selectedGetter
                }), insertContent = _generatorText.insertContent, newSelected = _generatorText.newSelected;
                return {
                  text: insertContent,
                  selected: newSelected
                };
              });
            };
          },
          /* 48 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__["j"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var prefix = "######";
                var placeholder = editor.langConfig.h6.placeholder;
                var selectedGetter = function selectedGetter2(selected2) {
                  return selected2 || placeholder;
                };
                var _generatorText = Object(_utils_util__WEBPACK_IMPORTED_MODULE_0__[
                  /* generatorText */
                  "b"
                ])({
                  selected,
                  InsertGetter: function InsertGetter(selected2) {
                    return prefix + " " + selectedGetter(selected2);
                  },
                  selectedGetter
                }), insertContent = _generatorText.insertContent, newSelected = _generatorText.newSelected;
                return {
                  text: insertContent,
                  selected: newSelected
                };
              });
            };
          },
          /* 49 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__["k"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function() {
                return {
                  text: "------------------------------------"
                };
              });
            };
          },
          /* 50 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__["l"];
            });
            __webpack_exports__["default"] = function(editor, _temp) {
              var _ref = _temp === void 0 ? {} : _temp, url = _ref.url, desc = _ref.desc, width = _ref.width, height = _ref.height;
              editor.insert(function() {
                var urlPlaceholder = "http://";
                var descPlaceholder = "Description";
                var selected = urlPlaceholder;
                var text = "![" + (desc || descPlaceholder) + "](" + (url || urlPlaceholder) + ")";
                var style = [];
                if (width) {
                  style.push('width="' + width + '"');
                }
                if (height) {
                  style.push('height="' + height + '"');
                }
                if (style.length) {
                  text += "{{{" + style.join(" ") + "}}}";
                }
                if (url && desc) {
                  selected = null;
                } else if (url) {
                  selected = descPlaceholder;
                } else if (desc) {
                  selected = urlPlaceholder;
                }
                return {
                  text,
                  selected
                };
              });
            };
          },
          /* 51 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__["m"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var prefix = "*";
                var suffix = "*";
                var placeholder = editor.langConfig.italic.placeholder;
                var selectedGetter = function selectedGetter2(selected2) {
                  return selected2 || placeholder;
                };
                var _generatorText = Object(_utils_util__WEBPACK_IMPORTED_MODULE_0__[
                  /* generatorText */
                  "b"
                ])({
                  selected,
                  InsertGetter: function InsertGetter(selected2) {
                    return "" + prefix + selectedGetter(selected2) + suffix;
                  },
                  selectedGetter
                }), insertContent = _generatorText.insertContent, newSelected = _generatorText.newSelected;
                return {
                  text: insertContent,
                  selected: newSelected
                };
              });
            };
          },
          /* 52 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__["n"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var descPlaceholder = editor.langConfig.link.descPlaceholder;
                var linkPlaceholder = "http://";
                var _generatorText = Object(_utils_util__WEBPACK_IMPORTED_MODULE_0__[
                  /* generatorText */
                  "b"
                ])({
                  selected,
                  InsertGetter: function InsertGetter(selected2) {
                    return "[" + (selected2 || descPlaceholder) + "](" + linkPlaceholder + ")";
                  },
                  selectedGetter: function selectedGetter(selected2) {
                    return selected2 ? linkPlaceholder : descPlaceholder;
                  }
                }), insertContent = _generatorText.insertContent, newSelected = _generatorText.newSelected;
                return {
                  text: insertContent,
                  selected: newSelected
                };
              });
            };
          },
          /* 53 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__["o"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var placeholder = editor.langConfig.ol.placeholder;
                var selectedGetter = function selectedGetter2(selected2) {
                  return selected2 || placeholder;
                };
                var _generatorText = Object(_utils_util__WEBPACK_IMPORTED_MODULE_0__[
                  /* generatorText */
                  "b"
                ])({
                  selected,
                  InsertGetter: function InsertGetter(selected2, rowIndex) {
                    return rowIndex + ". " + selectedGetter(selected2);
                  },
                  selectedGetter,
                  ignoreEmptyLine: false
                }), insertContent = _generatorText.insertContent, newSelected = _generatorText.newSelected;
                return {
                  text: insertContent,
                  selected: newSelected
                };
              });
            };
          },
          /* 54 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__["p"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var prefix = ">";
                var content = selected || editor.langConfig.quote.placeholder;
                return {
                  text: prefix + " " + content,
                  selected: content
                };
              });
            };
          },
          /* 55 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__["q"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.redo();
            };
          },
          /* 56 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__["r"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var prefix = "~~";
                var suffix = "~~";
                var placeholder = editor.langConfig.strikethrough.placeholder;
                var selectedGetter = function selectedGetter2(selected2) {
                  return selected2 || placeholder;
                };
                var _generatorText = Object(_utils_util__WEBPACK_IMPORTED_MODULE_0__[
                  /* generatorText */
                  "b"
                ])({
                  selected,
                  InsertGetter: function InsertGetter(selected2) {
                    return "" + prefix + selectedGetter(selected2) + suffix;
                  },
                  selectedGetter
                }), insertContent = _generatorText.insertContent, newSelected = _generatorText.newSelected;
                return {
                  text: insertContent,
                  selected: newSelected
                };
              });
            };
          },
          /* 57 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__["s"];
            });
            __webpack_exports__["default"] = function(editor, isEnable) {
              editor.toggleSyncScroll(isEnable);
            };
          },
          /* 58 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__["t"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function() {
                var content = "|column1|column2|column3|\n|-|-|-|\n|content1|content2|content3|";
                return {
                  text: content,
                  selected: "column1"
                };
              });
            };
          },
          /* 59 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_1__["u"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.insert(function(selected) {
                var placeholder = editor.langConfig.ul.placeholder;
                var selectedGetter = function selectedGetter2(selected2) {
                  return selected2 || placeholder;
                };
                var _generatorText = Object(_utils_util__WEBPACK_IMPORTED_MODULE_0__[
                  /* generatorText */
                  "b"
                ])({
                  selected,
                  InsertGetter: function InsertGetter(selected2) {
                    return "- " + selectedGetter(selected2);
                  },
                  selectedGetter,
                  ignoreEmptyLine: false
                }), insertContent = _generatorText.insertContent, newSelected = _generatorText.newSelected;
                return {
                  text: insertContent,
                  selected: newSelected
                };
              });
            };
          },
          /* 60 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_require__.d(__webpack_exports__, "name", function() {
              return _utils_constants_command_js__WEBPACK_IMPORTED_MODULE_0__["v"];
            });
            __webpack_exports__["default"] = function(editor) {
              editor.undo();
            };
          },
          /* 61 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var map2 = {
              "./bold.js": 62,
              "./clear.js": 63,
              "./code.js": 64,
              "./fullscreen.js": 65,
              "./h.js": 66,
              "./hr.js": 67,
              "./image.js": 23,
              "./italic.js": 68,
              "./link.js": 69,
              "./ol.js": 70,
              "./preview.js": 71,
              "./quote.js": 72,
              "./redo.js": 73,
              "./save.js": 74,
              "./strikethrough.js": 75,
              "./sync-scroll.js": 76,
              "./table.js": 77,
              "./toc.js": 78,
              "./ul.js": 79,
              "./undo.js": 80
            };
            function webpackContext(req) {
              var id = webpackContextResolve(req);
              return __webpack_require__(id);
            }
            function webpackContextResolve(req) {
              if (!__webpack_require__.o(map2, req)) {
                var e = new Error("Cannot find module '" + req + "'");
                e.code = "MODULE_NOT_FOUND";
                throw e;
              }
              return map2[req];
            }
            webpackContext.keys = function webpackContextKeys() {
              return Object.keys(map2);
            };
            webpackContext.resolve = webpackContextResolve;
            module2.exports = webpackContext;
            webpackContext.id = 61;
          },
          /* 62 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* bold */
                "a"
              ],
              icon: "v-md-icon-bold",
              title: function title(editor) {
                return editor.langConfig.bold.toolbar + "（Ctrl+B）";
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* bold */
                  "a"
                ]);
              }
            };
          },
          /* 63 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* clear */
                "b"
              ],
              icon: "v-md-icon-clear",
              title: function title(editor) {
                return editor.langConfig.clear.toolbar;
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* clear */
                  "b"
                ]);
              }
            };
          },
          /* 64 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* code */
                "c"
              ],
              icon: "v-md-icon-code",
              title: function title(editor) {
                return editor.langConfig.code.toolbar;
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* code */
                  "c"
                ]);
              }
            };
          },
          /* 65 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* fullscreen */
                "d"
              ],
              icon: "v-md-icon-fullscreen",
              title: function title(editor) {
                var fullscreenLang = editor.langConfig.fullscreen;
                return editor.fullscreen ? fullscreenLang.disabled : fullscreenLang.enabled;
              },
              active: function active(editor) {
                return editor.fullscreen;
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* fullscreen */
                  "d"
                ], !editor.fullscreen);
              }
            };
          },
          /* 66 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: "h",
              text: "H",
              title: function title(editor) {
                return editor.langConfig.h.toolbar + "（Ctrl+1~6）";
              },
              menus: [{
                name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* h1 */
                  "e"
                ],
                text: function text(editor) {
                  return editor.langConfig.h1.toolbar;
                },
                action: function action(editor) {
                  editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                    /* h1 */
                    "e"
                  ]);
                }
              }, {
                name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* h2 */
                  "f"
                ],
                text: function text(editor) {
                  return editor.langConfig.h2.toolbar;
                },
                action: function action(editor) {
                  editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                    /* h2 */
                    "f"
                  ]);
                }
              }, {
                name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* h3 */
                  "g"
                ],
                text: function text(editor) {
                  return editor.langConfig.h3.toolbar;
                },
                action: function action(editor) {
                  editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                    /* h3 */
                    "g"
                  ]);
                }
              }, {
                name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* h4 */
                  "h"
                ],
                text: function text(editor) {
                  return editor.langConfig.h4.toolbar;
                },
                action: function action(editor) {
                  editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                    /* h4 */
                    "h"
                  ]);
                }
              }, {
                name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* h5 */
                  "i"
                ],
                text: function text(editor) {
                  return editor.langConfig.h5.toolbar;
                },
                action: function action(editor) {
                  editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                    /* h5 */
                    "i"
                  ]);
                }
              }, {
                name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* h6 */
                  "j"
                ],
                text: function text(editor) {
                  return editor.langConfig.h6.toolbar;
                },
                action: function action(editor) {
                  editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                    /* h6 */
                    "j"
                  ]);
                }
              }]
            };
          },
          /* 67 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* hr */
                "k"
              ],
              icon: "v-md-icon-horizontal",
              title: function title(editor) {
                return editor.langConfig.hr.toolbar;
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* hr */
                  "k"
                ]);
              }
            };
          },
          /* 68 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* italic */
                "m"
              ],
              icon: "v-md-icon-italic",
              title: function title(editor) {
                return editor.langConfig.italic.toolbar + "（Ctrl+I）";
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* italic */
                  "m"
                ]);
              }
            };
          },
          /* 69 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* link */
                "n"
              ],
              icon: "v-md-icon-link",
              title: function title(editor) {
                return editor.langConfig.link.toolbar + "（Ctrl+L）";
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* link */
                  "n"
                ]);
              }
            };
          },
          /* 70 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* ol */
                "o"
              ],
              icon: "v-md-icon-ol",
              title: function title(editor) {
                return editor.langConfig.ol.toolbar + "（Ctrl+O）";
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* ol */
                  "o"
                ]);
              }
            };
          },
          /* 71 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_editor_mode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
            __webpack_exports__["default"] = {
              name: "preview",
              icon: "v-md-icon-preview",
              title: function title(editor) {
                var previewLang = editor.langConfig.preview;
                return editor.currentMode === _utils_constants_editor_mode__WEBPACK_IMPORTED_MODULE_0__[
                  /* default */
                  "a"
                ].EDITABLE ? previewLang.disabled : previewLang.enabled;
              },
              active: function active(editor) {
                return editor.currentMode === _utils_constants_editor_mode__WEBPACK_IMPORTED_MODULE_0__[
                  /* default */
                  "a"
                ].EDITABLE;
              },
              action: function action(editor) {
                editor.currentMode = editor.currentMode === _utils_constants_editor_mode__WEBPACK_IMPORTED_MODULE_0__[
                  /* default */
                  "a"
                ].EDITABLE ? _utils_constants_editor_mode__WEBPACK_IMPORTED_MODULE_0__[
                  /* default */
                  "a"
                ].EDIT : _utils_constants_editor_mode__WEBPACK_IMPORTED_MODULE_0__[
                  /* default */
                  "a"
                ].EDITABLE;
              }
            };
          },
          /* 72 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* quote */
                "p"
              ],
              icon: "v-md-icon-quote",
              title: function title(editor) {
                return editor.langConfig.quote.toolbar + "（Ctrl+Q）";
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* quote */
                  "p"
                ]);
              }
            };
          },
          /* 73 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* redo */
                "q"
              ],
              icon: "v-md-icon-redo",
              title: function title(editor) {
                return editor.langConfig.redo.toolbar + "（Ctrl+Y）";
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* redo */
                  "q"
                ]);
              }
            };
          },
          /* 74 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_exports__["default"] = {
              name: "save",
              icon: "v-md-icon-save",
              title: function title(editor) {
                return editor.langConfig.save.toolbar + "（Ctrl+S）";
              },
              action: function action(editor) {
                editor.save();
              }
            };
          },
          /* 75 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* strikethrough */
                "r"
              ],
              icon: "v-md-icon-strikethrough",
              title: function title(editor) {
                return editor.langConfig.strikethrough.toolbar;
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* strikethrough */
                  "r"
                ]);
              }
            };
          },
          /* 76 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* syncScroll */
                "s"
              ],
              icon: "v-md-icon-sync",
              title: function title(editor) {
                var syncScrollLang = editor.langConfig.syncScroll;
                return editor.enableSyncScroll ? syncScrollLang.disabled : syncScrollLang.enabled;
              },
              active: function active(editor) {
                return editor.enableSyncScroll;
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* syncScroll */
                  "s"
                ], !editor.enableSyncScroll);
              }
            };
          },
          /* 77 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* table */
                "t"
              ],
              icon: "v-md-icon-table",
              title: function title(editor) {
                return editor.langConfig.table.toolbar;
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* table */
                  "t"
                ]);
              }
            };
          },
          /* 78 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_exports__["default"] = {
              name: "toc",
              icon: "v-md-icon-toc",
              title: function title(editor) {
                var tocLang = editor.langConfig.toc;
                return editor.tocVisible ? tocLang.disabled : tocLang.enabled;
              },
              active: function active(editor) {
                return editor.tocVisible;
              },
              action: function action(editor) {
                editor.toggleToc();
              }
            };
          },
          /* 79 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* ul */
                "u"
              ],
              icon: "v-md-icon-ul",
              title: function title(editor) {
                return editor.langConfig.ul.toolbar + "（Ctrl+U）";
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* ul */
                  "u"
                ]);
              }
            };
          },
          /* 80 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              name: _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                /* undo */
                "v"
              ],
              icon: "v-md-icon-undo",
              title: function title(editor) {
                return editor.langConfig.undo.toolbar + "（Ctrl+Z）";
              },
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* undo */
                  "v"
                ]);
              }
            };
          },
          /* 81 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          /* 82 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_tooltip_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(27);
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_tooltip_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_tooltip_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__);
          },
          /* 83 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_menu_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(28);
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_menu_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_menu_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__);
          },
          /* 84 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_index_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(29);
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_index_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_index_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__);
          },
          /* 85 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_toolbar_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(30);
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_toolbar_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_toolbar_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__);
          },
          /* 86 */
          /***/
          function(module2, exports2) {
            var g;
            g = function() {
              return this;
            }();
            try {
              g = g || new Function("return this")();
            } catch (e) {
              if (typeof window === "object")
                g = window;
            }
            module2.exports = g;
          },
          /* 87 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_container_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(31);
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_container_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_container_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__);
          },
          /* 88 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_index_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(32);
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_index_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_index_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__);
          },
          /* 89 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_toc_nav_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(33);
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_toc_nav_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_toc_nav_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__);
          },
          /* 90 */
          /***/
          function(module2, exports2, __webpack_require__) {
            var map2 = {
              "./bold.js": 91,
              "./h1.js": 92,
              "./h2.js": 93,
              "./h3.js": 94,
              "./h4.js": 95,
              "./h5.js": 96,
              "./h6.js": 97,
              "./italic.js": 98,
              "./link.js": 99,
              "./ol.js": 100,
              "./quote.js": 101,
              "./save.js": 102,
              "./ul.js": 103
            };
            function webpackContext(req) {
              var id = webpackContextResolve(req);
              return __webpack_require__(id);
            }
            function webpackContextResolve(req) {
              if (!__webpack_require__.o(map2, req)) {
                var e = new Error("Cannot find module '" + req + "'");
                e.code = "MODULE_NOT_FOUND";
                throw e;
              }
              return map2[req];
            }
            webpackContext.keys = function webpackContextKeys() {
              return Object.keys(map2);
            };
            webpackContext.resolve = webpackContextResolve;
            module2.exports = webpackContext;
            webpackContext.id = 90;
          },
          /* 91 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              modifier: "ctrl",
              key: "b",
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* bold */
                  "a"
                ]);
              }
            };
          },
          /* 92 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              modifier: "ctrl",
              key: "1",
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* h1 */
                  "e"
                ]);
              }
            };
          },
          /* 93 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              modifier: "ctrl",
              key: "2",
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* h2 */
                  "f"
                ]);
              }
            };
          },
          /* 94 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              modifier: "ctrl",
              key: "3",
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* h3 */
                  "g"
                ]);
              }
            };
          },
          /* 95 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              modifier: "ctrl",
              key: "4",
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* h4 */
                  "h"
                ]);
              }
            };
          },
          /* 96 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              modifier: "ctrl",
              key: "5",
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* h5 */
                  "i"
                ]);
              }
            };
          },
          /* 97 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              modifier: "ctrl",
              key: "6",
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* h6 */
                  "j"
                ]);
              }
            };
          },
          /* 98 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              modifier: "ctrl",
              key: "i",
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* italic */
                  "m"
                ]);
              }
            };
          },
          /* 99 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              modifier: "ctrl",
              key: "l",
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* link */
                  "n"
                ]);
              }
            };
          },
          /* 100 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              modifier: "ctrl",
              key: "o",
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* ol */
                  "o"
                ]);
              }
            };
          },
          /* 101 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              modifier: "ctrl",
              key: "q",
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* quote */
                  "p"
                ]);
              }
            };
          },
          /* 102 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            __webpack_exports__["default"] = {
              modifier: "ctrl",
              key: "s",
              action: function action(editor) {
                editor.save();
              }
            };
          },
          /* 103 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var _utils_constants_command__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
            __webpack_exports__["default"] = {
              modifier: "ctrl",
              key: "u",
              action: function action(editor) {
                editor.execCommand(_utils_constants_command__WEBPACK_IMPORTED_MODULE_0__[
                  /* ul */
                  "u"
                ]);
              }
            };
          },
          /* 104 */
          /***/
          function(module2, exports2, __webpack_require__) {
          },
          ,
          /* 106 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_textarea_editor_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(104);
            var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_textarea_editor_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0___default = __webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_dist_stylePostLoader_js_node_modules_postcss_loader_src_index_js_node_modules_sass_loader_dist_cjs_js_node_modules_vue_loader_dist_index_js_ref_2_0_textarea_editor_vue_vue_type_style_index_0_lang_scss__WEBPACK_IMPORTED_MODULE_0__);
          },
          ,
          /* 108 */
          /***/
          function(module2, __webpack_exports__, __webpack_require__) {
            "use strict";
            __webpack_require__.r(__webpack_exports__);
            var external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_ = __webpack_require__(0);
            function render2(_ctx, _cache, $props, $setup, $data, $options) {
              var _component_toc_nav = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["resolveComponent"])("toc-nav");
              var _component_scrollbar = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["resolveComponent"])("scrollbar");
              var _component_v_md_textarea_editor = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["resolveComponent"])("v-md-textarea-editor");
              var _component_v_md_preview = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["resolveComponent"])("v-md-preview");
              var _component_v_md_upload_file = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["resolveComponent"])("v-md-upload-file");
              var _component_v_md_container = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["resolveComponent"])("v-md-container");
              return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                _component_v_md_container,
                {
                  "left-toolbar": _ctx.leftToolbar,
                  "right-toolbar": _ctx.rightToolbar,
                  toolbars: _ctx.toolbars,
                  "disabled-menus": _ctx.disabledMenus,
                  height: _ctx.height,
                  fullscreen: _ctx.fullscreen,
                  "left-area-visible": _ctx.tocVisible,
                  "left-area-title": _ctx.langConfig.toc.title,
                  "left-area-reverse": _ctx.tocNavPositionRight,
                  mode: _ctx.currentMode,
                  onEditorWrapperClick: _ctx.handleEditorWrapperClick,
                  onToolbarItemClick: _ctx.handleToolbarItemClick,
                  onToolbarMenuClick: _ctx.handleToolbarMenuClick,
                  ref: "contaner"
                },
                Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createSlots"])({
                  "left-area": Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withCtx"])(function() {
                    return [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(_component_scrollbar, null, {
                      default: Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withCtx"])(function() {
                        return [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                          _component_toc_nav,
                          {
                            titles: _ctx.titles,
                            onNavClick: _ctx.handleNavClick
                          },
                          null,
                          8,
                          ["titles", "onNavClick"]
                        )];
                      }),
                      _: 1
                    })];
                  }),
                  editor: Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withCtx"])(function() {
                    return [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                      _component_scrollbar,
                      {
                        onScroll: _ctx.handleEditorScroll,
                        ref: "editorScroller"
                      },
                      {
                        default: Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withCtx"])(function() {
                          return [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                            _component_v_md_textarea_editor,
                            {
                              "model-value": _ctx.text,
                              "min-height": _ctx.textEditorMinHeight,
                              placeholder: _ctx.placeholder,
                              "onUpdate:modelValue": _ctx.handleInput,
                              onClick: _cache[1] || (_cache[1] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                              }, ["stop"])),
                              onDrop: _ctx.handleDrop,
                              onPaste: _ctx.handlePaste,
                              onBlur: _ctx.handleBlur,
                              ref: "editorEgine"
                            },
                            null,
                            8,
                            ["model-value", "min-height", "placeholder", "onUpdate:modelValue", "onDrop", "onPaste", "onBlur"]
                          )];
                        }),
                        _: 1
                      },
                      8,
                      ["onScroll"]
                    )];
                  }),
                  preview: Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withCtx"])(function() {
                    return [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                      _component_scrollbar,
                      {
                        ref: "previewScroller"
                      },
                      {
                        default: Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withCtx"])(function() {
                          return [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                            _component_v_md_preview,
                            {
                              text: _ctx.text,
                              "tab-size": _ctx.tabSize,
                              "scroll-container": _ctx.getPreviewScrollContainer,
                              "before-change": _ctx.beforePreviewChange,
                              onChange: _ctx.handleChange,
                              onImageClick: _ctx.handlePreviewImageClick,
                              ref: "preview"
                            },
                            null,
                            8,
                            ["text", "tab-size", "scroll-container", "before-change", "onChange", "onImageClick"]
                          )];
                        }),
                        _: 1
                      },
                      512
                      /* NEED_PATCH */
                    )];
                  }),
                  default: Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withCtx"])(function() {
                    return [_ctx.hasUploadImage ? (Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                      _component_v_md_upload_file,
                      {
                        key: 0,
                        "upload-config": _ctx.uploadConfig,
                        ref: "uploadFile"
                      },
                      null,
                      8,
                      ["upload-config"]
                    )) : Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createCommentVNode"])("v-if", true)];
                  }),
                  _: 2
                }, [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["renderList"])(_ctx.proxySlots, function(slotName) {
                  return {
                    name: slotName,
                    fn: Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withCtx"])(function(scope) {
                      return [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["renderSlot"])(_ctx.$slots, slotName, scope)];
                    })
                  };
                })]),
                1032,
                ["left-toolbar", "right-toolbar", "toolbars", "disabled-menus", "height", "fullscreen", "left-area-visible", "left-area-title", "left-area-reverse", "mode", "onEditorWrapperClick", "onToolbarItemClick", "onToolbarMenuClick"]
              );
            }
            var regenerator = __webpack_require__(10);
            var regenerator_default = __webpack_require__.n(regenerator);
            var asyncToGenerator = __webpack_require__(17);
            var _hoisted_1 = {
              class: "v-md-textarea-editor"
            };
            var _hoisted_2 = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
              "br",
              null,
              null,
              -1
              /* HOISTED */
            );
            function textarea_editorvue_type_template_id_31fed1ea_bindings_modelValue_props_minHeight_props_placeholder_props_historyDebounce_props_historyMax_props_isComposing_data_textareaEl_options_handleCompositionStart_options_handleCompositionUpdate_options_handleCompositionEnd_options_handlePaste_options_handleBlur_options_registerHotkeys_options_handleKeydown_options_heightAtLine_options_clearTimeout_options_updateCurrentHistoryRange_options_handleInput_options_saveHistory_options_updateHistory_options_goHistory_options_getRange_options_setRange_options_focus_options_insertText_options_undo_options_redo_options_render(_ctx, _cache, $props, $setup, $data, $options) {
              return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])("div", _hoisted_1, [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                "pre",
                {
                  style: {
                    minHeight: $props.minHeight
                  }
                },
                [(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(true), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                  external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["Fragment"],
                  null,
                  Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["renderList"])($props.modelValue.split("\n"), function(row, idx) {
                    return Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["openBlock"])(), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createBlock"])(
                      "section",
                      {
                        "data-line": idx + 1
                      },
                      [Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createTextVNode"])(
                        Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["toDisplayString"])(row || " "),
                        1
                        /* TEXT */
                      ), _hoisted_2],
                      8,
                      ["data-line"]
                    );
                  }),
                  256
                  /* UNKEYED_FRAGMENT */
                ))],
                4
                /* STYLE */
              ), Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["createVNode"])(
                "textarea",
                {
                  ref: "textarea",
                  value: $props.modelValue,
                  placeholder: $props.placeholder,
                  spellcheck: "false",
                  onCompositionstart: _cache[1] || (_cache[1] = function() {
                    return $options.handleCompositionStart.apply($options, arguments);
                  }),
                  onCompositionupdate: _cache[2] || (_cache[2] = function() {
                    return $options.handleCompositionUpdate.apply($options, arguments);
                  }),
                  onCompositionend: _cache[3] || (_cache[3] = function() {
                    return $options.handleCompositionEnd.apply($options, arguments);
                  }),
                  onInput: _cache[4] || (_cache[4] = function() {
                    return $options.handleInput.apply($options, arguments);
                  }),
                  onClick: _cache[5] || (_cache[5] = function() {
                    return $options.updateCurrentHistoryRange.apply($options, arguments);
                  }),
                  onPaste: _cache[6] || (_cache[6] = function() {
                    return $options.handlePaste.apply($options, arguments);
                  }),
                  onBlur: _cache[7] || (_cache[7] = function() {
                    return $options.handleBlur.apply($options, arguments);
                  }),
                  onKeydown: [_cache[8] || (_cache[8] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withKeys"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                  }, ["prevent"]), ["tab"])), _cache[9] || (_cache[9] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withKeys"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                    return $options.undo.apply($options, arguments);
                  }, ["ctrl", "prevent", "exact"]), ["z"])), _cache[10] || (_cache[10] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withKeys"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                    return $options.undo.apply($options, arguments);
                  }, ["meta", "prevent", "exact"]), ["z"])), _cache[11] || (_cache[11] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withKeys"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                    return $options.redo.apply($options, arguments);
                  }, ["ctrl", "prevent", "exact"]), ["y"])), _cache[12] || (_cache[12] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withKeys"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                    return $options.redo.apply($options, arguments);
                  }, ["meta", "prevent", "exact"]), ["y"]))],
                  onKeyup: [_cache[13] || (_cache[13] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withKeys"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                    return $options.updateCurrentHistoryRange.apply($options, arguments);
                  }, ["shift", "exact"]), ["up"])), _cache[14] || (_cache[14] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withKeys"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                    return $options.updateCurrentHistoryRange.apply($options, arguments);
                  }, ["shift", "exact"]), ["down"])), _cache[15] || (_cache[15] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withKeys"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                    return $options.updateCurrentHistoryRange.apply($options, arguments);
                  }, ["shift", "exact"]), ["left"])), _cache[16] || (_cache[16] = Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withKeys"])(Object(external_root_Vue_commonjs_vue_commonjs2_vue_amd_vue_["withModifiers"])(function() {
                    return $options.updateCurrentHistoryRange.apply($options, arguments);
                  }, ["shift", "exact"]), ["right"]))]
                },
                null,
                40,
                ["value", "placeholder"]
              )]);
            }
            var esm_extends = __webpack_require__(6);
            var browserSupportsTextareaTextNodes;
            function canManipulateViaTextNodes(input) {
              if (input.nodeName !== "TEXTAREA") {
                return false;
              }
              if (typeof browserSupportsTextareaTextNodes === "undefined") {
                var textarea = document.createElement("textarea");
                textarea.value = 1;
                browserSupportsTextareaTextNodes = !!textarea.firstChild;
              }
              return browserSupportsTextareaTextNodes;
            }
            function index_esm_index(input, text) {
              input.focus();
              if (document.selection) {
                var ieRange = document.selection.createRange();
                ieRange.text = text;
                ieRange.collapse(
                  false
                  /* to the end */
                );
                ieRange.select();
                return;
              }
              var isSuccess = document.execCommand("insertText", false, text);
              if (!isSuccess) {
                var start = input.selectionStart;
                var end = input.selectionEnd;
                if (typeof input.setRangeText === "function") {
                  input.setRangeText(text);
                } else {
                  var range = document.createRange();
                  var textNode = document.createTextNode(text);
                  if (canManipulateViaTextNodes(input)) {
                    var node = input.firstChild;
                    if (!node) {
                      input.appendChild(textNode);
                    } else {
                      var offset = 0;
                      var startNode = null;
                      var endNode = null;
                      while (node && (startNode === null || endNode === null)) {
                        var nodeLength = node.nodeValue.length;
                        if (start >= offset && start <= offset + nodeLength) {
                          range.setStart(startNode = node, start - offset);
                        }
                        if (end >= offset && end <= offset + nodeLength) {
                          range.setEnd(endNode = node, end - offset);
                        }
                        offset += nodeLength;
                        node = node.nextSibling;
                      }
                      if (start !== end) {
                        range.deleteContents();
                      }
                    }
                  }
                  if (canManipulateViaTextNodes(input) && range.commonAncestorContainer.nodeName === "#text") {
                    range.insertNode(textNode);
                  } else {
                    var value = input.value;
                    input.value = value.slice(0, start) + text + value.slice(end);
                  }
                }
                input.setSelectionRange(start + text.length, start + text.length);
                var e = document.createEvent("UIEvent");
                e.initEvent("input", true, false);
                input.dispatchEvent(e);
              }
            }
            var index_esm = index_esm_index;
            var hotkeys = __webpack_require__(36);
            var util = __webpack_require__(2);
            var textarea_editorvue_type_script_lang_js = {
              name: "v-md-textarea-editor",
              props: {
                modelValue: String,
                minHeight: String,
                placeholder: String,
                historyDebounce: {
                  type: Number,
                  default: 400
                },
                historyMax: {
                  type: Number,
                  default: 30
                }
              },
              emits: ["blur", "paste", "update:modelValue"],
              data: function data() {
                return {
                  isComposing: false
                };
              },
              computed: {
                textareaEl: function textareaEl() {
                  return this.$refs.textarea;
                }
              },
              watch: {
                modelValue: function modelValue() {
                  var _this = this;
                  this.clearTimeout();
                  if (!this.triggerInputBySetHistory) {
                    this.timmer = setTimeout(function() {
                      _this.saveHistory();
                      _this.clearTimeout();
                    }, this.historyDebounce);
                  }
                }
              },
              created: function created() {
                this.historyStack = [];
                this.historyIndex = 0;
                this.hotkeysManager = new hotkeys[
                  "a"
                  /* default */
                ]();
              },
              mounted: function mounted() {
                this.saveHistory();
                this.textareaEl.addEventListener("keydown", this.handleKeydown, false);
              },
              beforeUnmount: function beforeUnmount() {
                this.textareaEl.removeEventListener("keydown", this.handleKeydown, false);
              },
              methods: {
                handleCompositionStart: function handleCompositionStart() {
                  this.isComposing = true;
                },
                handleCompositionUpdate: function handleCompositionUpdate(event) {
                  var text = event.target.value;
                  var lastCharacter = text[text.length - 1] || "";
                  this.isComposing = !Object(util[
                    "e"
                    /* isKorean */
                  ])(lastCharacter);
                },
                handleCompositionEnd: function handleCompositionEnd(event) {
                  if (this.isComposing) {
                    this.isComposing = false;
                    this.handleInput(event);
                  }
                },
                handlePaste: function handlePaste(e) {
                  this.$emit("paste", e);
                },
                handleBlur: function handleBlur(e) {
                  this.$emit("blur", e);
                },
                registerHotkeys: function registerHotkeys() {
                  var _this$hotkeysManager;
                  (_this$hotkeysManager = this.hotkeysManager).registerHotkeys.apply(_this$hotkeysManager, arguments);
                },
                handleKeydown: function handleKeydown(e) {
                  this.hotkeysManager.dispatch(e);
                },
                heightAtLine: function heightAtLine(lineIndex) {
                  var el = this.$el.querySelector('section[data-line="' + lineIndex + '"]');
                  return el ? el.offsetTop + el.offsetHeight : 0;
                },
                clearTimeout: function(_clearTimeout) {
                  function clearTimeout2() {
                    return _clearTimeout.apply(this, arguments);
                  }
                  clearTimeout2.toString = function() {
                    return _clearTimeout.toString();
                  };
                  return clearTimeout2;
                }(function() {
                  if (this.timmer)
                    clearTimeout(this.timmer);
                  this.timmer = null;
                }),
                updateCurrentHistoryRange: function updateCurrentHistoryRange() {
                  if (!this.timmer) {
                    this.updateHistory(this.historyIndex, {
                      range: this.getRange()
                    });
                  }
                },
                handleInput: function handleInput(e) {
                  if (this.isComposing)
                    return;
                  this.$emit("update:modelValue", e.target.value);
                },
                saveHistory: function saveHistory() {
                  var range = this.getRange();
                  var history = {
                    value: this.modelValue,
                    range
                  };
                  this.historyStack = this.historyStack.slice(0, this.historyIndex + 1);
                  this.historyStack.push(history);
                  if (this.historyStack.length > this.historyMax)
                    this.historyStack.shift();
                  this.historyIndex = this.historyStack.length - 1;
                },
                updateHistory: function updateHistory(index, data) {
                  var history = this.historyStack[index];
                  if ("value" in data)
                    history.value = data.value;
                  Object(esm_extends[
                    "a"
                    /* default */
                  ])(history.range, data.range);
                },
                goHistory: function goHistory(index) {
                  var _this2 = this;
                  var _this$historyStack$in = this.historyStack[index], value = _this$historyStack$in.value, range = _this$historyStack$in.range;
                  this.$emit("update:modelValue", value);
                  this.triggerInputBySetHistory = true;
                  this.$nextTick(function() {
                    _this2.triggerInputBySetHistory = false;
                    _this2.setRange(range);
                  });
                },
                getRange: function getRange() {
                  return {
                    start: this.textareaEl.selectionStart,
                    end: this.textareaEl.selectionEnd
                  };
                },
                setRange: function setRange(_ref) {
                  var start = _ref.start, end = _ref.end;
                  this.textareaEl.setSelectionRange(start, end);
                  this.updateCurrentHistoryRange();
                },
                focus: function focus() {
                  this.textareaEl.focus();
                },
                insertText: function insertText(text) {
                  index_esm(this.textareaEl, text);
                },
                undo: function undo() {
                  if (this.historyIndex > 0) {
                    this.historyIndex--;
                    this.goHistory(this.historyIndex);
                  }
                },
                redo: function redo() {
                  if (this.historyIndex < this.historyStack.length - 1) {
                    this.historyIndex++;
                    this.goHistory(this.historyIndex);
                  }
                }
              }
            };
            var textarea_editorvue_type_style_index_0_lang_scss = __webpack_require__(106);
            textarea_editorvue_type_script_lang_js.render = textarea_editorvue_type_template_id_31fed1ea_bindings_modelValue_props_minHeight_props_placeholder_props_historyDebounce_props_historyMax_props_isComposing_data_textareaEl_options_handleCompositionStart_options_handleCompositionUpdate_options_handleCompositionEnd_options_handlePaste_options_handleBlur_options_registerHotkeys_options_handleKeydown_options_heightAtLine_options_clearTimeout_options_updateCurrentHistoryRange_options_handleInput_options_saveHistory_options_updateHistory_options_goHistory_options_getRange_options_setRange_options_focus_options_insertText_options_undo_options_redo_options_render;
            var textarea_editor = textarea_editorvue_type_script_lang_js;
            var create_editor = __webpack_require__(35);
            var _components;
            var component = {
              components: (_components = {}, _components[textarea_editor.name] = textarea_editor, _components),
              watch: {
                modelValue: function modelValue() {
                  this.text = this.modelValue;
                },
                height: {
                  handler: function handler() {
                    var _this = this;
                    return Object(asyncToGenerator[
                      "a"
                      /* default */
                    ])(regenerator_default.a.mark(function _callee() {
                      var editorWrapper;
                      return regenerator_default.a.wrap(function _callee$(_context) {
                        while (1)
                          switch (_context.prev = _context.next) {
                            case 0:
                              if (util[
                                "d"
                                /* inBrowser */
                              ]) {
                                _context.next = 2;
                                break;
                              }
                              return _context.abrupt("return");
                            case 2:
                              _context.next = 4;
                              return _this.$nextTick();
                            case 4:
                              if (_this.height) {
                                editorWrapper = _this.$el.querySelector(".v-md-editor__editor-wrapper");
                                _this.textEditorMinHeight = window.getComputedStyle(editorWrapper).height;
                              } else {
                                _this.textEditorMinHeight = "";
                              }
                            case 5:
                            case "end":
                              return _context.stop();
                          }
                      }, _callee);
                    }))();
                  },
                  immediate: true
                }
              },
              data: function data() {
                return {
                  textEditorMinHeight: ""
                };
              },
              methods: {
                handleEditorWrapperClick: function handleEditorWrapperClick() {
                  this.setFocusEnd();
                },
                // Must implement
                editorFocusEnd: function editorFocusEnd() {
                  this.focus();
                  this.$refs.editorEgine.setRange({
                    start: this.text.length,
                    end: this.text.length
                  });
                },
                // Must implement
                delLineLeft: function delLineLeft() {
                  var editorEgine = this.$refs.editorEgine;
                  var _editorEgine$getRange = editorEgine.getRange(), start = _editorEgine$getRange.start;
                  var leftText = this.getCursorLineLeftText();
                  editorEgine.setRange({
                    start: start - leftText.length - 1,
                    end: start
                  });
                  this.replaceSelectionText("\n");
                },
                // Must implement
                getCursorLineLeftText: function getCursorLineLeftText() {
                  var _this$$refs$editorEgi = this.$refs.editorEgine.getRange(), start = _this$$refs$editorEgi.start, end = _this$$refs$editorEgi.end;
                  return start === end ? this.text.slice(0, start).split("\n").pop() : null;
                },
                // Must implement
                editorRegisterHotkeys: function editorRegisterHotkeys() {
                  var _this$$refs$editorEgi2;
                  (_this$$refs$editorEgi2 = this.$refs.editorEgine).registerHotkeys.apply(_this$$refs$editorEgi2, arguments);
                },
                // Must implement
                editorScrollToTop: function editorScrollToTop(scrollTop) {
                  this.$refs.editorScroller.scrollTo(scrollTop);
                },
                // Must implement
                getScrollInfo: function getScrollInfo() {
                  return this.$refs.editorScroller.getScrollInfo();
                },
                // Must implement
                heightAtLine: function heightAtLine() {
                  var _this$$refs$editorEgi3;
                  return (_this$$refs$editorEgi3 = this.$refs.editorEgine).heightAtLine.apply(_this$$refs$editorEgi3, arguments);
                },
                // Must implement
                focus: function focus() {
                  this.$refs.editorEgine.focus();
                },
                // Must implement
                undo: function undo() {
                  this.$refs.editorEgine.undo();
                },
                // Must implement
                redo: function redo() {
                  this.$refs.editorEgine.redo();
                },
                // Must implement
                clear: function clear2() {
                  this.focus();
                  this.handleInput("");
                },
                // Must implement
                replaceSelectionText: function replaceSelectionText(text) {
                  this.$refs.editorEgine.insertText(text);
                },
                // Must implement
                getCurrentSelectedStr: function getCurrentSelectedStr() {
                  var _this$$refs$editorEgi4 = this.$refs.editorEgine.getRange(), start = _this$$refs$editorEgi4.start, end = _this$$refs$editorEgi4.end;
                  return end > start ? this.text.slice(start, end) : null;
                },
                // Must implement
                changeSelctionTo: function changeSelctionTo(insertText, selectedText) {
                  var editorEgine = this.$refs.editorEgine;
                  var selectedIndexOfStr = insertText.indexOf(selectedText);
                  var cursorEndIndex = editorEgine.getRange().end;
                  if (selectedIndexOfStr === -1)
                    return;
                  var text = this.text.slice(0, cursorEndIndex);
                  var insertTextIndex = text.length - insertText.length;
                  var rangeStartIndex = insertTextIndex + selectedIndexOfStr;
                  var rangeEndIndex = rangeStartIndex + selectedText.length;
                  this.$refs.editorEgine.setRange({
                    start: rangeStartIndex,
                    end: rangeEndIndex
                  });
                }
              }
            };
            Object(create_editor[
              "a"
              /* default */
            ])(component);
            var base_editorvue_type_script_lang_js = component;
            base_editorvue_type_script_lang_js.render = render2;
            var base_editor = base_editorvue_type_script_lang_js;
            var xss = __webpack_require__(7);
            var font = __webpack_require__(18);
            var version2 = "2.3.18";
            var base_editor_install = function install(app) {
              app.component(base_editor.name, base_editor);
            };
            base_editor.version = version2;
            base_editor.install = base_editor_install;
            base_editor.xss = xss[
              "a"
              /* default */
            ];
            base_editor.use = function(optionsOrInstall, opt) {
              if (typeof optionsOrInstall === "function") {
                optionsOrInstall(base_editor, opt);
              } else {
                optionsOrInstall.install(base_editor, opt);
              }
              return base_editor;
            };
            var src_base_editor = __webpack_exports__["default"] = base_editor;
          }
          /******/
        ])["default"]
      );
    });
  }
});
export default require_base_editor();
//# sourceMappingURL=@kangc_v-md-editor.js.map
